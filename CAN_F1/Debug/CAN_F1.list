
CAN_F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000183c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001a20  08001a20  00011a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.exidx    00000008  08001a50  08001a50  00011a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000000c  20000000  08001a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000002c  2000000c  08001a64  0002000c  2**2
                  ALLOC
  6 ._user_heap_stack 00000600  20000038  08001a64  00020038  2**0
                  ALLOC
  7 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000447a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00001223  00000000  00000000  000244af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000550  00000000  00000000  000256d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000498  00000000  00000000  00025c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0001beef  00000000  00000000  000260c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00006481  00000000  00000000  00041faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000a72e9  00000000  00000000  00048430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000050  00000000  00000000  000ef719  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000013bc  00000000  00000000  000ef76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b976 	b.w	80004e8 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	460d      	mov	r5, r1
 800021c:	4604      	mov	r4, r0
 800021e:	4688      	mov	r8, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14d      	bne.n	80002c0 <__udivmoddi4+0xac>
 8000224:	428a      	cmp	r2, r1
 8000226:	4694      	mov	ip, r2
 8000228:	d968      	bls.n	80002fc <__udivmoddi4+0xe8>
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	b152      	cbz	r2, 8000246 <__udivmoddi4+0x32>
 8000230:	fa01 f302 	lsl.w	r3, r1, r2
 8000234:	f1c2 0120 	rsb	r1, r2, #32
 8000238:	fa20 f101 	lsr.w	r1, r0, r1
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	ea41 0803 	orr.w	r8, r1, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800024a:	fbb8 f7f1 	udiv	r7, r8, r1
 800024e:	fa1f fe8c 	uxth.w	lr, ip
 8000252:	fb01 8817 	mls	r8, r1, r7, r8
 8000256:	fb07 f00e 	mul.w	r0, r7, lr
 800025a:	0c23      	lsrs	r3, r4, #16
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	4298      	cmp	r0, r3
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x66>
 8000264:	eb1c 0303 	adds.w	r3, ip, r3
 8000268:	f107 35ff 	add.w	r5, r7, #4294967295
 800026c:	f080 811e 	bcs.w	80004ac <__udivmoddi4+0x298>
 8000270:	4298      	cmp	r0, r3
 8000272:	f240 811b 	bls.w	80004ac <__udivmoddi4+0x298>
 8000276:	3f02      	subs	r7, #2
 8000278:	4463      	add	r3, ip
 800027a:	1a1b      	subs	r3, r3, r0
 800027c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000280:	fb01 3310 	mls	r3, r1, r0, r3
 8000284:	fb00 fe0e 	mul.w	lr, r0, lr
 8000288:	b2a4      	uxth	r4, r4
 800028a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028e:	45a6      	cmp	lr, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x94>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8109 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8106 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	2100      	movs	r1, #0
 80002aa:	eba4 040e 	sub.w	r4, r4, lr
 80002ae:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa8>
 80002b4:	2300      	movs	r3, #0
 80002b6:	40d4      	lsrs	r4, r2
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d908      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c4:	2e00      	cmp	r6, #0
 80002c6:	f000 80ee 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002ca:	2100      	movs	r1, #0
 80002cc:	e9c6 0500 	strd	r0, r5, [r6]
 80002d0:	4608      	mov	r0, r1
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	42ab      	cmp	r3, r5
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fc 	bhi.w	80004e0 <__udivmoddi4+0x2cc>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb65 0303 	sbc.w	r3, r5, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e2      	beq.n	80002bc <__udivmoddi4+0xa8>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7df      	b.n	80002bc <__udivmoddi4+0xa8>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8091 	bne.w	800042c <__udivmoddi4+0x218>
 800030a:	eba1 000c 	sub.w	r0, r1, ip
 800030e:	2101      	movs	r1, #1
 8000310:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000314:	fa1f fe8c 	uxth.w	lr, ip
 8000318:	fbb0 f3f7 	udiv	r3, r0, r7
 800031c:	fb07 0013 	mls	r0, r7, r3, r0
 8000320:	0c25      	lsrs	r5, r4, #16
 8000322:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	42a8      	cmp	r0, r5
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0505 	adds.w	r5, ip, r5
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	42a8      	cmp	r0, r5
 800033a:	f200 80ce 	bhi.w	80004da <__udivmoddi4+0x2c6>
 800033e:	4643      	mov	r3, r8
 8000340:	1a2d      	subs	r5, r5, r0
 8000342:	fbb5 f0f7 	udiv	r0, r5, r7
 8000346:	fb07 5510 	mls	r5, r7, r0, r5
 800034a:	fb0e fe00 	mul.w	lr, lr, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80b6 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 8000368:	4628      	mov	r0, r5
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79e      	b.n	80002b2 <__udivmoddi4+0x9e>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa25 fa07 	lsr.w	sl, r5, r7
 8000386:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038a:	fbba f8f9 	udiv	r8, sl, r9
 800038e:	fa20 f307 	lsr.w	r3, r0, r7
 8000392:	fb09 aa18 	mls	sl, r9, r8, sl
 8000396:	408d      	lsls	r5, r1
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	431d      	orrs	r5, r3
 800039e:	fa00 f301 	lsl.w	r3, r0, r1
 80003a2:	fb08 f00e 	mul.w	r0, r8, lr
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ac:	42a0      	cmp	r0, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	42a0      	cmp	r0, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1a24      	subs	r4, r4, r0
 80003ce:	fbb4 f0f9 	udiv	r0, r4, r9
 80003d2:	fb09 4410 	mls	r4, r9, r0, r4
 80003d6:	fb00 fe0e 	mul.w	lr, r0, lr
 80003da:	b2ad      	uxth	r5, r5
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9502 	umull	r9, r5, r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2d0>
 8000410:	ebb3 0208 	subs.w	r2, r3, r8
 8000414:	eb64 040e 	sbc.w	r4, r4, lr
 8000418:	fa22 f301 	lsr.w	r3, r2, r1
 800041c:	fa04 f707 	lsl.w	r7, r4, r7
 8000420:	431f      	orrs	r7, r3
 8000422:	40cc      	lsrs	r4, r1
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	2100      	movs	r1, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa8>
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	f1c2 0120 	rsb	r1, r2, #32
 8000434:	fa25 f301 	lsr.w	r3, r5, r1
 8000438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043c:	fa20 f101 	lsr.w	r1, r0, r1
 8000440:	4095      	lsls	r5, r2
 8000442:	430d      	orrs	r5, r1
 8000444:	fbb3 f1f7 	udiv	r1, r3, r7
 8000448:	fb07 3311 	mls	r3, r7, r1, r3
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	0c28      	lsrs	r0, r5, #16
 8000452:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000456:	fb01 f30e 	mul.w	r3, r1, lr
 800045a:	4283      	cmp	r3, r0
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0000 	adds.w	r0, ip, r0
 8000466:	f101 38ff 	add.w	r8, r1, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	4283      	cmp	r3, r0
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3902      	subs	r1, #2
 8000472:	4460      	add	r0, ip
 8000474:	1ac0      	subs	r0, r0, r3
 8000476:	fbb0 f3f7 	udiv	r3, r0, r7
 800047a:	fb07 0013 	mls	r0, r7, r3, r0
 800047e:	b2ad      	uxth	r5, r5
 8000480:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000484:	fb03 f00e 	mul.w	r0, r3, lr
 8000488:	42a8      	cmp	r0, r5
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0505 	adds.w	r5, ip, r5
 8000490:	f103 38ff 	add.w	r8, r3, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	42a8      	cmp	r0, r5
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3b02      	subs	r3, #2
 800049c:	4465      	add	r5, ip
 800049e:	1a28      	subs	r0, r5, r0
 80004a0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e707      	b.n	80002bc <__udivmoddi4+0xa8>
 80004ac:	462f      	mov	r7, r5
 80004ae:	e6e4      	b.n	800027a <__udivmoddi4+0x66>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f9      	b.n	80002a8 <__udivmoddi4+0x94>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4643      	mov	r3, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4628      	mov	r0, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4641      	mov	r1, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	4464      	add	r4, ip
 80004d6:	3802      	subs	r0, #2
 80004d8:	e747      	b.n	800036a <__udivmoddi4+0x156>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x12c>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e706      	b.n	80002f2 <__udivmoddi4+0xde>
 80004e4:	4631      	mov	r1, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa8>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_CAN1_Init+0x64>)
 80004f2:	4a18      	ldr	r2, [pc, #96]	; (8000554 <MX_CAN1_Init+0x68>)
 80004f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <MX_CAN1_Init+0x64>)
 80004f8:	2210      	movs	r2, #16
 80004fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_CAN1_Init+0x64>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_CAN1_Init+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_CAN1_Init+0x64>)
 800050a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800050e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_CAN1_Init+0x64>)
 8000512:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000516:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <MX_CAN1_Init+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_CAN1_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_CAN1_Init+0x64>)
 8000526:	2200      	movs	r2, #0
 8000528:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_CAN1_Init+0x64>)
 800052c:	2200      	movs	r2, #0
 800052e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MX_CAN1_Init+0x64>)
 8000532:	2200      	movs	r2, #0
 8000534:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_CAN1_Init+0x64>)
 8000538:	2200      	movs	r2, #0
 800053a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <MX_CAN1_Init+0x64>)
 800053e:	f000 f9c1 	bl	80008c4 <HAL_CAN_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000548:	f000 f8ce 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2000000c 	.word	0x2000000c
 8000554:	40006400 	.word	0x40006400

08000558 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <HAL_CAN_MspInit+0x8c>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d131      	bne.n	80005dc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000578:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <HAL_CAN_MspInit+0x90>)
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	4a1a      	ldr	r2, [pc, #104]	; (80005e8 <HAL_CAN_MspInit+0x90>)
 800057e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000582:	61d3      	str	r3, [r2, #28]
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <HAL_CAN_MspInit+0x90>)
 8000586:	69db      	ldr	r3, [r3, #28]
 8000588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <HAL_CAN_MspInit+0x90>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <HAL_CAN_MspInit+0x90>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <HAL_CAN_MspInit+0x90>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	4619      	mov	r1, r3
 80005bc:	480b      	ldr	r0, [pc, #44]	; (80005ec <HAL_CAN_MspInit+0x94>)
 80005be:	f000 fb61 	bl	8000c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c8:	2302      	movs	r3, #2
 80005ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005cc:	2303      	movs	r3, #3
 80005ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	4619      	mov	r1, r3
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <HAL_CAN_MspInit+0x94>)
 80005d8:	f000 fb54 	bl	8000c84 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40006400 	.word	0x40006400
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010800 	.word	0x40010800

080005f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_GPIO_Init+0x40>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <MX_GPIO_Init+0x40>)
 80005fc:	f043 0320 	orr.w	r3, r3, #32
 8000600:	6193      	str	r3, [r2, #24]
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <MX_GPIO_Init+0x40>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	f003 0320 	and.w	r3, r3, #32
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_GPIO_Init+0x40>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a07      	ldr	r2, [pc, #28]	; (8000630 <MX_GPIO_Init+0x40>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <MX_GPIO_Init+0x40>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]

}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	40021000 	.word	0x40021000

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 f8e2 	bl	8000800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f806 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f7ff ffd6 	bl	80005f0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000644:	f7ff ff52 	bl	80004ec <MX_CAN1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000648:	e7fe      	b.n	8000648 <main+0x14>
	...

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0318 	add.w	r3, r7, #24
 8000656:	2238      	movs	r2, #56	; 0x38
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f001 f9cc 	bl	80019f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066e:	2301      	movs	r3, #1
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800068e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0318 	add.w	r3, r7, #24
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fc75 	bl	8000f8c <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x60>
  {
    Error_Handler();
 80006a8:	f000 f81e 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2102      	movs	r1, #2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 ff76 	bl	80015b8 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006d2:	f000 f809 	bl	80006e8 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80006d6:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <SystemClock_Config+0x98>)
 80006d8:	2201      	movs	r2, #1
 80006da:	601a      	str	r2, [r3, #0]
}
 80006dc:	bf00      	nop
 80006de:	3750      	adds	r7, #80	; 0x50
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	42420070 	.word	0x42420070

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <Error_Handler+0x8>
	...

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <HAL_MspInit+0x5c>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a14      	ldr	r2, [pc, #80]	; (8000750 <HAL_MspInit+0x5c>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_MspInit+0x5c>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_MspInit+0x5c>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <HAL_MspInit+0x5c>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	61d3      	str	r3, [r2, #28]
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_MspInit+0x5c>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <HAL_MspInit+0x60>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <HAL_MspInit+0x60>)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40021000 	.word	0x40021000
 8000754:	40010000 	.word	0x40010000

08000758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800075c:	e7fe      	b.n	800075c <NMI_Handler+0x4>

0800075e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000762:	e7fe      	b.n	8000762 <HardFault_Handler+0x4>

08000764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <MemManage_Handler+0x4>

0800076a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <BusFault_Handler+0x4>

08000770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <UsageFault_Handler+0x4>

08000776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr

08000782 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079e:	f000 f875 	bl	800088c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
	...

080007b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007b4:	f7ff fff7 	bl	80007a6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007ba:	490c      	ldr	r1, [pc, #48]	; (80007ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c0:	e002      	b.n	80007c8 <LoopCopyDataInit>

080007c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c6:	3304      	adds	r3, #4

080007c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007cc:	d3f9      	bcc.n	80007c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ce:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007d0:	4c09      	ldr	r4, [pc, #36]	; (80007f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d4:	e001      	b.n	80007da <LoopFillZerobss>

080007d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d8:	3204      	adds	r2, #4

080007da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007dc:	d3fb      	bcc.n	80007d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007de:	f001 f8e7 	bl	80019b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e2:	f7ff ff27 	bl	8000634 <main>
  bx lr
 80007e6:	4770      	bx	lr
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007f0:	08001a58 	.word	0x08001a58
  ldr r2, =_sbss
 80007f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007f8:	20000038 	.word	0x20000038

080007fc <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC1_2_IRQHandler>
	...

08000800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_Init+0x28>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_Init+0x28>)
 800080a:	f043 0310 	orr.w	r3, r3, #16
 800080e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 fa03 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000816:	200f      	movs	r0, #15
 8000818:	f000 f808 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800081c:	f7ff ff6a 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40022000 	.word	0x40022000

0800082c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x54>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_InitTick+0x58>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fa0d 	bl	8000c6a <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e00e      	b.n	8000878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d80a      	bhi.n	8000876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 f9e3 	bl	8000c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <HAL_InitTick+0x5c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000000 	.word	0x20000000
 8000884:	20000008 	.word	0x20000008
 8000888:	20000004 	.word	0x20000004

0800088c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_IncTick+0x1c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_IncTick+0x20>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a03      	ldr	r2, [pc, #12]	; (80008ac <HAL_IncTick+0x20>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000034 	.word	0x20000034

080008b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return uwTick;
 80008b4:	4b02      	ldr	r3, [pc, #8]	; (80008c0 <HAL_GetTick+0x10>)
 80008b6:	681b      	ldr	r3, [r3, #0]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	20000034 	.word	0x20000034

080008c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d101      	bne.n	80008d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e0ed      	b.n	8000ab2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d102      	bne.n	80008e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff fe38 	bl	8000558 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f042 0201 	orr.w	r2, r2, #1
 80008f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008f8:	f7ff ffda 	bl	80008b0 <HAL_GetTick>
 80008fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008fe:	e012      	b.n	8000926 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000900:	f7ff ffd6 	bl	80008b0 <HAL_GetTick>
 8000904:	4602      	mov	r2, r0
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	2b0a      	cmp	r3, #10
 800090c:	d90b      	bls.n	8000926 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000912:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2205      	movs	r2, #5
 800091e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e0c5      	b.n	8000ab2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	2b00      	cmp	r3, #0
 8000932:	d0e5      	beq.n	8000900 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f022 0202 	bic.w	r2, r2, #2
 8000942:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000944:	f7ff ffb4 	bl	80008b0 <HAL_GetTick>
 8000948:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800094a:	e012      	b.n	8000972 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800094c:	f7ff ffb0 	bl	80008b0 <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	2b0a      	cmp	r3, #10
 8000958:	d90b      	bls.n	8000972 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2205      	movs	r2, #5
 800096a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e09f      	b.n	8000ab2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 0302 	and.w	r3, r3, #2
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1e5      	bne.n	800094c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	7e1b      	ldrb	r3, [r3, #24]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d108      	bne.n	800099a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	e007      	b.n	80009aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	7e5b      	ldrb	r3, [r3, #25]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d108      	bne.n	80009c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	e007      	b.n	80009d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80009d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	7e9b      	ldrb	r3, [r3, #26]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d108      	bne.n	80009ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f042 0220 	orr.w	r2, r2, #32
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	e007      	b.n	80009fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f022 0220 	bic.w	r2, r2, #32
 80009fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	7edb      	ldrb	r3, [r3, #27]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d108      	bne.n	8000a18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f022 0210 	bic.w	r2, r2, #16
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	e007      	b.n	8000a28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f042 0210 	orr.w	r2, r2, #16
 8000a26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	7f1b      	ldrb	r3, [r3, #28]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d108      	bne.n	8000a42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f042 0208 	orr.w	r2, r2, #8
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	e007      	b.n	8000a52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f022 0208 	bic.w	r2, r2, #8
 8000a50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	7f5b      	ldrb	r3, [r3, #29]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d108      	bne.n	8000a6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f042 0204 	orr.w	r2, r2, #4
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	e007      	b.n	8000a7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f022 0204 	bic.w	r2, r2, #4
 8000a7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689a      	ldr	r2, [r3, #8]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	431a      	orrs	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	691b      	ldr	r3, [r3, #16]
 8000a8a:	431a      	orrs	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	ea42 0103 	orr.w	r1, r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	1e5a      	subs	r2, r3, #1
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aee:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	60d3      	str	r3, [r2, #12]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <__NVIC_GetPriorityGrouping+0x18>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	f003 0307 	and.w	r3, r3, #7
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db0a      	blt.n	8000b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	; (8000b6c <__NVIC_SetPriority+0x4c>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b48:	e00a      	b.n	8000b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4908      	ldr	r1, [pc, #32]	; (8000b70 <__NVIC_SetPriority+0x50>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	; 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be8:	d301      	bcc.n	8000bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00f      	b.n	8000c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <SysTick_Config+0x40>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f7ff ff90 	bl	8000b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <SysTick_Config+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <SysTick_Config+0x40>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff49 	bl	8000abc <__NVIC_SetPriorityGrouping>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c44:	f7ff ff5e 	bl	8000b04 <__NVIC_GetPriorityGrouping>
 8000c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff ff90 	bl	8000b74 <NVIC_EncodePriority>
 8000c54:	4602      	mov	r2, r0
 8000c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff5f 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ffb0 	bl	8000bd8 <SysTick_Config>
 8000c78:	4603      	mov	r3, r0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b08b      	sub	sp, #44	; 0x2c
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c96:	e169      	b.n	8000f6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	f040 8158 	bne.w	8000f66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	4a9a      	ldr	r2, [pc, #616]	; (8000f24 <HAL_GPIO_Init+0x2a0>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d05e      	beq.n	8000d7e <HAL_GPIO_Init+0xfa>
 8000cc0:	4a98      	ldr	r2, [pc, #608]	; (8000f24 <HAL_GPIO_Init+0x2a0>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d875      	bhi.n	8000db2 <HAL_GPIO_Init+0x12e>
 8000cc6:	4a98      	ldr	r2, [pc, #608]	; (8000f28 <HAL_GPIO_Init+0x2a4>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d058      	beq.n	8000d7e <HAL_GPIO_Init+0xfa>
 8000ccc:	4a96      	ldr	r2, [pc, #600]	; (8000f28 <HAL_GPIO_Init+0x2a4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d86f      	bhi.n	8000db2 <HAL_GPIO_Init+0x12e>
 8000cd2:	4a96      	ldr	r2, [pc, #600]	; (8000f2c <HAL_GPIO_Init+0x2a8>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d052      	beq.n	8000d7e <HAL_GPIO_Init+0xfa>
 8000cd8:	4a94      	ldr	r2, [pc, #592]	; (8000f2c <HAL_GPIO_Init+0x2a8>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d869      	bhi.n	8000db2 <HAL_GPIO_Init+0x12e>
 8000cde:	4a94      	ldr	r2, [pc, #592]	; (8000f30 <HAL_GPIO_Init+0x2ac>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d04c      	beq.n	8000d7e <HAL_GPIO_Init+0xfa>
 8000ce4:	4a92      	ldr	r2, [pc, #584]	; (8000f30 <HAL_GPIO_Init+0x2ac>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d863      	bhi.n	8000db2 <HAL_GPIO_Init+0x12e>
 8000cea:	4a92      	ldr	r2, [pc, #584]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d046      	beq.n	8000d7e <HAL_GPIO_Init+0xfa>
 8000cf0:	4a90      	ldr	r2, [pc, #576]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d85d      	bhi.n	8000db2 <HAL_GPIO_Init+0x12e>
 8000cf6:	2b12      	cmp	r3, #18
 8000cf8:	d82a      	bhi.n	8000d50 <HAL_GPIO_Init+0xcc>
 8000cfa:	2b12      	cmp	r3, #18
 8000cfc:	d859      	bhi.n	8000db2 <HAL_GPIO_Init+0x12e>
 8000cfe:	a201      	add	r2, pc, #4	; (adr r2, 8000d04 <HAL_GPIO_Init+0x80>)
 8000d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d04:	08000d7f 	.word	0x08000d7f
 8000d08:	08000d59 	.word	0x08000d59
 8000d0c:	08000d6b 	.word	0x08000d6b
 8000d10:	08000dad 	.word	0x08000dad
 8000d14:	08000db3 	.word	0x08000db3
 8000d18:	08000db3 	.word	0x08000db3
 8000d1c:	08000db3 	.word	0x08000db3
 8000d20:	08000db3 	.word	0x08000db3
 8000d24:	08000db3 	.word	0x08000db3
 8000d28:	08000db3 	.word	0x08000db3
 8000d2c:	08000db3 	.word	0x08000db3
 8000d30:	08000db3 	.word	0x08000db3
 8000d34:	08000db3 	.word	0x08000db3
 8000d38:	08000db3 	.word	0x08000db3
 8000d3c:	08000db3 	.word	0x08000db3
 8000d40:	08000db3 	.word	0x08000db3
 8000d44:	08000db3 	.word	0x08000db3
 8000d48:	08000d61 	.word	0x08000d61
 8000d4c:	08000d75 	.word	0x08000d75
 8000d50:	4a79      	ldr	r2, [pc, #484]	; (8000f38 <HAL_GPIO_Init+0x2b4>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d013      	beq.n	8000d7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d56:	e02c      	b.n	8000db2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	623b      	str	r3, [r7, #32]
          break;
 8000d5e:	e029      	b.n	8000db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	3304      	adds	r3, #4
 8000d66:	623b      	str	r3, [r7, #32]
          break;
 8000d68:	e024      	b.n	8000db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	3308      	adds	r3, #8
 8000d70:	623b      	str	r3, [r7, #32]
          break;
 8000d72:	e01f      	b.n	8000db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	330c      	adds	r3, #12
 8000d7a:	623b      	str	r3, [r7, #32]
          break;
 8000d7c:	e01a      	b.n	8000db4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d102      	bne.n	8000d8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d86:	2304      	movs	r3, #4
 8000d88:	623b      	str	r3, [r7, #32]
          break;
 8000d8a:	e013      	b.n	8000db4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d105      	bne.n	8000da0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d94:	2308      	movs	r3, #8
 8000d96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69fa      	ldr	r2, [r7, #28]
 8000d9c:	611a      	str	r2, [r3, #16]
          break;
 8000d9e:	e009      	b.n	8000db4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da0:	2308      	movs	r3, #8
 8000da2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69fa      	ldr	r2, [r7, #28]
 8000da8:	615a      	str	r2, [r3, #20]
          break;
 8000daa:	e003      	b.n	8000db4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
          break;
 8000db0:	e000      	b.n	8000db4 <HAL_GPIO_Init+0x130>
          break;
 8000db2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	2bff      	cmp	r3, #255	; 0xff
 8000db8:	d801      	bhi.n	8000dbe <HAL_GPIO_Init+0x13a>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	e001      	b.n	8000dc2 <HAL_GPIO_Init+0x13e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	2bff      	cmp	r3, #255	; 0xff
 8000dc8:	d802      	bhi.n	8000dd0 <HAL_GPIO_Init+0x14c>
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	e002      	b.n	8000dd6 <HAL_GPIO_Init+0x152>
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	3b08      	subs	r3, #8
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	210f      	movs	r1, #15
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	fa01 f303 	lsl.w	r3, r1, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	401a      	ands	r2, r3
 8000de8:	6a39      	ldr	r1, [r7, #32]
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	431a      	orrs	r2, r3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 80b1 	beq.w	8000f66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e04:	4b4d      	ldr	r3, [pc, #308]	; (8000f3c <HAL_GPIO_Init+0x2b8>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a4c      	ldr	r2, [pc, #304]	; (8000f3c <HAL_GPIO_Init+0x2b8>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b4a      	ldr	r3, [pc, #296]	; (8000f3c <HAL_GPIO_Init+0x2b8>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e1c:	4a48      	ldr	r2, [pc, #288]	; (8000f40 <HAL_GPIO_Init+0x2bc>)
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	089b      	lsrs	r3, r3, #2
 8000e22:	3302      	adds	r3, #2
 8000e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a40      	ldr	r2, [pc, #256]	; (8000f44 <HAL_GPIO_Init+0x2c0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d013      	beq.n	8000e70 <HAL_GPIO_Init+0x1ec>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a3f      	ldr	r2, [pc, #252]	; (8000f48 <HAL_GPIO_Init+0x2c4>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d00d      	beq.n	8000e6c <HAL_GPIO_Init+0x1e8>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a3e      	ldr	r2, [pc, #248]	; (8000f4c <HAL_GPIO_Init+0x2c8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d007      	beq.n	8000e68 <HAL_GPIO_Init+0x1e4>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a3d      	ldr	r2, [pc, #244]	; (8000f50 <HAL_GPIO_Init+0x2cc>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d101      	bne.n	8000e64 <HAL_GPIO_Init+0x1e0>
 8000e60:	2303      	movs	r3, #3
 8000e62:	e006      	b.n	8000e72 <HAL_GPIO_Init+0x1ee>
 8000e64:	2304      	movs	r3, #4
 8000e66:	e004      	b.n	8000e72 <HAL_GPIO_Init+0x1ee>
 8000e68:	2302      	movs	r3, #2
 8000e6a:	e002      	b.n	8000e72 <HAL_GPIO_Init+0x1ee>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e000      	b.n	8000e72 <HAL_GPIO_Init+0x1ee>
 8000e70:	2300      	movs	r3, #0
 8000e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e74:	f002 0203 	and.w	r2, r2, #3
 8000e78:	0092      	lsls	r2, r2, #2
 8000e7a:	4093      	lsls	r3, r2
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e82:	492f      	ldr	r1, [pc, #188]	; (8000f40 <HAL_GPIO_Init+0x2bc>)
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	3302      	adds	r3, #2
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d006      	beq.n	8000eaa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e9c:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	492c      	ldr	r1, [pc, #176]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	608b      	str	r3, [r1, #8]
 8000ea8:	e006      	b.n	8000eb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000eaa:	4b2a      	ldr	r3, [pc, #168]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	4928      	ldr	r1, [pc, #160]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d006      	beq.n	8000ed2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	4922      	ldr	r1, [pc, #136]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	60cb      	str	r3, [r1, #12]
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ed2:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	491e      	ldr	r1, [pc, #120]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000edc:	4013      	ands	r3, r2
 8000ede:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d006      	beq.n	8000efa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	4918      	ldr	r1, [pc, #96]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	604b      	str	r3, [r1, #4]
 8000ef8:	e006      	b.n	8000f08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	4914      	ldr	r1, [pc, #80]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d021      	beq.n	8000f58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	490e      	ldr	r1, [pc, #56]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	600b      	str	r3, [r1, #0]
 8000f20:	e021      	b.n	8000f66 <HAL_GPIO_Init+0x2e2>
 8000f22:	bf00      	nop
 8000f24:	10320000 	.word	0x10320000
 8000f28:	10310000 	.word	0x10310000
 8000f2c:	10220000 	.word	0x10220000
 8000f30:	10210000 	.word	0x10210000
 8000f34:	10120000 	.word	0x10120000
 8000f38:	10110000 	.word	0x10110000
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010000 	.word	0x40010000
 8000f44:	40010800 	.word	0x40010800
 8000f48:	40010c00 	.word	0x40010c00
 8000f4c:	40011000 	.word	0x40011000
 8000f50:	40011400 	.word	0x40011400
 8000f54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_GPIO_Init+0x304>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	4909      	ldr	r1, [pc, #36]	; (8000f88 <HAL_GPIO_Init+0x304>)
 8000f62:	4013      	ands	r3, r2
 8000f64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f68:	3301      	adds	r3, #1
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	fa22 f303 	lsr.w	r3, r2, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f47f ae8e 	bne.w	8000c98 <HAL_GPIO_Init+0x14>
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	372c      	adds	r7, #44	; 0x2c
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	40010400 	.word	0x40010400

08000f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e304      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 8087 	beq.w	80010ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fac:	4b92      	ldr	r3, [pc, #584]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 030c 	and.w	r3, r3, #12
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d00c      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fb8:	4b8f      	ldr	r3, [pc, #572]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 030c 	and.w	r3, r3, #12
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	d112      	bne.n	8000fea <HAL_RCC_OscConfig+0x5e>
 8000fc4:	4b8c      	ldr	r3, [pc, #560]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd0:	d10b      	bne.n	8000fea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd2:	4b89      	ldr	r3, [pc, #548]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d06c      	beq.n	80010b8 <HAL_RCC_OscConfig+0x12c>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d168      	bne.n	80010b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e2de      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff2:	d106      	bne.n	8001002 <HAL_RCC_OscConfig+0x76>
 8000ff4:	4b80      	ldr	r3, [pc, #512]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a7f      	ldr	r2, [pc, #508]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	e02e      	b.n	8001060 <HAL_RCC_OscConfig+0xd4>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10c      	bne.n	8001024 <HAL_RCC_OscConfig+0x98>
 800100a:	4b7b      	ldr	r3, [pc, #492]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a7a      	ldr	r2, [pc, #488]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	4b78      	ldr	r3, [pc, #480]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a77      	ldr	r2, [pc, #476]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800101c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	e01d      	b.n	8001060 <HAL_RCC_OscConfig+0xd4>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0xbc>
 800102e:	4b72      	ldr	r3, [pc, #456]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a71      	ldr	r2, [pc, #452]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	4b6f      	ldr	r3, [pc, #444]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a6e      	ldr	r2, [pc, #440]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e00b      	b.n	8001060 <HAL_RCC_OscConfig+0xd4>
 8001048:	4b6b      	ldr	r3, [pc, #428]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a6a      	ldr	r2, [pc, #424]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800104e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b68      	ldr	r3, [pc, #416]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a67      	ldr	r2, [pc, #412]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800105a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d013      	beq.n	8001090 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fc22 	bl	80008b0 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001070:	f7ff fc1e 	bl	80008b0 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b64      	cmp	r3, #100	; 0x64
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e292      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001082:	4b5d      	ldr	r3, [pc, #372]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0f0      	beq.n	8001070 <HAL_RCC_OscConfig+0xe4>
 800108e:	e014      	b.n	80010ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001090:	f7ff fc0e 	bl	80008b0 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001098:	f7ff fc0a 	bl	80008b0 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b64      	cmp	r3, #100	; 0x64
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e27e      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010aa:	4b53      	ldr	r3, [pc, #332]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f0      	bne.n	8001098 <HAL_RCC_OscConfig+0x10c>
 80010b6:	e000      	b.n	80010ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d063      	beq.n	800118e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010c6:	4b4c      	ldr	r3, [pc, #304]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 030c 	and.w	r3, r3, #12
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010d2:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 030c 	and.w	r3, r3, #12
 80010da:	2b08      	cmp	r3, #8
 80010dc:	d11c      	bne.n	8001118 <HAL_RCC_OscConfig+0x18c>
 80010de:	4b46      	ldr	r3, [pc, #280]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d116      	bne.n	8001118 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ea:	4b43      	ldr	r3, [pc, #268]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <HAL_RCC_OscConfig+0x176>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d001      	beq.n	8001102 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e252      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4939      	ldr	r1, [pc, #228]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001112:	4313      	orrs	r3, r2
 8001114:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001116:	e03a      	b.n	800118e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d020      	beq.n	8001162 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001120:	4b36      	ldr	r3, [pc, #216]	; (80011fc <HAL_RCC_OscConfig+0x270>)
 8001122:	2201      	movs	r2, #1
 8001124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001126:	f7ff fbc3 	bl	80008b0 <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112e:	f7ff fbbf 	bl	80008b0 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e233      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001140:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114c:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4927      	ldr	r1, [pc, #156]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800115c:	4313      	orrs	r3, r2
 800115e:	600b      	str	r3, [r1, #0]
 8001160:	e015      	b.n	800118e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <HAL_RCC_OscConfig+0x270>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fba2 	bl	80008b0 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001170:	f7ff fb9e 	bl	80008b0 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e212      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	2b00      	cmp	r3, #0
 8001198:	d03a      	beq.n	8001210 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d019      	beq.n	80011d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_RCC_OscConfig+0x274>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a8:	f7ff fb82 	bl	80008b0 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b0:	f7ff fb7e 	bl	80008b0 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e1f2      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011ce:	2001      	movs	r0, #1
 80011d0:	f000 fbd0 	bl	8001974 <RCC_Delay>
 80011d4:	e01c      	b.n	8001210 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_RCC_OscConfig+0x274>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011dc:	f7ff fb68 	bl	80008b0 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e2:	e00f      	b.n	8001204 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e4:	f7ff fb64 	bl	80008b0 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d908      	bls.n	8001204 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e1d8      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	42420000 	.word	0x42420000
 8001200:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001204:	4b9b      	ldr	r3, [pc, #620]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1e9      	bne.n	80011e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80a6 	beq.w	800136a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001222:	4b94      	ldr	r3, [pc, #592]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10d      	bne.n	800124a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b91      	ldr	r3, [pc, #580]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a90      	ldr	r2, [pc, #576]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b8e      	ldr	r3, [pc, #568]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001246:	2301      	movs	r3, #1
 8001248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124a:	4b8b      	ldr	r3, [pc, #556]	; (8001478 <HAL_RCC_OscConfig+0x4ec>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001252:	2b00      	cmp	r3, #0
 8001254:	d118      	bne.n	8001288 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001256:	4b88      	ldr	r3, [pc, #544]	; (8001478 <HAL_RCC_OscConfig+0x4ec>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a87      	ldr	r2, [pc, #540]	; (8001478 <HAL_RCC_OscConfig+0x4ec>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001262:	f7ff fb25 	bl	80008b0 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800126a:	f7ff fb21 	bl	80008b0 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b64      	cmp	r3, #100	; 0x64
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e195      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127c:	4b7e      	ldr	r3, [pc, #504]	; (8001478 <HAL_RCC_OscConfig+0x4ec>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d106      	bne.n	800129e <HAL_RCC_OscConfig+0x312>
 8001290:	4b78      	ldr	r3, [pc, #480]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4a77      	ldr	r2, [pc, #476]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6213      	str	r3, [r2, #32]
 800129c:	e02d      	b.n	80012fa <HAL_RCC_OscConfig+0x36e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x334>
 80012a6:	4b73      	ldr	r3, [pc, #460]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	4a72      	ldr	r2, [pc, #456]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	6213      	str	r3, [r2, #32]
 80012b2:	4b70      	ldr	r3, [pc, #448]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	4a6f      	ldr	r2, [pc, #444]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 80012b8:	f023 0304 	bic.w	r3, r3, #4
 80012bc:	6213      	str	r3, [r2, #32]
 80012be:	e01c      	b.n	80012fa <HAL_RCC_OscConfig+0x36e>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	2b05      	cmp	r3, #5
 80012c6:	d10c      	bne.n	80012e2 <HAL_RCC_OscConfig+0x356>
 80012c8:	4b6a      	ldr	r3, [pc, #424]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	4a69      	ldr	r2, [pc, #420]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	6213      	str	r3, [r2, #32]
 80012d4:	4b67      	ldr	r3, [pc, #412]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	4a66      	ldr	r2, [pc, #408]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6213      	str	r3, [r2, #32]
 80012e0:	e00b      	b.n	80012fa <HAL_RCC_OscConfig+0x36e>
 80012e2:	4b64      	ldr	r3, [pc, #400]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4a63      	ldr	r2, [pc, #396]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 80012e8:	f023 0301 	bic.w	r3, r3, #1
 80012ec:	6213      	str	r3, [r2, #32]
 80012ee:	4b61      	ldr	r3, [pc, #388]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	4a60      	ldr	r2, [pc, #384]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 80012f4:	f023 0304 	bic.w	r3, r3, #4
 80012f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d015      	beq.n	800132e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001302:	f7ff fad5 	bl	80008b0 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001308:	e00a      	b.n	8001320 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130a:	f7ff fad1 	bl	80008b0 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	f241 3288 	movw	r2, #5000	; 0x1388
 8001318:	4293      	cmp	r3, r2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e143      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001320:	4b54      	ldr	r3, [pc, #336]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0ee      	beq.n	800130a <HAL_RCC_OscConfig+0x37e>
 800132c:	e014      	b.n	8001358 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132e:	f7ff fabf 	bl	80008b0 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001334:	e00a      	b.n	800134c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001336:	f7ff fabb 	bl	80008b0 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	f241 3288 	movw	r2, #5000	; 0x1388
 8001344:	4293      	cmp	r3, r2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e12d      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134c:	4b49      	ldr	r3, [pc, #292]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1ee      	bne.n	8001336 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d105      	bne.n	800136a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800135e:	4b45      	ldr	r3, [pc, #276]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a44      	ldr	r2, [pc, #272]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 8001364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001368:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 808c 	beq.w	800148c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001374:	4b3f      	ldr	r3, [pc, #252]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001380:	d10e      	bne.n	80013a0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001382:	4b3c      	ldr	r3, [pc, #240]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800138a:	2b08      	cmp	r3, #8
 800138c:	d108      	bne.n	80013a0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800138e:	4b39      	ldr	r3, [pc, #228]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 8001390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139a:	d101      	bne.n	80013a0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e103      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d14e      	bne.n	8001446 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80013a8:	4b32      	ldr	r3, [pc, #200]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d009      	beq.n	80013c8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80013b4:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 80013b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d001      	beq.n	80013c8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e0ef      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80013c8:	4b2c      	ldr	r3, [pc, #176]	; (800147c <HAL_RCC_OscConfig+0x4f0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fa6f 	bl	80008b0 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80013d6:	f7ff fa6b 	bl	80008b0 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b64      	cmp	r3, #100	; 0x64
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e0df      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f0      	bne.n	80013d6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001400:	491c      	ldr	r1, [pc, #112]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 8001402:	4313      	orrs	r3, r2
 8001404:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 8001408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4918      	ldr	r1, [pc, #96]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 8001414:	4313      	orrs	r3, r2
 8001416:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_RCC_OscConfig+0x4f0>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141e:	f7ff fa47 	bl	80008b0 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001426:	f7ff fa43 	bl	80008b0 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b64      	cmp	r3, #100	; 0x64
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e0b7      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x49a>
 8001444:	e022      	b.n	800148c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 8001448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <HAL_RCC_OscConfig+0x4e8>)
 800144c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001450:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_RCC_OscConfig+0x4f0>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fa2a 	bl	80008b0 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800145e:	e00f      	b.n	8001480 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001460:	f7ff fa26 	bl	80008b0 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d908      	bls.n	8001480 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e09a      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000
 8001478:	40007000 	.word	0x40007000
 800147c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001480:	4b4b      	ldr	r3, [pc, #300]	; (80015b0 <HAL_RCC_OscConfig+0x624>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1e9      	bne.n	8001460 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 8088 	beq.w	80015a6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001496:	4b46      	ldr	r3, [pc, #280]	; (80015b0 <HAL_RCC_OscConfig+0x624>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d068      	beq.n	8001574 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d14d      	bne.n	8001546 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014aa:	4b42      	ldr	r3, [pc, #264]	; (80015b4 <HAL_RCC_OscConfig+0x628>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff f9fe 	bl	80008b0 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff f9fa 	bl	80008b0 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e06e      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ca:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <HAL_RCC_OscConfig+0x624>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014de:	d10f      	bne.n	8001500 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <HAL_RCC_OscConfig+0x624>)
 80014e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	4931      	ldr	r1, [pc, #196]	; (80015b0 <HAL_RCC_OscConfig+0x624>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ee:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <HAL_RCC_OscConfig+0x624>)
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	f023 020f 	bic.w	r2, r3, #15
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	492d      	ldr	r1, [pc, #180]	; (80015b0 <HAL_RCC_OscConfig+0x624>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <HAL_RCC_OscConfig+0x624>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	430b      	orrs	r3, r1
 8001512:	4927      	ldr	r1, [pc, #156]	; (80015b0 <HAL_RCC_OscConfig+0x624>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001518:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_RCC_OscConfig+0x628>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff f9c7 	bl	80008b0 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff f9c3 	bl	80008b0 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e037      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_RCC_OscConfig+0x624>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x59a>
 8001544:	e02f      	b.n	80015a6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_RCC_OscConfig+0x628>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff f9b0 	bl	80008b0 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001554:	f7ff f9ac 	bl	80008b0 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e020      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_RCC_OscConfig+0x624>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x5c8>
 8001572:	e018      	b.n	80015a6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e013      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_RCC_OscConfig+0x624>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	429a      	cmp	r2, r3
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d001      	beq.n	80015a6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000
 80015b4:	42420060 	.word	0x42420060

080015b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0d0      	b.n	800176e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015cc:	4b6a      	ldr	r3, [pc, #424]	; (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d910      	bls.n	80015fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015da:	4b67      	ldr	r3, [pc, #412]	; (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 0207 	bic.w	r2, r3, #7
 80015e2:	4965      	ldr	r1, [pc, #404]	; (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ea:	4b63      	ldr	r3, [pc, #396]	; (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0b8      	b.n	800176e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d020      	beq.n	800164a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001614:	4b59      	ldr	r3, [pc, #356]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	4a58      	ldr	r2, [pc, #352]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800161e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800162c:	4b53      	ldr	r3, [pc, #332]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	4a52      	ldr	r2, [pc, #328]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001636:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001638:	4b50      	ldr	r3, [pc, #320]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	494d      	ldr	r1, [pc, #308]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	4313      	orrs	r3, r2
 8001648:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d040      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	4b47      	ldr	r3, [pc, #284]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d115      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e07f      	b.n	800176e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001676:	4b41      	ldr	r3, [pc, #260]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e073      	b.n	800176e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001686:	4b3d      	ldr	r3, [pc, #244]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e06b      	b.n	800176e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001696:	4b39      	ldr	r3, [pc, #228]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f023 0203 	bic.w	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4936      	ldr	r1, [pc, #216]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a8:	f7ff f902 	bl	80008b0 <HAL_GetTick>
 80016ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b0:	f7ff f8fe 	bl	80008b0 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e053      	b.n	800176e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c6:	4b2d      	ldr	r3, [pc, #180]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 020c 	and.w	r2, r3, #12
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d1eb      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d8:	4b27      	ldr	r3, [pc, #156]	; (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d210      	bcs.n	8001708 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b24      	ldr	r3, [pc, #144]	; (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 0207 	bic.w	r2, r3, #7
 80016ee:	4922      	ldr	r1, [pc, #136]	; (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e032      	b.n	800176e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	4916      	ldr	r1, [pc, #88]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	4313      	orrs	r3, r2
 8001724:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	490e      	ldr	r1, [pc, #56]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001746:	f000 f821 	bl	800178c <HAL_RCC_GetSysClockFreq>
 800174a:	4602      	mov	r2, r0
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	490a      	ldr	r1, [pc, #40]	; (8001780 <HAL_RCC_ClockConfig+0x1c8>)
 8001758:	5ccb      	ldrb	r3, [r1, r3]
 800175a:	fa22 f303 	lsr.w	r3, r2, r3
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <HAL_RCC_ClockConfig+0x1cc>)
 8001760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_RCC_ClockConfig+0x1d0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff f860 	bl	800082c <HAL_InitTick>

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40022000 	.word	0x40022000
 800177c:	40021000 	.word	0x40021000
 8001780:	08001a20 	.word	0x08001a20
 8001784:	20000000 	.word	0x20000000
 8001788:	20000004 	.word	0x20000004

0800178c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800178c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001790:	b092      	sub	sp, #72	; 0x48
 8001792:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001798:	2300      	movs	r3, #0
 800179a:	63bb      	str	r3, [r7, #56]	; 0x38
 800179c:	2300      	movs	r3, #0
 800179e:	647b      	str	r3, [r7, #68]	; 0x44
 80017a0:	2300      	movs	r3, #0
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017b0:	4b6b      	ldr	r3, [pc, #428]	; (8001960 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d002      	beq.n	80017c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d003      	beq.n	80017cc <HAL_RCC_GetSysClockFreq+0x40>
 80017c4:	e0c3      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017c6:	4b67      	ldr	r3, [pc, #412]	; (8001964 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80017c8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80017ca:	e0c3      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017ce:	0c9b      	lsrs	r3, r3, #18
 80017d0:	f003 020f 	and.w	r2, r3, #15
 80017d4:	4b64      	ldr	r3, [pc, #400]	; (8001968 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80017d6:	5c9b      	ldrb	r3, [r3, r2]
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80ac 	beq.w	800193e <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80017e6:	4b5e      	ldr	r3, [pc, #376]	; (8001960 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	f003 020f 	and.w	r2, r3, #15
 80017ee:	4b5f      	ldr	r3, [pc, #380]	; (800196c <HAL_RCC_GetSysClockFreq+0x1e0>)
 80017f0:	5c9b      	ldrb	r3, [r3, r2]
 80017f2:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80017f4:	4b5a      	ldr	r3, [pc, #360]	; (8001960 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 808c 	beq.w	800191a <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001802:	4b57      	ldr	r3, [pc, #348]	; (8001960 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	3301      	adds	r3, #1
 800180e:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001810:	4b53      	ldr	r3, [pc, #332]	; (8001960 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3302      	adds	r3, #2
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800181e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001820:	2200      	movs	r2, #0
 8001822:	623b      	str	r3, [r7, #32]
 8001824:	627a      	str	r2, [r7, #36]	; 0x24
 8001826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001828:	2200      	movs	r2, #0
 800182a:	4618      	mov	r0, r3
 800182c:	4611      	mov	r1, r2
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	fb00 f203 	mul.w	r2, r0, r3
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	fb03 f301 	mul.w	r3, r3, r1
 800183a:	4413      	add	r3, r2
 800183c:	6a3a      	ldr	r2, [r7, #32]
 800183e:	fba2 4500 	umull	r4, r5, r2, r0
 8001842:	442b      	add	r3, r5
 8001844:	461d      	mov	r5, r3
 8001846:	4622      	mov	r2, r4
 8001848:	462b      	mov	r3, r5
 800184a:	f04f 0000 	mov.w	r0, #0
 800184e:	f04f 0100 	mov.w	r1, #0
 8001852:	0159      	lsls	r1, r3, #5
 8001854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001858:	0150      	lsls	r0, r2, #5
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	ebb2 0a04 	subs.w	sl, r2, r4
 8001862:	eb63 0b05 	sbc.w	fp, r3, r5
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001872:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001876:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800187a:	ebb2 080a 	subs.w	r8, r2, sl
 800187e:	eb63 090b 	sbc.w	r9, r3, fp
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800188e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001892:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001896:	4690      	mov	r8, r2
 8001898:	4699      	mov	r9, r3
 800189a:	eb18 0304 	adds.w	r3, r8, r4
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	eb49 0305 	adc.w	r3, r9, r5
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018b2:	4629      	mov	r1, r5
 80018b4:	024b      	lsls	r3, r1, #9
 80018b6:	4620      	mov	r0, r4
 80018b8:	4629      	mov	r1, r5
 80018ba:	4604      	mov	r4, r0
 80018bc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80018c0:	4601      	mov	r1, r0
 80018c2:	024a      	lsls	r2, r1, #9
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ca:	2200      	movs	r2, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	617a      	str	r2, [r7, #20]
 80018d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d2:	2200      	movs	r2, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	60fa      	str	r2, [r7, #12]
 80018d8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80018dc:	4622      	mov	r2, r4
 80018de:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018e2:	4645      	mov	r5, r8
 80018e4:	fb05 f202 	mul.w	r2, r5, r2
 80018e8:	46cc      	mov	ip, r9
 80018ea:	4625      	mov	r5, r4
 80018ec:	461c      	mov	r4, r3
 80018ee:	4623      	mov	r3, r4
 80018f0:	fb03 f30c 	mul.w	r3, r3, ip
 80018f4:	4413      	add	r3, r2
 80018f6:	4622      	mov	r2, r4
 80018f8:	4644      	mov	r4, r8
 80018fa:	fba2 2404 	umull	r2, r4, r2, r4
 80018fe:	61fc      	str	r4, [r7, #28]
 8001900:	61ba      	str	r2, [r7, #24]
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	4413      	add	r3, r2
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800190c:	f7fe fc6a 	bl	80001e4 <__aeabi_uldivmod>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4613      	mov	r3, r2
 8001916:	647b      	str	r3, [r7, #68]	; 0x44
 8001918:	e007      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800191a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191c:	4a11      	ldr	r2, [pc, #68]	; (8001964 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800191e:	fb03 f202 	mul.w	r2, r3, r2
 8001922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001924:	fbb2 f3f3 	udiv	r3, r2, r3
 8001928:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800192c:	7b5b      	ldrb	r3, [r3, #13]
 800192e:	461a      	mov	r2, r3
 8001930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001932:	4293      	cmp	r3, r2
 8001934:	d108      	bne.n	8001948 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8001936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001938:	085b      	lsrs	r3, r3, #1
 800193a:	647b      	str	r3, [r7, #68]	; 0x44
 800193c:	e004      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800193e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001940:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001942:	fb02 f303 	mul.w	r3, r2, r3
 8001946:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8001948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800194a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800194c:	e002      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001950:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001952:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001956:	4618      	mov	r0, r3
 8001958:	3748      	adds	r7, #72	; 0x48
 800195a:	46bd      	mov	sp, r7
 800195c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001960:	40021000 	.word	0x40021000
 8001964:	007a1200 	.word	0x007a1200
 8001968:	08001a30 	.word	0x08001a30
 800196c:	08001a40 	.word	0x08001a40
 8001970:	003d0900 	.word	0x003d0900

08001974 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <RCC_Delay+0x34>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <RCC_Delay+0x38>)
 8001982:	fba2 2303 	umull	r2, r3, r2, r3
 8001986:	0a5b      	lsrs	r3, r3, #9
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	fb02 f303 	mul.w	r3, r2, r3
 800198e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001990:	bf00      	nop
  }
  while (Delay --);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1e5a      	subs	r2, r3, #1
 8001996:	60fa      	str	r2, [r7, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f9      	bne.n	8001990 <RCC_Delay+0x1c>
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	20000000 	.word	0x20000000
 80019ac:	10624dd3 	.word	0x10624dd3

080019b0 <__libc_init_array>:
 80019b0:	b570      	push	{r4, r5, r6, lr}
 80019b2:	2600      	movs	r6, #0
 80019b4:	4d0c      	ldr	r5, [pc, #48]	; (80019e8 <__libc_init_array+0x38>)
 80019b6:	4c0d      	ldr	r4, [pc, #52]	; (80019ec <__libc_init_array+0x3c>)
 80019b8:	1b64      	subs	r4, r4, r5
 80019ba:	10a4      	asrs	r4, r4, #2
 80019bc:	42a6      	cmp	r6, r4
 80019be:	d109      	bne.n	80019d4 <__libc_init_array+0x24>
 80019c0:	f000 f822 	bl	8001a08 <_init>
 80019c4:	2600      	movs	r6, #0
 80019c6:	4d0a      	ldr	r5, [pc, #40]	; (80019f0 <__libc_init_array+0x40>)
 80019c8:	4c0a      	ldr	r4, [pc, #40]	; (80019f4 <__libc_init_array+0x44>)
 80019ca:	1b64      	subs	r4, r4, r5
 80019cc:	10a4      	asrs	r4, r4, #2
 80019ce:	42a6      	cmp	r6, r4
 80019d0:	d105      	bne.n	80019de <__libc_init_array+0x2e>
 80019d2:	bd70      	pop	{r4, r5, r6, pc}
 80019d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80019d8:	4798      	blx	r3
 80019da:	3601      	adds	r6, #1
 80019dc:	e7ee      	b.n	80019bc <__libc_init_array+0xc>
 80019de:	f855 3b04 	ldr.w	r3, [r5], #4
 80019e2:	4798      	blx	r3
 80019e4:	3601      	adds	r6, #1
 80019e6:	e7f2      	b.n	80019ce <__libc_init_array+0x1e>
	...

080019f8 <memset>:
 80019f8:	4603      	mov	r3, r0
 80019fa:	4402      	add	r2, r0
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d100      	bne.n	8001a02 <memset+0xa>
 8001a00:	4770      	bx	lr
 8001a02:	f803 1b01 	strb.w	r1, [r3], #1
 8001a06:	e7f9      	b.n	80019fc <memset+0x4>

08001a08 <_init>:
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0a:	bf00      	nop
 8001a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a0e:	bc08      	pop	{r3}
 8001a10:	469e      	mov	lr, r3
 8001a12:	4770      	bx	lr

08001a14 <_fini>:
 8001a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a16:	bf00      	nop
 8001a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a1a:	bc08      	pop	{r3}
 8001a1c:	469e      	mov	lr, r3
 8001a1e:	4770      	bx	lr
