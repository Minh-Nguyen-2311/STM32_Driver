
SDIO_I2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a548  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800a6d8  0800a6d8  0001a6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.exidx    00000008  0800abac  0800abac  0001abac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001e0  20000000  0800abb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
  6 .bss          0000215c  200001e0  200001e0  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000233c  2000233c  000201e0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e31a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002eca  00000000  00000000  0002e52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000c78  00000000  00000000  000313f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ad0  00000000  00000000  00032070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000047d2  00000000  00000000  00032b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00011dd7  00000000  00000000  00037312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000ca11f  00000000  00000000  000490e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00113208  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000044cc  00000000  00000000  00113258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9aa 	b.w	8000fb4 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff0b 	bl	8000a9c <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fc81 	bl	80005b8 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc02 	bl	80004c4 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fc78 	bl	80005b8 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff faba 	bl	8000248 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	4604      	mov	r4, r0
 8000cec:	468e      	mov	lr, r1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d14d      	bne.n	8000d8e <__udivmoddi4+0xaa>
 8000cf2:	428a      	cmp	r2, r1
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	d969      	bls.n	8000dcc <__udivmoddi4+0xe8>
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	b152      	cbz	r2, 8000d14 <__udivmoddi4+0x30>
 8000cfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000d02:	f1c2 0120 	rsb	r1, r2, #32
 8000d06:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d12:	4094      	lsls	r4, r2
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	0c21      	lsrs	r1, r4, #16
 8000d1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d1e:	fa1f f78c 	uxth.w	r7, ip
 8000d22:	fb08 e316 	mls	r3, r8, r6, lr
 8000d26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2a:	fb06 f107 	mul.w	r1, r6, r7
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x64>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3a:	f080 811f 	bcs.w	8000f7c <__udivmoddi4+0x298>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 811c 	bls.w	8000f7c <__udivmoddi4+0x298>
 8000d44:	3e02      	subs	r6, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d50:	fb08 3310 	mls	r3, r8, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 f707 	mul.w	r7, r0, r7
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x92>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d68:	f080 810a 	bcs.w	8000f80 <__udivmoddi4+0x29c>
 8000d6c:	42a7      	cmp	r7, r4
 8000d6e:	f240 8107 	bls.w	8000f80 <__udivmoddi4+0x29c>
 8000d72:	4464      	add	r4, ip
 8000d74:	3802      	subs	r0, #2
 8000d76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7a:	1be4      	subs	r4, r4, r7
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	b11d      	cbz	r5, 8000d88 <__udivmoddi4+0xa4>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c5 4300 	strd	r4, r3, [r5]
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xc2>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80ef 	beq.w	8000f76 <__udivmoddi4+0x292>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x160>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd4>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80f9 	bhi.w	8000faa <__udivmoddi4+0x2c6>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	469e      	mov	lr, r3
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa4>
 8000dc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa4>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xec>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 8092 	bne.w	8000efe <__udivmoddi4+0x21a>
 8000dda:	eba1 010c 	sub.w	r1, r1, ip
 8000dde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de2:	fa1f fe8c 	uxth.w	lr, ip
 8000de6:	2601      	movs	r6, #1
 8000de8:	0c20      	lsrs	r0, r4, #16
 8000dea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dee:	fb07 1113 	mls	r1, r7, r3, r1
 8000df2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df6:	fb0e f003 	mul.w	r0, lr, r3
 8000dfa:	4288      	cmp	r0, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x12c>
 8000dfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000e02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x12a>
 8000e08:	4288      	cmp	r0, r1
 8000e0a:	f200 80cb 	bhi.w	8000fa4 <__udivmoddi4+0x2c0>
 8000e0e:	4643      	mov	r3, r8
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1110 	mls	r1, r7, r0, r1
 8000e1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e20:	fb0e fe00 	mul.w	lr, lr, r0
 8000e24:	45a6      	cmp	lr, r4
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x156>
 8000e28:	eb1c 0404 	adds.w	r4, ip, r4
 8000e2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e30:	d202      	bcs.n	8000e38 <__udivmoddi4+0x154>
 8000e32:	45a6      	cmp	lr, r4
 8000e34:	f200 80bb 	bhi.w	8000fae <__udivmoddi4+0x2ca>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e42:	e79c      	b.n	8000d7e <__udivmoddi4+0x9a>
 8000e44:	f1c6 0720 	rsb	r7, r6, #32
 8000e48:	40b3      	lsls	r3, r6
 8000e4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e52:	fa20 f407 	lsr.w	r4, r0, r7
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	431c      	orrs	r4, r3
 8000e5c:	40f9      	lsrs	r1, r7
 8000e5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e62:	fa00 f306 	lsl.w	r3, r0, r6
 8000e66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6a:	0c20      	lsrs	r0, r4, #16
 8000e6c:	fa1f fe8c 	uxth.w	lr, ip
 8000e70:	fb09 1118 	mls	r1, r9, r8, r1
 8000e74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e78:	fb08 f00e 	mul.w	r0, r8, lr
 8000e7c:	4288      	cmp	r0, r1
 8000e7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e82:	d90b      	bls.n	8000e9c <__udivmoddi4+0x1b8>
 8000e84:	eb1c 0101 	adds.w	r1, ip, r1
 8000e88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e8c:	f080 8088 	bcs.w	8000fa0 <__udivmoddi4+0x2bc>
 8000e90:	4288      	cmp	r0, r1
 8000e92:	f240 8085 	bls.w	8000fa0 <__udivmoddi4+0x2bc>
 8000e96:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	1a09      	subs	r1, r1, r0
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ea8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb0:	458e      	cmp	lr, r1
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1e2>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ebc:	d26c      	bcs.n	8000f98 <__udivmoddi4+0x2b4>
 8000ebe:	458e      	cmp	lr, r1
 8000ec0:	d96a      	bls.n	8000f98 <__udivmoddi4+0x2b4>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	4461      	add	r1, ip
 8000ec6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eca:	fba0 9402 	umull	r9, r4, r0, r2
 8000ece:	eba1 010e 	sub.w	r1, r1, lr
 8000ed2:	42a1      	cmp	r1, r4
 8000ed4:	46c8      	mov	r8, r9
 8000ed6:	46a6      	mov	lr, r4
 8000ed8:	d356      	bcc.n	8000f88 <__udivmoddi4+0x2a4>
 8000eda:	d053      	beq.n	8000f84 <__udivmoddi4+0x2a0>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x212>
 8000ede:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ee6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eea:	fa22 f306 	lsr.w	r3, r2, r6
 8000eee:	40f1      	lsrs	r1, r6
 8000ef0:	431f      	orrs	r7, r3
 8000ef2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ef6:	2600      	movs	r6, #0
 8000ef8:	4631      	mov	r1, r6
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efe:	f1c2 0320 	rsb	r3, r2, #32
 8000f02:	40d8      	lsrs	r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0c:	4091      	lsls	r1, r2
 8000f0e:	4301      	orrs	r1, r0
 8000f10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f14:	fa1f fe8c 	uxth.w	lr, ip
 8000f18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f20:	0c0b      	lsrs	r3, r1, #16
 8000f22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f26:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2a:	429e      	cmp	r6, r3
 8000f2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x260>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3a:	d22f      	bcs.n	8000f9c <__udivmoddi4+0x2b8>
 8000f3c:	429e      	cmp	r6, r3
 8000f3e:	d92d      	bls.n	8000f9c <__udivmoddi4+0x2b8>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1b9b      	subs	r3, r3, r6
 8000f46:	b289      	uxth	r1, r1
 8000f48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f54:	fb06 f30e 	mul.w	r3, r6, lr
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x28a>
 8000f5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f64:	d216      	bcs.n	8000f94 <__udivmoddi4+0x2b0>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d914      	bls.n	8000f94 <__udivmoddi4+0x2b0>
 8000f6a:	3e02      	subs	r6, #2
 8000f6c:	4461      	add	r1, ip
 8000f6e:	1ac9      	subs	r1, r1, r3
 8000f70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f74:	e738      	b.n	8000de8 <__udivmoddi4+0x104>
 8000f76:	462e      	mov	r6, r5
 8000f78:	4628      	mov	r0, r5
 8000f7a:	e705      	b.n	8000d88 <__udivmoddi4+0xa4>
 8000f7c:	4606      	mov	r6, r0
 8000f7e:	e6e3      	b.n	8000d48 <__udivmoddi4+0x64>
 8000f80:	4618      	mov	r0, r3
 8000f82:	e6f8      	b.n	8000d76 <__udivmoddi4+0x92>
 8000f84:	454b      	cmp	r3, r9
 8000f86:	d2a9      	bcs.n	8000edc <__udivmoddi4+0x1f8>
 8000f88:	ebb9 0802 	subs.w	r8, r9, r2
 8000f8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f90:	3801      	subs	r0, #1
 8000f92:	e7a3      	b.n	8000edc <__udivmoddi4+0x1f8>
 8000f94:	4646      	mov	r6, r8
 8000f96:	e7ea      	b.n	8000f6e <__udivmoddi4+0x28a>
 8000f98:	4620      	mov	r0, r4
 8000f9a:	e794      	b.n	8000ec6 <__udivmoddi4+0x1e2>
 8000f9c:	4640      	mov	r0, r8
 8000f9e:	e7d1      	b.n	8000f44 <__udivmoddi4+0x260>
 8000fa0:	46d0      	mov	r8, sl
 8000fa2:	e77b      	b.n	8000e9c <__udivmoddi4+0x1b8>
 8000fa4:	3b02      	subs	r3, #2
 8000fa6:	4461      	add	r1, ip
 8000fa8:	e732      	b.n	8000e10 <__udivmoddi4+0x12c>
 8000faa:	4630      	mov	r0, r6
 8000fac:	e709      	b.n	8000dc2 <__udivmoddi4+0xde>
 8000fae:	4464      	add	r4, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e742      	b.n	8000e3a <__udivmoddi4+0x156>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <HAL_I2S_TxHalfCpltCallback>:
	}
	printf("Mount successfully\r\n");
}

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	buffer_offset = BUFFER_OFFSET_HALF;
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200021e0 	.word	0x200021e0

08000fd8 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	buffer_offset = BUFFER_OFFSET_FULL;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_I2S_TxCpltCallback+0x24>)
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	701a      	strb	r2, [r3, #0]
	HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*)&AudioBuff[0], 2048); /*Change back to 1st buffer*/
 8000fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fea:	4905      	ldr	r1, [pc, #20]	; (8001000 <HAL_I2S_TxCpltCallback+0x28>)
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <HAL_I2S_TxCpltCallback+0x2c>)
 8000fee:	f001 fc0f 	bl	8002810 <HAL_I2S_Transmit_DMA>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200021e0 	.word	0x200021e0
 8001000:	200001e0 	.word	0x200001e0
 8001004:	200021e4 	.word	0x200021e4

08001008 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_DMA_Init+0x3c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <MX_DMA_Init+0x3c>)
 8001018:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_DMA_Init+0x3c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2010      	movs	r0, #16
 8001030:	f000 fd53 	bl	8001ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001034:	2010      	movs	r0, #16
 8001036:	f000 fd6c 	bl	8001b12 <HAL_NVIC_EnableIRQ>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <MX_GPIO_Init+0xc4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a29      	ldr	r2, [pc, #164]	; (800110c <MX_GPIO_Init+0xc4>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b27      	ldr	r3, [pc, #156]	; (800110c <MX_GPIO_Init+0xc4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <MX_GPIO_Init+0xc4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a22      	ldr	r2, [pc, #136]	; (800110c <MX_GPIO_Init+0xc4>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <MX_GPIO_Init+0xc4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <MX_GPIO_Init+0xc4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a1b      	ldr	r2, [pc, #108]	; (800110c <MX_GPIO_Init+0xc4>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <MX_GPIO_Init+0xc4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_GPIO_Init+0xc4>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a14      	ldr	r2, [pc, #80]	; (800110c <MX_GPIO_Init+0xc4>)
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_GPIO_Init+0xc4>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_GPIO_Init+0xc4>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a0d      	ldr	r2, [pc, #52]	; (800110c <MX_GPIO_Init+0xc4>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <MX_GPIO_Init+0xc4>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 80010ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	4804      	ldr	r0, [pc, #16]	; (8001110 <MX_GPIO_Init+0xc8>)
 8001100:	f001 f892 	bl	8002228 <HAL_GPIO_Init>

}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40020800 	.word	0x40020800

08001114 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_I2S3_Init+0x54>)
 800111a:	4a14      	ldr	r2, [pc, #80]	; (800116c <MX_I2S3_Init+0x58>)
 800111c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_I2S3_Init+0x54>)
 8001120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001124:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_I2S3_Init+0x54>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_I2S3_Init+0x54>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <MX_I2S3_Init+0x54>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_I2S3_Init+0x54>)
 800113a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800113e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_I2S3_Init+0x54>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_I2S3_Init+0x54>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_I2S3_Init+0x54>)
 800114e:	2201      	movs	r2, #1
 8001150:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_I2S3_Init+0x54>)
 8001154:	f001 fa1c 	bl	8002590 <HAL_I2S_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800115e:	f000 f94f 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200021e4 	.word	0x200021e4
 800116c:	40003c00 	.word	0x40003c00

08001170 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08e      	sub	sp, #56	; 0x38
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a55      	ldr	r2, [pc, #340]	; (80012f0 <HAL_I2S_MspInit+0x180>)
 800119c:	4293      	cmp	r3, r2
 800119e:	f040 80a3 	bne.w	80012e8 <HAL_I2S_MspInit+0x178>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80011a2:	2301      	movs	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80011a6:	2332      	movs	r3, #50	; 0x32
 80011a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 fb9e 	bl	80038f4 <HAL_RCCEx_PeriphCLKConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80011be:	f000 f91f 	bl	8001400 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <HAL_I2S_MspInit+0x184>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a4a      	ldr	r2, [pc, #296]	; (80012f4 <HAL_I2S_MspInit+0x184>)
 80011cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b48      	ldr	r3, [pc, #288]	; (80012f4 <HAL_I2S_MspInit+0x184>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b44      	ldr	r3, [pc, #272]	; (80012f4 <HAL_I2S_MspInit+0x184>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a43      	ldr	r2, [pc, #268]	; (80012f4 <HAL_I2S_MspInit+0x184>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <HAL_I2S_MspInit+0x184>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <HAL_I2S_MspInit+0x184>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a3c      	ldr	r2, [pc, #240]	; (80012f4 <HAL_I2S_MspInit+0x184>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <HAL_I2S_MspInit+0x184>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PB3     ------> I2S3_CK
    PB4     ------> I2S3_ext_SD
    PB5     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001216:	2310      	movs	r3, #16
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001226:	2306      	movs	r3, #6
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	4619      	mov	r1, r3
 8001230:	4831      	ldr	r0, [pc, #196]	; (80012f8 <HAL_I2S_MspInit+0x188>)
 8001232:	f000 fff9 	bl	8002228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001236:	2328      	movs	r3, #40	; 0x28
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001246:	2306      	movs	r3, #6
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	4619      	mov	r1, r3
 8001250:	482a      	ldr	r0, [pc, #168]	; (80012fc <HAL_I2S_MspInit+0x18c>)
 8001252:	f000 ffe9 	bl	8002228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001256:	2310      	movs	r3, #16
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_I2S3ext;
 8001266:	2307      	movs	r3, #7
 8001268:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	4619      	mov	r1, r3
 8001270:	4822      	ldr	r0, [pc, #136]	; (80012fc <HAL_I2S_MspInit+0x18c>)
 8001272:	f000 ffd9 	bl	8002228 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <HAL_I2S_MspInit+0x190>)
 8001278:	4a22      	ldr	r2, [pc, #136]	; (8001304 <HAL_I2S_MspInit+0x194>)
 800127a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800127c:	4b20      	ldr	r3, [pc, #128]	; (8001300 <HAL_I2S_MspInit+0x190>)
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <HAL_I2S_MspInit+0x190>)
 8001284:	2240      	movs	r2, #64	; 0x40
 8001286:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_I2S_MspInit+0x190>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <HAL_I2S_MspInit+0x190>)
 8001290:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001294:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_I2S_MspInit+0x190>)
 8001298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800129c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_I2S_MspInit+0x190>)
 80012a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <HAL_I2S_MspInit+0x190>)
 80012a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ac:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_I2S_MspInit+0x190>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_I2S_MspInit+0x190>)
 80012b6:	2204      	movs	r2, #4
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_I2S_MspInit+0x190>)
 80012bc:	2203      	movs	r2, #3
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <HAL_I2S_MspInit+0x190>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_I2S_MspInit+0x190>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <HAL_I2S_MspInit+0x190>)
 80012ce:	f000 fc3b 	bl	8001b48 <HAL_DMA_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_I2S_MspInit+0x16c>
    {
      Error_Handler();
 80012d8:	f000 f892 	bl	8001400 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a08      	ldr	r2, [pc, #32]	; (8001300 <HAL_I2S_MspInit+0x190>)
 80012e0:	639a      	str	r2, [r3, #56]	; 0x38
 80012e2:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_I2S_MspInit+0x190>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80012e8:	bf00      	nop
 80012ea:	3738      	adds	r7, #56	; 0x38
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40003c00 	.word	0x40003c00
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020000 	.word	0x40020000
 80012fc:	40020400 	.word	0x40020400
 8001300:	2000222c 	.word	0x2000222c
 8001304:	40026088 	.word	0x40026088

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130c:	f000 fa74 	bl	80017f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001310:	f000 f80c 	bl	800132c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001314:	f7ff fe98 	bl	8001048 <MX_GPIO_Init>
  MX_DMA_Init();
 8001318:	f7ff fe76 	bl	8001008 <MX_DMA_Init>
  MX_I2S3_Init();
 800131c:	f7ff fefa 	bl	8001114 <MX_I2S3_Init>
  MX_SDIO_SD_Init();
 8001320:	f000 f874 	bl	800140c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001324:	f004 fb36 	bl	8005994 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001328:	e7fe      	b.n	8001328 <main+0x20>
	...

0800132c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b094      	sub	sp, #80	; 0x50
 8001330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001332:	f107 0320 	add.w	r3, r7, #32
 8001336:	2230      	movs	r2, #48	; 0x30
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f004 fd7e 	bl	8005e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <SystemClock_Config+0xcc>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	4a27      	ldr	r2, [pc, #156]	; (80013f8 <SystemClock_Config+0xcc>)
 800135a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135e:	6413      	str	r3, [r2, #64]	; 0x40
 8001360:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <SystemClock_Config+0xcc>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800136c:	2300      	movs	r3, #0
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	4b22      	ldr	r3, [pc, #136]	; (80013fc <SystemClock_Config+0xd0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a21      	ldr	r2, [pc, #132]	; (80013fc <SystemClock_Config+0xd0>)
 8001376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <SystemClock_Config+0xd0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001388:	2302      	movs	r3, #2
 800138a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800138c:	2301      	movs	r3, #1
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001390:	2310      	movs	r3, #16
 8001392:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001394:	2302      	movs	r3, #2
 8001396:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001398:	2300      	movs	r3, #0
 800139a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800139c:	2308      	movs	r3, #8
 800139e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013a0:	23a8      	movs	r3, #168	; 0xa8
 80013a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a4:	2302      	movs	r3, #2
 80013a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013a8:	2307      	movs	r3, #7
 80013aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ac:	f107 0320 	add.w	r3, r7, #32
 80013b0:	4618      	mov	r0, r3
 80013b2:	f001 fe7b 	bl	80030ac <HAL_RCC_OscConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013bc:	f000 f820 	bl	8001400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c0:	230f      	movs	r3, #15
 80013c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c4:	2302      	movs	r3, #2
 80013c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2105      	movs	r1, #5
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 f8dc 	bl	800359c <HAL_RCC_ClockConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013ea:	f000 f809 	bl	8001400 <Error_Handler>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3750      	adds	r7, #80	; 0x50
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40007000 	.word	0x40007000

08001400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
}
 8001406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001408:	e7fe      	b.n	8001408 <Error_Handler+0x8>
	...

0800140c <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_SDIO_SD_Init+0x58>)
 8001412:	4a15      	ldr	r2, [pc, #84]	; (8001468 <MX_SDIO_SD_Init+0x5c>)
 8001414:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <MX_SDIO_SD_Init+0x58>)
 8001418:	2200      	movs	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_SDIO_SD_Init+0x58>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <MX_SDIO_SD_Init+0x58>)
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_SDIO_SD_Init+0x58>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <MX_SDIO_SD_Init+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_SDIO_SD_Init+0x58>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  if(HAL_SD_Init(&hsd) != HAL_OK)
 800143a:	480a      	ldr	r0, [pc, #40]	; (8001464 <MX_SDIO_SD_Init+0x58>)
 800143c:	f002 fb9c 	bl	8003b78 <HAL_SD_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_SDIO_SD_Init+0x3e>
  {
	  Error_Handler();
 8001446:	f7ff ffdb 	bl	8001400 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800144a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_SDIO_SD_Init+0x58>)
 8001450:	f003 f97e 	bl	8004750 <HAL_SD_ConfigWideBusOperation>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_SDIO_SD_Init+0x52>
  {
	  Error_Handler();
 800145a:	f7ff ffd1 	bl	8001400 <Error_Handler>
  }
  /* USER CODE END SDIO_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000228c 	.word	0x2000228c
 8001468:	40012c00 	.word	0x40012c00

0800146c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a28      	ldr	r2, [pc, #160]	; (800152c <HAL_SD_MspInit+0xc0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d14a      	bne.n	8001524 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <HAL_SD_MspInit+0xc4>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a26      	ldr	r2, [pc, #152]	; (8001530 <HAL_SD_MspInit+0xc4>)
 8001498:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b24      	ldr	r3, [pc, #144]	; (8001530 <HAL_SD_MspInit+0xc4>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <HAL_SD_MspInit+0xc4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a1f      	ldr	r2, [pc, #124]	; (8001530 <HAL_SD_MspInit+0xc4>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <HAL_SD_MspInit+0xc4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <HAL_SD_MspInit+0xc4>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a18      	ldr	r2, [pc, #96]	; (8001530 <HAL_SD_MspInit+0xc4>)
 80014d0:	f043 0308 	orr.w	r3, r3, #8
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <HAL_SD_MspInit+0xc4>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80014e2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80014e6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80014f4:	230c      	movs	r3, #12
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	480d      	ldr	r0, [pc, #52]	; (8001534 <HAL_SD_MspInit+0xc8>)
 8001500:	f000 fe92 	bl	8002228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001504:	2304      	movs	r3, #4
 8001506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001514:	230c      	movs	r3, #12
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	4806      	ldr	r0, [pc, #24]	; (8001538 <HAL_SD_MspInit+0xcc>)
 8001520:	f000 fe82 	bl	8002228 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	; 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40012c00 	.word	0x40012c00
 8001530:	40023800 	.word	0x40023800
 8001534:	40020800 	.word	0x40020800
 8001538:	40020c00 	.word	0x40020c00

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_MspInit+0x4c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <HAL_MspInit+0x4c>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <HAL_MspInit+0x4c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_MspInit+0x4c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a08      	ldr	r2, [pc, #32]	; (8001588 <HAL_MspInit+0x4c>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_MspInit+0x4c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001590:	e7fe      	b.n	8001590 <NMI_Handler+0x4>

08001592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <MemManage_Handler+0x4>

0800159e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <UsageFault_Handler+0x4>

080015aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d8:	f000 f960 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <DMA1_Stream5_IRQHandler+0x10>)
 80015e6:	f000 fbb5 	bl	8001d54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000222c 	.word	0x2000222c

080015f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return 1;
 80015f8:	2301      	movs	r3, #1
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_kill>:

int _kill(int pid, int sig)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800160e:	f004 fbd9 	bl	8005dc4 <__errno>
 8001612:	4603      	mov	r3, r0
 8001614:	2216      	movs	r2, #22
 8001616:	601a      	str	r2, [r3, #0]
  return -1;
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <_exit>:

void _exit (int status)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ffe7 	bl	8001604 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001636:	e7fe      	b.n	8001636 <_exit+0x12>

08001638 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	e00a      	b.n	8001660 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800164a:	f3af 8000 	nop.w
 800164e:	4601      	mov	r1, r0
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	60ba      	str	r2, [r7, #8]
 8001656:	b2ca      	uxtb	r2, r1
 8001658:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	dbf0      	blt.n	800164a <_read+0x12>
  }

  return len;
 8001668:	687b      	ldr	r3, [r7, #4]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	e009      	b.n	8001698 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	60ba      	str	r2, [r7, #8]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3301      	adds	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	dbf1      	blt.n	8001684 <_write+0x12>
  }
  return len;
 80016a0:	687b      	ldr	r3, [r7, #4]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_close>:

int _close(int file)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d2:	605a      	str	r2, [r3, #4]
  return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_isatty>:

int _isatty(int file)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <_sbrk+0x5c>)
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <_sbrk+0x60>)
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <_sbrk+0x64>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <_sbrk+0x68>)
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	429a      	cmp	r2, r3
 8001742:	d207      	bcs.n	8001754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001744:	f004 fb3e 	bl	8005dc4 <__errno>
 8001748:	4603      	mov	r3, r0
 800174a:	220c      	movs	r2, #12
 800174c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	e009      	b.n	8001768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <_sbrk+0x64>)
 8001764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001766:	68fb      	ldr	r3, [r7, #12]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20020000 	.word	0x20020000
 8001774:	00000400 	.word	0x00000400
 8001778:	20002310 	.word	0x20002310
 800177c:	20002340 	.word	0x20002340

08001780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <SystemInit+0x20>)
 8001786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <SystemInit+0x20>)
 800178c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017aa:	490e      	ldr	r1, [pc, #56]	; (80017e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017ac:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b0:	e002      	b.n	80017b8 <LoopCopyDataInit>

080017b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b6:	3304      	adds	r3, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017bc:	d3f9      	bcc.n	80017b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c0:	4c0b      	ldr	r4, [pc, #44]	; (80017f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c4:	e001      	b.n	80017ca <LoopFillZerobss>

080017c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c8:	3204      	adds	r2, #4

080017ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017cc:	d3fb      	bcc.n	80017c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ce:	f7ff ffd7 	bl	8001780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d2:	f004 fb0f 	bl	8005df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d6:	f7ff fd97 	bl	8001308 <main>
  bx  lr    
 80017da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80017e8:	0800abb4 	.word	0x0800abb4
  ldr r2, =_sbss
 80017ec:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80017f0:	2000233c 	.word	0x2000233c

080017f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC_IRQHandler>
	...

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <HAL_Init+0x40>)
 8001802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_Init+0x40>)
 800180e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <HAL_Init+0x40>)
 800181a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 f94f 	bl	8001ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	200f      	movs	r0, #15
 8001828:	f000 f808 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800182c:	f7ff fe86 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x54>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_InitTick+0x58>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f967 	bl	8001b2e <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f000 f92f 	bl	8001ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	; (8001898 <HAL_InitTick+0x5c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000000 	.word	0x20000000
 8001894:	20000008 	.word	0x20000008
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000008 	.word	0x20000008
 80018c0:	20002314 	.word	0x20002314

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20002314 	.word	0x20002314

080018dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff ffee 	bl	80018c4 <HAL_GetTick>
 80018e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f4:	d005      	beq.n	8001902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_Delay+0x44>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001902:	bf00      	nop
 8001904:	f7ff ffde 	bl	80018c4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	d8f7      	bhi.n	8001904 <HAL_Delay+0x28>
  {
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000008 	.word	0x20000008

08001924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001940:	4013      	ands	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800194c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001956:	4a04      	ldr	r2, [pc, #16]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	60d3      	str	r3, [r2, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <__NVIC_GetPriorityGrouping+0x18>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	f003 0307 	and.w	r3, r3, #7
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	2b00      	cmp	r3, #0
 8001998:	db0b      	blt.n	80019b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	f003 021f 	and.w	r2, r3, #31
 80019a0:	4907      	ldr	r1, [pc, #28]	; (80019c0 <__NVIC_EnableIRQ+0x38>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	2001      	movs	r0, #1
 80019aa:	fa00 f202 	lsl.w	r2, r0, r2
 80019ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000e100 	.word	0xe000e100

080019c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	db0a      	blt.n	80019ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	490c      	ldr	r1, [pc, #48]	; (8001a10 <__NVIC_SetPriority+0x4c>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	0112      	lsls	r2, r2, #4
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	440b      	add	r3, r1
 80019e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ec:	e00a      	b.n	8001a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4908      	ldr	r1, [pc, #32]	; (8001a14 <__NVIC_SetPriority+0x50>)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	3b04      	subs	r3, #4
 80019fc:	0112      	lsls	r2, r2, #4
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	440b      	add	r3, r1
 8001a02:	761a      	strb	r2, [r3, #24]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000e100 	.word	0xe000e100
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f1c3 0307 	rsb	r3, r3, #7
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	bf28      	it	cs
 8001a36:	2304      	movcs	r3, #4
 8001a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d902      	bls.n	8001a48 <NVIC_EncodePriority+0x30>
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3b03      	subs	r3, #3
 8001a46:	e000      	b.n	8001a4a <NVIC_EncodePriority+0x32>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43da      	mvns	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	43d9      	mvns	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	4313      	orrs	r3, r2
         );
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3724      	adds	r7, #36	; 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a90:	d301      	bcc.n	8001a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00f      	b.n	8001ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <SysTick_Config+0x40>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9e:	210f      	movs	r1, #15
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f7ff ff8e 	bl	80019c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <SysTick_Config+0x40>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <SysTick_Config+0x40>)
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	e000e010 	.word	0xe000e010

08001ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff29 	bl	8001924 <__NVIC_SetPriorityGrouping>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aec:	f7ff ff3e 	bl	800196c <__NVIC_GetPriorityGrouping>
 8001af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ff8e 	bl	8001a18 <NVIC_EncodePriority>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff5d 	bl	80019c4 <__NVIC_SetPriority>
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff31 	bl	8001988 <__NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ffa2 	bl	8001a80 <SysTick_Config>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b54:	f7ff feb6 	bl	80018c4 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e099      	b.n	8001c98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b84:	e00f      	b.n	8001ba6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b86:	f7ff fe9d 	bl	80018c4 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d908      	bls.n	8001ba6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2220      	movs	r2, #32
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e078      	b.n	8001c98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1e8      	bne.n	8001b86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	4b38      	ldr	r3, [pc, #224]	; (8001ca0 <HAL_DMA_Init+0x158>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d107      	bne.n	8001c10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f023 0307 	bic.w	r3, r3, #7
 8001c26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d117      	bne.n	8001c6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00e      	beq.n	8001c6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 fa6f 	bl	8002130 <DMA_CheckFifoParam>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2240      	movs	r2, #64	; 0x40
 8001c5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c66:	2301      	movs	r3, #1
 8001c68:	e016      	b.n	8001c98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 fa26 	bl	80020c4 <DMA_CalcBaseAndBitshift>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c80:	223f      	movs	r2, #63	; 0x3f
 8001c82:	409a      	lsls	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	f010803f 	.word	0xf010803f

08001ca4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_DMA_Start_IT+0x26>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e040      	b.n	8001d4c <HAL_DMA_Start_IT+0xa8>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d12f      	bne.n	8001d3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f9b8 	bl	8002068 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfc:	223f      	movs	r2, #63	; 0x3f
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0216 	orr.w	r2, r2, #22
 8001d12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0208 	orr.w	r2, r2, #8
 8001d2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	e005      	b.n	8001d4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d46:	2302      	movs	r3, #2
 8001d48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d60:	4b8e      	ldr	r3, [pc, #568]	; (8001f9c <HAL_DMA_IRQHandler+0x248>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a8e      	ldr	r2, [pc, #568]	; (8001fa0 <HAL_DMA_IRQHandler+0x24c>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	0a9b      	lsrs	r3, r3, #10
 8001d6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	2208      	movs	r2, #8
 8001d80:	409a      	lsls	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d01a      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d013      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0204 	bic.w	r2, r2, #4
 8001da6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dac:	2208      	movs	r2, #8
 8001dae:	409a      	lsls	r2, r3
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db8:	f043 0201 	orr.w	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d012      	beq.n	8001df6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de2:	2201      	movs	r2, #1
 8001de4:	409a      	lsls	r2, r3
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dee:	f043 0202 	orr.w	r2, r3, #2
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d012      	beq.n	8001e2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00b      	beq.n	8001e2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e18:	2204      	movs	r2, #4
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e24:	f043 0204 	orr.w	r2, r3, #4
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e30:	2210      	movs	r2, #16
 8001e32:	409a      	lsls	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d043      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d03c      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4e:	2210      	movs	r2, #16
 8001e50:	409a      	lsls	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d018      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d108      	bne.n	8001e84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d024      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
 8001e82:	e01f      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01b      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	4798      	blx	r3
 8001e94:	e016      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d107      	bne.n	8001eb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0208 	bic.w	r2, r2, #8
 8001eb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec8:	2220      	movs	r2, #32
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 808f 	beq.w	8001ff4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0310 	and.w	r3, r3, #16
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 8087 	beq.w	8001ff4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eea:	2220      	movs	r2, #32
 8001eec:	409a      	lsls	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b05      	cmp	r3, #5
 8001efc:	d136      	bne.n	8001f6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0216 	bic.w	r2, r2, #22
 8001f0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d103      	bne.n	8001f2e <HAL_DMA_IRQHandler+0x1da>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0208 	bic.w	r2, r2, #8
 8001f3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	223f      	movs	r2, #63	; 0x3f
 8001f44:	409a      	lsls	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d07e      	beq.n	8002060 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	4798      	blx	r3
        }
        return;
 8001f6a:	e079      	b.n	8002060 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d01d      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10d      	bne.n	8001fa4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d031      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	4798      	blx	r3
 8001f98:	e02c      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x2a0>
 8001f9a:	bf00      	nop
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d023      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	4798      	blx	r3
 8001fb4:	e01e      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10f      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0210 	bic.w	r2, r2, #16
 8001fd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d032      	beq.n	8002062 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d022      	beq.n	800204e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2205      	movs	r2, #5
 800200c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	3301      	adds	r3, #1
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	429a      	cmp	r2, r3
 800202a:	d307      	bcc.n	800203c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f2      	bne.n	8002020 <HAL_DMA_IRQHandler+0x2cc>
 800203a:	e000      	b.n	800203e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800203c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	4798      	blx	r3
 800205e:	e000      	b.n	8002062 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002060:	bf00      	nop
    }
  }
}
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002084:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b40      	cmp	r3, #64	; 0x40
 8002094:	d108      	bne.n	80020a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020a6:	e007      	b.n	80020b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	60da      	str	r2, [r3, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	3b10      	subs	r3, #16
 80020d4:	4a14      	ldr	r2, [pc, #80]	; (8002128 <DMA_CalcBaseAndBitshift+0x64>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020de:	4a13      	ldr	r2, [pc, #76]	; (800212c <DMA_CalcBaseAndBitshift+0x68>)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d909      	bls.n	8002106 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020fa:	f023 0303 	bic.w	r3, r3, #3
 80020fe:	1d1a      	adds	r2, r3, #4
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	659a      	str	r2, [r3, #88]	; 0x58
 8002104:	e007      	b.n	8002116 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800210e:	f023 0303 	bic.w	r3, r3, #3
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	aaaaaaab 	.word	0xaaaaaaab
 800212c:	0800a6e8 	.word	0x0800a6e8

08002130 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d11f      	bne.n	800218a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d856      	bhi.n	80021fe <DMA_CheckFifoParam+0xce>
 8002150:	a201      	add	r2, pc, #4	; (adr r2, 8002158 <DMA_CheckFifoParam+0x28>)
 8002152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002156:	bf00      	nop
 8002158:	08002169 	.word	0x08002169
 800215c:	0800217b 	.word	0x0800217b
 8002160:	08002169 	.word	0x08002169
 8002164:	080021ff 	.word	0x080021ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d046      	beq.n	8002202 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002178:	e043      	b.n	8002202 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002182:	d140      	bne.n	8002206 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002188:	e03d      	b.n	8002206 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002192:	d121      	bne.n	80021d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d837      	bhi.n	800220a <DMA_CheckFifoParam+0xda>
 800219a:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <DMA_CheckFifoParam+0x70>)
 800219c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a0:	080021b1 	.word	0x080021b1
 80021a4:	080021b7 	.word	0x080021b7
 80021a8:	080021b1 	.word	0x080021b1
 80021ac:	080021c9 	.word	0x080021c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
      break;
 80021b4:	e030      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d025      	beq.n	800220e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c6:	e022      	b.n	800220e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021d0:	d11f      	bne.n	8002212 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021d6:	e01c      	b.n	8002212 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d903      	bls.n	80021e6 <DMA_CheckFifoParam+0xb6>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d003      	beq.n	80021ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021e4:	e018      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
      break;
 80021ea:	e015      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00e      	beq.n	8002216 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
      break;
 80021fc:	e00b      	b.n	8002216 <DMA_CheckFifoParam+0xe6>
      break;
 80021fe:	bf00      	nop
 8002200:	e00a      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
      break;
 8002202:	bf00      	nop
 8002204:	e008      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
      break;
 8002206:	bf00      	nop
 8002208:	e006      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
      break;
 800220a:	bf00      	nop
 800220c:	e004      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
      break;
 800220e:	bf00      	nop
 8002210:	e002      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
      break;   
 8002212:	bf00      	nop
 8002214:	e000      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
      break;
 8002216:	bf00      	nop
    }
  } 
  
  return status; 
 8002218:	7bfb      	ldrb	r3, [r7, #15]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop

08002228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	; 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	e16b      	b.n	800251c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002244:	2201      	movs	r2, #1
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	429a      	cmp	r2, r3
 800225e:	f040 815a 	bne.w	8002516 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d005      	beq.n	800227a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002276:	2b02      	cmp	r3, #2
 8002278:	d130      	bne.n	80022dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b0:	2201      	movs	r2, #1
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 0201 	and.w	r2, r3, #1
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d017      	beq.n	8002318 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	2203      	movs	r2, #3
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d123      	bne.n	800236c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	08da      	lsrs	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3208      	adds	r2, #8
 800232c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	220f      	movs	r2, #15
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	08da      	lsrs	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3208      	adds	r2, #8
 8002366:	69b9      	ldr	r1, [r7, #24]
 8002368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	2203      	movs	r2, #3
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0203 	and.w	r2, r3, #3
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80b4 	beq.w	8002516 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b60      	ldr	r3, [pc, #384]	; (8002534 <HAL_GPIO_Init+0x30c>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	4a5f      	ldr	r2, [pc, #380]	; (8002534 <HAL_GPIO_Init+0x30c>)
 80023b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023bc:	6453      	str	r3, [r2, #68]	; 0x44
 80023be:	4b5d      	ldr	r3, [pc, #372]	; (8002534 <HAL_GPIO_Init+0x30c>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ca:	4a5b      	ldr	r2, [pc, #364]	; (8002538 <HAL_GPIO_Init+0x310>)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a52      	ldr	r2, [pc, #328]	; (800253c <HAL_GPIO_Init+0x314>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d02b      	beq.n	800244e <HAL_GPIO_Init+0x226>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a51      	ldr	r2, [pc, #324]	; (8002540 <HAL_GPIO_Init+0x318>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d025      	beq.n	800244a <HAL_GPIO_Init+0x222>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a50      	ldr	r2, [pc, #320]	; (8002544 <HAL_GPIO_Init+0x31c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d01f      	beq.n	8002446 <HAL_GPIO_Init+0x21e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4f      	ldr	r2, [pc, #316]	; (8002548 <HAL_GPIO_Init+0x320>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d019      	beq.n	8002442 <HAL_GPIO_Init+0x21a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4e      	ldr	r2, [pc, #312]	; (800254c <HAL_GPIO_Init+0x324>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d013      	beq.n	800243e <HAL_GPIO_Init+0x216>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4d      	ldr	r2, [pc, #308]	; (8002550 <HAL_GPIO_Init+0x328>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00d      	beq.n	800243a <HAL_GPIO_Init+0x212>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4c      	ldr	r2, [pc, #304]	; (8002554 <HAL_GPIO_Init+0x32c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d007      	beq.n	8002436 <HAL_GPIO_Init+0x20e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4b      	ldr	r2, [pc, #300]	; (8002558 <HAL_GPIO_Init+0x330>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_GPIO_Init+0x20a>
 800242e:	2307      	movs	r3, #7
 8002430:	e00e      	b.n	8002450 <HAL_GPIO_Init+0x228>
 8002432:	2308      	movs	r3, #8
 8002434:	e00c      	b.n	8002450 <HAL_GPIO_Init+0x228>
 8002436:	2306      	movs	r3, #6
 8002438:	e00a      	b.n	8002450 <HAL_GPIO_Init+0x228>
 800243a:	2305      	movs	r3, #5
 800243c:	e008      	b.n	8002450 <HAL_GPIO_Init+0x228>
 800243e:	2304      	movs	r3, #4
 8002440:	e006      	b.n	8002450 <HAL_GPIO_Init+0x228>
 8002442:	2303      	movs	r3, #3
 8002444:	e004      	b.n	8002450 <HAL_GPIO_Init+0x228>
 8002446:	2302      	movs	r3, #2
 8002448:	e002      	b.n	8002450 <HAL_GPIO_Init+0x228>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_GPIO_Init+0x228>
 800244e:	2300      	movs	r3, #0
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	f002 0203 	and.w	r2, r2, #3
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	4093      	lsls	r3, r2
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002460:	4935      	ldr	r1, [pc, #212]	; (8002538 <HAL_GPIO_Init+0x310>)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	3302      	adds	r3, #2
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246e:	4b3b      	ldr	r3, [pc, #236]	; (800255c <HAL_GPIO_Init+0x334>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002492:	4a32      	ldr	r2, [pc, #200]	; (800255c <HAL_GPIO_Init+0x334>)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002498:	4b30      	ldr	r3, [pc, #192]	; (800255c <HAL_GPIO_Init+0x334>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024bc:	4a27      	ldr	r2, [pc, #156]	; (800255c <HAL_GPIO_Init+0x334>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c2:	4b26      	ldr	r3, [pc, #152]	; (800255c <HAL_GPIO_Init+0x334>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e6:	4a1d      	ldr	r2, [pc, #116]	; (800255c <HAL_GPIO_Init+0x334>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <HAL_GPIO_Init+0x334>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002510:	4a12      	ldr	r2, [pc, #72]	; (800255c <HAL_GPIO_Init+0x334>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3301      	adds	r3, #1
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b0f      	cmp	r3, #15
 8002520:	f67f ae90 	bls.w	8002244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3724      	adds	r7, #36	; 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	40013800 	.word	0x40013800
 800253c:	40020000 	.word	0x40020000
 8002540:	40020400 	.word	0x40020400
 8002544:	40020800 	.word	0x40020800
 8002548:	40020c00 	.word	0x40020c00
 800254c:	40021000 	.word	0x40021000
 8002550:	40021400 	.word	0x40021400
 8002554:	40021800 	.word	0x40021800
 8002558:	40021c00 	.word	0x40021c00
 800255c:	40013c00 	.word	0x40013c00

08002560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e001      	b.n	8002582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e128      	b.n	80027f4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a90      	ldr	r2, [pc, #576]	; (80027fc <HAL_I2S_Init+0x26c>)
 80025ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7fe fdd7 	bl	8001170 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2202      	movs	r2, #2
 80025c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80025d8:	f023 030f 	bic.w	r3, r3, #15
 80025dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2202      	movs	r2, #2
 80025e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d060      	beq.n	80026b0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d102      	bne.n	80025fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80025f6:	2310      	movs	r3, #16
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	e001      	b.n	8002600 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80025fc:	2320      	movs	r3, #32
 80025fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b20      	cmp	r3, #32
 8002606:	d802      	bhi.n	800260e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800260e:	2001      	movs	r0, #1
 8002610:	f001 fa52 	bl	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002614:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800261e:	d125      	bne.n	800266c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d010      	beq.n	800264a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	461a      	mov	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	fbb2 f3f3 	udiv	r3, r2, r3
 8002644:	3305      	adds	r3, #5
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	e01f      	b.n	800268a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	fbb2 f2f3 	udiv	r2, r2, r3
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	461a      	mov	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	fbb2 f3f3 	udiv	r3, r2, r3
 8002666:	3305      	adds	r3, #5
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	e00e      	b.n	800268a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	fbb2 f2f3 	udiv	r2, r2, r3
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	461a      	mov	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	fbb2 f3f3 	udiv	r3, r2, r3
 8002686:	3305      	adds	r3, #5
 8002688:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4a5c      	ldr	r2, [pc, #368]	; (8002800 <HAL_I2S_Init+0x270>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	08db      	lsrs	r3, r3, #3
 8002694:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	085b      	lsrs	r3, r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	e003      	b.n	80026b8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80026b0:	2302      	movs	r3, #2
 80026b2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d902      	bls.n	80026c4 <HAL_I2S_Init+0x134>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	2bff      	cmp	r3, #255	; 0xff
 80026c2:	d907      	bls.n	80026d4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c8:	f043 0210 	orr.w	r2, r3, #16
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e08f      	b.n	80027f4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	ea42 0103 	orr.w	r1, r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80026f2:	f023 030f 	bic.w	r3, r3, #15
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6851      	ldr	r1, [r2, #4]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6892      	ldr	r2, [r2, #8]
 80026fe:	4311      	orrs	r1, r2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	68d2      	ldr	r2, [r2, #12]
 8002704:	4311      	orrs	r1, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6992      	ldr	r2, [r2, #24]
 800270a:	430a      	orrs	r2, r1
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002716:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d161      	bne.n	80027e4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a38      	ldr	r2, [pc, #224]	; (8002804 <HAL_I2S_Init+0x274>)
 8002724:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a37      	ldr	r2, [pc, #220]	; (8002808 <HAL_I2S_Init+0x278>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d101      	bne.n	8002734 <HAL_I2S_Init+0x1a4>
 8002730:	4b36      	ldr	r3, [pc, #216]	; (800280c <HAL_I2S_Init+0x27c>)
 8002732:	e001      	b.n	8002738 <HAL_I2S_Init+0x1a8>
 8002734:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	4932      	ldr	r1, [pc, #200]	; (8002808 <HAL_I2S_Init+0x278>)
 8002740:	428a      	cmp	r2, r1
 8002742:	d101      	bne.n	8002748 <HAL_I2S_Init+0x1b8>
 8002744:	4a31      	ldr	r2, [pc, #196]	; (800280c <HAL_I2S_Init+0x27c>)
 8002746:	e001      	b.n	800274c <HAL_I2S_Init+0x1bc>
 8002748:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800274c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002750:	f023 030f 	bic.w	r3, r3, #15
 8002754:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a2b      	ldr	r2, [pc, #172]	; (8002808 <HAL_I2S_Init+0x278>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d101      	bne.n	8002764 <HAL_I2S_Init+0x1d4>
 8002760:	4b2a      	ldr	r3, [pc, #168]	; (800280c <HAL_I2S_Init+0x27c>)
 8002762:	e001      	b.n	8002768 <HAL_I2S_Init+0x1d8>
 8002764:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002768:	2202      	movs	r2, #2
 800276a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a25      	ldr	r2, [pc, #148]	; (8002808 <HAL_I2S_Init+0x278>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_I2S_Init+0x1ea>
 8002776:	4b25      	ldr	r3, [pc, #148]	; (800280c <HAL_I2S_Init+0x27c>)
 8002778:	e001      	b.n	800277e <HAL_I2S_Init+0x1ee>
 800277a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800278a:	d003      	beq.n	8002794 <HAL_I2S_Init+0x204>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d103      	bne.n	800279c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	e001      	b.n	80027a0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80027aa:	4313      	orrs	r3, r2
 80027ac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80027b4:	4313      	orrs	r3, r2
 80027b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80027be:	4313      	orrs	r3, r2
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	897b      	ldrh	r3, [r7, #10]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027cc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a0d      	ldr	r2, [pc, #52]	; (8002808 <HAL_I2S_Init+0x278>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d101      	bne.n	80027dc <HAL_I2S_Init+0x24c>
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <HAL_I2S_Init+0x27c>)
 80027da:	e001      	b.n	80027e0 <HAL_I2S_Init+0x250>
 80027dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027e0:	897a      	ldrh	r2, [r7, #10]
 80027e2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3720      	adds	r7, #32
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	08002ae5 	.word	0x08002ae5
 8002800:	cccccccd 	.word	0xcccccccd
 8002804:	08002bf9 	.word	0x08002bf9
 8002808:	40003800 	.word	0x40003800
 800280c:	40003400 	.word	0x40003400

08002810 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	4613      	mov	r3, r2
 800281c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <HAL_I2S_Transmit_DMA+0x1a>
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e08a      	b.n	8002944 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d001      	beq.n	800283e <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
 800283c:	e082      	b.n	8002944 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_I2S_Transmit_DMA+0x3e>
 800284a:	2302      	movs	r3, #2
 800284c:	e07a      	b.n	8002944 <HAL_I2S_Transmit_DMA+0x134>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2203      	movs	r2, #3
 800285a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2b03      	cmp	r3, #3
 800287a:	d002      	beq.n	8002882 <HAL_I2S_Transmit_DMA+0x72>
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b05      	cmp	r3, #5
 8002880:	d10a      	bne.n	8002898 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002896:	e005      	b.n	80028a4 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	88fa      	ldrh	r2, [r7, #6]
 800289c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	88fa      	ldrh	r2, [r7, #6]
 80028a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	4a28      	ldr	r2, [pc, #160]	; (800294c <HAL_I2S_Transmit_DMA+0x13c>)
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b0:	4a27      	ldr	r2, [pc, #156]	; (8002950 <HAL_I2S_Transmit_DMA+0x140>)
 80028b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b8:	4a26      	ldr	r2, [pc, #152]	; (8002954 <HAL_I2S_Transmit_DMA+0x144>)
 80028ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80028c4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80028cc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80028d4:	f7ff f9e6 	bl	8001ca4 <HAL_DMA_Start_IT>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00f      	beq.n	80028fe <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	f043 0208 	orr.w	r2, r3, #8
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e022      	b.n	8002944 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d107      	bne.n	8002924 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0202 	orr.w	r2, r2, #2
 8002922:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292e:	2b00      	cmp	r3, #0
 8002930:	d107      	bne.n	8002942 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002940:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	080029c3 	.word	0x080029c3
 8002950:	08002981 	.word	0x08002981
 8002954:	080029df 	.word	0x080029df

08002958 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10e      	bne.n	80029b4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0202 	bic.w	r2, r2, #2
 80029a4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f7fe fb0f 	bl	8000fd8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f7fe faf1 	bl	8000fb8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0203 	bic.w	r2, r2, #3
 80029fa:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	f043 0208 	orr.w	r2, r3, #8
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f7ff ffa5 	bl	800296c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	881a      	ldrh	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	1c9a      	adds	r2, r3, #2
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10e      	bne.n	8002a7e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a6e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7fe faad 	bl	8000fd8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	b292      	uxth	r2, r2
 8002a9a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	1c9a      	adds	r2, r3, #2
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10e      	bne.n	8002adc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002acc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ff3e 	bl	8002958 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d13a      	bne.n	8002b76 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d109      	bne.n	8002b1e <I2S_IRQHandler+0x3a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b14:	2b40      	cmp	r3, #64	; 0x40
 8002b16:	d102      	bne.n	8002b1e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ffb4 	bl	8002a86 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b40      	cmp	r3, #64	; 0x40
 8002b26:	d126      	bne.n	8002b76 <I2S_IRQHandler+0x92>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d11f      	bne.n	8002b76 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b44:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b68:	f043 0202 	orr.w	r2, r3, #2
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff fefb 	bl	800296c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d136      	bne.n	8002bf0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d109      	bne.n	8002ba0 <I2S_IRQHandler+0xbc>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b96:	2b80      	cmp	r3, #128	; 0x80
 8002b98:	d102      	bne.n	8002ba0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ff45 	bl	8002a2a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d122      	bne.n	8002bf0 <I2S_IRQHandler+0x10c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d11b      	bne.n	8002bf0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bc6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	f043 0204 	orr.w	r2, r3, #4
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff febe 	bl	800296c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a92      	ldr	r2, [pc, #584]	; (8002e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d101      	bne.n	8002c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002c12:	4b92      	ldr	r3, [pc, #584]	; (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c14:	e001      	b.n	8002c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002c16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a8b      	ldr	r2, [pc, #556]	; (8002e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d101      	bne.n	8002c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c30:	4b8a      	ldr	r3, [pc, #552]	; (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c32:	e001      	b.n	8002c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c44:	d004      	beq.n	8002c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 8099 	bne.w	8002d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d107      	bne.n	8002c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f925 	bl	8002eb4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d107      	bne.n	8002c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f9c8 	bl	8003014 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8a:	2b40      	cmp	r3, #64	; 0x40
 8002c8c:	d13a      	bne.n	8002d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d035      	beq.n	8002d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a6e      	ldr	r2, [pc, #440]	; (8002e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d101      	bne.n	8002ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002ca2:	4b6e      	ldr	r3, [pc, #440]	; (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ca4:	e001      	b.n	8002caa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002ca6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4969      	ldr	r1, [pc, #420]	; (8002e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cb2:	428b      	cmp	r3, r1
 8002cb4:	d101      	bne.n	8002cba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002cb6:	4b69      	ldr	r3, [pc, #420]	; (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cb8:	e001      	b.n	8002cbe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002cba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cc2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cd2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f043 0202 	orr.w	r2, r3, #2
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff fe34 	bl	800296c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	f040 80c3 	bne.w	8002e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80bd 	beq.w	8002e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d2a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a49      	ldr	r2, [pc, #292]	; (8002e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d36:	4b49      	ldr	r3, [pc, #292]	; (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d38:	e001      	b.n	8002d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4944      	ldr	r1, [pc, #272]	; (8002e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d46:	428b      	cmp	r3, r1
 8002d48:	d101      	bne.n	8002d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d4a:	4b44      	ldr	r3, [pc, #272]	; (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d4c:	e001      	b.n	8002d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d56:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f043 0204 	orr.w	r2, r3, #4
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff fdf6 	bl	800296c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d80:	e089      	b.n	8002e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d107      	bne.n	8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f8be 	bl	8002f18 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d107      	bne.n	8002db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f8fd 	bl	8002fb0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	d12f      	bne.n	8002e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d02a      	beq.n	8002e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dd8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1e      	ldr	r2, [pc, #120]	; (8002e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d101      	bne.n	8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002de6:	e001      	b.n	8002dec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002de8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4919      	ldr	r1, [pc, #100]	; (8002e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002df4:	428b      	cmp	r3, r1
 8002df6:	d101      	bne.n	8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002df8:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dfa:	e001      	b.n	8002e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002dfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e04:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	f043 0202 	orr.w	r2, r3, #2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff fda6 	bl	800296c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d136      	bne.n	8002e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d031      	beq.n	8002e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a07      	ldr	r2, [pc, #28]	; (8002e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d101      	bne.n	8002e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e40:	e001      	b.n	8002e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002e42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4902      	ldr	r1, [pc, #8]	; (8002e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e4e:	428b      	cmp	r3, r1
 8002e50:	d106      	bne.n	8002e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002e52:	4b02      	ldr	r3, [pc, #8]	; (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e54:	e006      	b.n	8002e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002e56:	bf00      	nop
 8002e58:	40003800 	.word	0x40003800
 8002e5c:	40003400 	.word	0x40003400
 8002e60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e68:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	f043 0204 	orr.w	r2, r3, #4
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff fd6c 	bl	800296c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e94:	e000      	b.n	8002e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e96:	bf00      	nop
}
 8002e98:	bf00      	nop
 8002e9a:	3720      	adds	r7, #32
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	1c99      	adds	r1, r3, #2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6251      	str	r1, [r2, #36]	; 0x24
 8002ec6:	881a      	ldrh	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d113      	bne.n	8002f0e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ef4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d106      	bne.n	8002f0e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ffc9 	bl	8002ea0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	1c99      	adds	r1, r3, #2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6251      	str	r1, [r2, #36]	; 0x24
 8002f2a:	8819      	ldrh	r1, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1d      	ldr	r2, [pc, #116]	; (8002fa8 <I2SEx_TxISR_I2SExt+0x90>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <I2SEx_TxISR_I2SExt+0x22>
 8002f36:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <I2SEx_TxISR_I2SExt+0x94>)
 8002f38:	e001      	b.n	8002f3e <I2SEx_TxISR_I2SExt+0x26>
 8002f3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f3e:	460a      	mov	r2, r1
 8002f40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d121      	bne.n	8002f9e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a12      	ldr	r2, [pc, #72]	; (8002fa8 <I2SEx_TxISR_I2SExt+0x90>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d101      	bne.n	8002f68 <I2SEx_TxISR_I2SExt+0x50>
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <I2SEx_TxISR_I2SExt+0x94>)
 8002f66:	e001      	b.n	8002f6c <I2SEx_TxISR_I2SExt+0x54>
 8002f68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	490d      	ldr	r1, [pc, #52]	; (8002fa8 <I2SEx_TxISR_I2SExt+0x90>)
 8002f74:	428b      	cmp	r3, r1
 8002f76:	d101      	bne.n	8002f7c <I2SEx_TxISR_I2SExt+0x64>
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <I2SEx_TxISR_I2SExt+0x94>)
 8002f7a:	e001      	b.n	8002f80 <I2SEx_TxISR_I2SExt+0x68>
 8002f7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d106      	bne.n	8002f9e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff ff81 	bl	8002ea0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40003800 	.word	0x40003800
 8002fac:	40003400 	.word	0x40003400

08002fb0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68d8      	ldr	r0, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	1c99      	adds	r1, r3, #2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fc8:	b282      	uxth	r2, r0
 8002fca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d113      	bne.n	800300c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ff2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ff4a 	bl	8002ea0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a20      	ldr	r2, [pc, #128]	; (80030a4 <I2SEx_RxISR_I2SExt+0x90>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d101      	bne.n	800302a <I2SEx_RxISR_I2SExt+0x16>
 8003026:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <I2SEx_RxISR_I2SExt+0x94>)
 8003028:	e001      	b.n	800302e <I2SEx_RxISR_I2SExt+0x1a>
 800302a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800302e:	68d8      	ldr	r0, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	1c99      	adds	r1, r3, #2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	62d1      	str	r1, [r2, #44]	; 0x2c
 800303a:	b282      	uxth	r2, r0
 800303c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d121      	bne.n	800309a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a12      	ldr	r2, [pc, #72]	; (80030a4 <I2SEx_RxISR_I2SExt+0x90>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <I2SEx_RxISR_I2SExt+0x50>
 8003060:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <I2SEx_RxISR_I2SExt+0x94>)
 8003062:	e001      	b.n	8003068 <I2SEx_RxISR_I2SExt+0x54>
 8003064:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	490d      	ldr	r1, [pc, #52]	; (80030a4 <I2SEx_RxISR_I2SExt+0x90>)
 8003070:	428b      	cmp	r3, r1
 8003072:	d101      	bne.n	8003078 <I2SEx_RxISR_I2SExt+0x64>
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <I2SEx_RxISR_I2SExt+0x94>)
 8003076:	e001      	b.n	800307c <I2SEx_RxISR_I2SExt+0x68>
 8003078:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800307c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003080:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d106      	bne.n	800309a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff03 	bl	8002ea0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40003800 	.word	0x40003800
 80030a8:	40003400 	.word	0x40003400

080030ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e267      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d075      	beq.n	80031b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030ca:	4b88      	ldr	r3, [pc, #544]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d00c      	beq.n	80030f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d6:	4b85      	ldr	r3, [pc, #532]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d112      	bne.n	8003108 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030e2:	4b82      	ldr	r3, [pc, #520]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ee:	d10b      	bne.n	8003108 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f0:	4b7e      	ldr	r3, [pc, #504]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d05b      	beq.n	80031b4 <HAL_RCC_OscConfig+0x108>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d157      	bne.n	80031b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e242      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003110:	d106      	bne.n	8003120 <HAL_RCC_OscConfig+0x74>
 8003112:	4b76      	ldr	r3, [pc, #472]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a75      	ldr	r2, [pc, #468]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 8003118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e01d      	b.n	800315c <HAL_RCC_OscConfig+0xb0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003128:	d10c      	bne.n	8003144 <HAL_RCC_OscConfig+0x98>
 800312a:	4b70      	ldr	r3, [pc, #448]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a6f      	ldr	r2, [pc, #444]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 8003130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	4b6d      	ldr	r3, [pc, #436]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a6c      	ldr	r2, [pc, #432]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 800313c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e00b      	b.n	800315c <HAL_RCC_OscConfig+0xb0>
 8003144:	4b69      	ldr	r3, [pc, #420]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a68      	ldr	r2, [pc, #416]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 800314a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	4b66      	ldr	r3, [pc, #408]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a65      	ldr	r2, [pc, #404]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 8003156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800315a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fe fbae 	bl	80018c4 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316c:	f7fe fbaa 	bl	80018c4 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e207      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317e:	4b5b      	ldr	r3, [pc, #364]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0xc0>
 800318a:	e014      	b.n	80031b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fe fb9a 	bl	80018c4 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003194:	f7fe fb96 	bl	80018c4 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b64      	cmp	r3, #100	; 0x64
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e1f3      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a6:	4b51      	ldr	r3, [pc, #324]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0xe8>
 80031b2:	e000      	b.n	80031b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d063      	beq.n	800328a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031c2:	4b4a      	ldr	r3, [pc, #296]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ce:	4b47      	ldr	r3, [pc, #284]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d11c      	bne.n	8003214 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031da:	4b44      	ldr	r3, [pc, #272]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d116      	bne.n	8003214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e6:	4b41      	ldr	r3, [pc, #260]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <HAL_RCC_OscConfig+0x152>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d001      	beq.n	80031fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e1c7      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fe:	4b3b      	ldr	r3, [pc, #236]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4937      	ldr	r1, [pc, #220]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003212:	e03a      	b.n	800328a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d020      	beq.n	800325e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800321c:	4b34      	ldr	r3, [pc, #208]	; (80032f0 <HAL_RCC_OscConfig+0x244>)
 800321e:	2201      	movs	r2, #1
 8003220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003222:	f7fe fb4f 	bl	80018c4 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800322a:	f7fe fb4b 	bl	80018c4 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e1a8      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323c:	4b2b      	ldr	r3, [pc, #172]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f0      	beq.n	800322a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003248:	4b28      	ldr	r3, [pc, #160]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4925      	ldr	r1, [pc, #148]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 8003258:	4313      	orrs	r3, r2
 800325a:	600b      	str	r3, [r1, #0]
 800325c:	e015      	b.n	800328a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <HAL_RCC_OscConfig+0x244>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe fb2e 	bl	80018c4 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800326c:	f7fe fb2a 	bl	80018c4 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e187      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327e:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d036      	beq.n	8003304 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d016      	beq.n	80032cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800329e:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <HAL_RCC_OscConfig+0x248>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a4:	f7fe fb0e 	bl	80018c4 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ac:	f7fe fb0a 	bl	80018c4 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e167      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032be:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_RCC_OscConfig+0x240>)
 80032c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x200>
 80032ca:	e01b      	b.n	8003304 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032cc:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <HAL_RCC_OscConfig+0x248>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d2:	f7fe faf7 	bl	80018c4 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d8:	e00e      	b.n	80032f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032da:	f7fe faf3 	bl	80018c4 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d907      	bls.n	80032f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e150      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
 80032ec:	40023800 	.word	0x40023800
 80032f0:	42470000 	.word	0x42470000
 80032f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f8:	4b88      	ldr	r3, [pc, #544]	; (800351c <HAL_RCC_OscConfig+0x470>)
 80032fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1ea      	bne.n	80032da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8097 	beq.w	8003440 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003316:	4b81      	ldr	r3, [pc, #516]	; (800351c <HAL_RCC_OscConfig+0x470>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10f      	bne.n	8003342 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	4b7d      	ldr	r3, [pc, #500]	; (800351c <HAL_RCC_OscConfig+0x470>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	4a7c      	ldr	r2, [pc, #496]	; (800351c <HAL_RCC_OscConfig+0x470>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003330:	6413      	str	r3, [r2, #64]	; 0x40
 8003332:	4b7a      	ldr	r3, [pc, #488]	; (800351c <HAL_RCC_OscConfig+0x470>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333e:	2301      	movs	r3, #1
 8003340:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003342:	4b77      	ldr	r3, [pc, #476]	; (8003520 <HAL_RCC_OscConfig+0x474>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d118      	bne.n	8003380 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800334e:	4b74      	ldr	r3, [pc, #464]	; (8003520 <HAL_RCC_OscConfig+0x474>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a73      	ldr	r2, [pc, #460]	; (8003520 <HAL_RCC_OscConfig+0x474>)
 8003354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335a:	f7fe fab3 	bl	80018c4 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003362:	f7fe faaf 	bl	80018c4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e10c      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003374:	4b6a      	ldr	r3, [pc, #424]	; (8003520 <HAL_RCC_OscConfig+0x474>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d106      	bne.n	8003396 <HAL_RCC_OscConfig+0x2ea>
 8003388:	4b64      	ldr	r3, [pc, #400]	; (800351c <HAL_RCC_OscConfig+0x470>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	4a63      	ldr	r2, [pc, #396]	; (800351c <HAL_RCC_OscConfig+0x470>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6713      	str	r3, [r2, #112]	; 0x70
 8003394:	e01c      	b.n	80033d0 <HAL_RCC_OscConfig+0x324>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b05      	cmp	r3, #5
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x30c>
 800339e:	4b5f      	ldr	r3, [pc, #380]	; (800351c <HAL_RCC_OscConfig+0x470>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	4a5e      	ldr	r2, [pc, #376]	; (800351c <HAL_RCC_OscConfig+0x470>)
 80033a4:	f043 0304 	orr.w	r3, r3, #4
 80033a8:	6713      	str	r3, [r2, #112]	; 0x70
 80033aa:	4b5c      	ldr	r3, [pc, #368]	; (800351c <HAL_RCC_OscConfig+0x470>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	4a5b      	ldr	r2, [pc, #364]	; (800351c <HAL_RCC_OscConfig+0x470>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6713      	str	r3, [r2, #112]	; 0x70
 80033b6:	e00b      	b.n	80033d0 <HAL_RCC_OscConfig+0x324>
 80033b8:	4b58      	ldr	r3, [pc, #352]	; (800351c <HAL_RCC_OscConfig+0x470>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	4a57      	ldr	r2, [pc, #348]	; (800351c <HAL_RCC_OscConfig+0x470>)
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	6713      	str	r3, [r2, #112]	; 0x70
 80033c4:	4b55      	ldr	r3, [pc, #340]	; (800351c <HAL_RCC_OscConfig+0x470>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	4a54      	ldr	r2, [pc, #336]	; (800351c <HAL_RCC_OscConfig+0x470>)
 80033ca:	f023 0304 	bic.w	r3, r3, #4
 80033ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d015      	beq.n	8003404 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7fe fa74 	bl	80018c4 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e0:	f7fe fa70 	bl	80018c4 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e0cb      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f6:	4b49      	ldr	r3, [pc, #292]	; (800351c <HAL_RCC_OscConfig+0x470>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0ee      	beq.n	80033e0 <HAL_RCC_OscConfig+0x334>
 8003402:	e014      	b.n	800342e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003404:	f7fe fa5e 	bl	80018c4 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340a:	e00a      	b.n	8003422 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340c:	f7fe fa5a 	bl	80018c4 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	; 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e0b5      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003422:	4b3e      	ldr	r3, [pc, #248]	; (800351c <HAL_RCC_OscConfig+0x470>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1ee      	bne.n	800340c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800342e:	7dfb      	ldrb	r3, [r7, #23]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d105      	bne.n	8003440 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003434:	4b39      	ldr	r3, [pc, #228]	; (800351c <HAL_RCC_OscConfig+0x470>)
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	4a38      	ldr	r2, [pc, #224]	; (800351c <HAL_RCC_OscConfig+0x470>)
 800343a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80a1 	beq.w	800358c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800344a:	4b34      	ldr	r3, [pc, #208]	; (800351c <HAL_RCC_OscConfig+0x470>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b08      	cmp	r3, #8
 8003454:	d05c      	beq.n	8003510 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d141      	bne.n	80034e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345e:	4b31      	ldr	r3, [pc, #196]	; (8003524 <HAL_RCC_OscConfig+0x478>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fe fa2e 	bl	80018c4 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346c:	f7fe fa2a 	bl	80018c4 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e087      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347e:	4b27      	ldr	r3, [pc, #156]	; (800351c <HAL_RCC_OscConfig+0x470>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69da      	ldr	r2, [r3, #28]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	019b      	lsls	r3, r3, #6
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a0:	085b      	lsrs	r3, r3, #1
 80034a2:	3b01      	subs	r3, #1
 80034a4:	041b      	lsls	r3, r3, #16
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	061b      	lsls	r3, r3, #24
 80034ae:	491b      	ldr	r1, [pc, #108]	; (800351c <HAL_RCC_OscConfig+0x470>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b4:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <HAL_RCC_OscConfig+0x478>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ba:	f7fe fa03 	bl	80018c4 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c2:	f7fe f9ff 	bl	80018c4 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e05c      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d4:	4b11      	ldr	r3, [pc, #68]	; (800351c <HAL_RCC_OscConfig+0x470>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x416>
 80034e0:	e054      	b.n	800358c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e2:	4b10      	ldr	r3, [pc, #64]	; (8003524 <HAL_RCC_OscConfig+0x478>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fe f9ec 	bl	80018c4 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f0:	f7fe f9e8 	bl	80018c4 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e045      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_RCC_OscConfig+0x470>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x444>
 800350e:	e03d      	b.n	800358c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d107      	bne.n	8003528 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e038      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
 800351c:	40023800 	.word	0x40023800
 8003520:	40007000 	.word	0x40007000
 8003524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003528:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <HAL_RCC_OscConfig+0x4ec>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d028      	beq.n	8003588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d121      	bne.n	8003588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d11a      	bne.n	8003588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003558:	4013      	ands	r3, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800355e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003560:	4293      	cmp	r3, r2
 8003562:	d111      	bne.n	8003588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	3b01      	subs	r3, #1
 8003572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d107      	bne.n	8003588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800

0800359c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0cc      	b.n	800374a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035b0:	4b68      	ldr	r3, [pc, #416]	; (8003754 <HAL_RCC_ClockConfig+0x1b8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d90c      	bls.n	80035d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035be:	4b65      	ldr	r3, [pc, #404]	; (8003754 <HAL_RCC_ClockConfig+0x1b8>)
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b63      	ldr	r3, [pc, #396]	; (8003754 <HAL_RCC_ClockConfig+0x1b8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0b8      	b.n	800374a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d020      	beq.n	8003626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f0:	4b59      	ldr	r3, [pc, #356]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	4a58      	ldr	r2, [pc, #352]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003608:	4b53      	ldr	r3, [pc, #332]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4a52      	ldr	r2, [pc, #328]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003614:	4b50      	ldr	r3, [pc, #320]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	494d      	ldr	r1, [pc, #308]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d044      	beq.n	80036bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d119      	bne.n	800367a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e07f      	b.n	800374a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d003      	beq.n	800365a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003656:	2b03      	cmp	r3, #3
 8003658:	d107      	bne.n	800366a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365a:	4b3f      	ldr	r3, [pc, #252]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d109      	bne.n	800367a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e06f      	b.n	800374a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366a:	4b3b      	ldr	r3, [pc, #236]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e067      	b.n	800374a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800367a:	4b37      	ldr	r3, [pc, #220]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f023 0203 	bic.w	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	4934      	ldr	r1, [pc, #208]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	4313      	orrs	r3, r2
 800368a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800368c:	f7fe f91a 	bl	80018c4 <HAL_GetTick>
 8003690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003692:	e00a      	b.n	80036aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003694:	f7fe f916 	bl	80018c4 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e04f      	b.n	800374a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036aa:	4b2b      	ldr	r3, [pc, #172]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 020c 	and.w	r2, r3, #12
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d1eb      	bne.n	8003694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036bc:	4b25      	ldr	r3, [pc, #148]	; (8003754 <HAL_RCC_ClockConfig+0x1b8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d20c      	bcs.n	80036e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ca:	4b22      	ldr	r3, [pc, #136]	; (8003754 <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_RCC_ClockConfig+0x1b8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e032      	b.n	800374a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f0:	4b19      	ldr	r3, [pc, #100]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4916      	ldr	r1, [pc, #88]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800370e:	4b12      	ldr	r3, [pc, #72]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	490e      	ldr	r1, [pc, #56]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003722:	f000 f821 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8003726:	4602      	mov	r2, r0
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	490a      	ldr	r1, [pc, #40]	; (800375c <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	5ccb      	ldrb	r3, [r1, r3]
 8003736:	fa22 f303 	lsr.w	r3, r2, r3
 800373a:	4a09      	ldr	r2, [pc, #36]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe f87a 	bl	800183c <HAL_InitTick>

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40023c00 	.word	0x40023c00
 8003758:	40023800 	.word	0x40023800
 800375c:	0800a6d8 	.word	0x0800a6d8
 8003760:	20000000 	.word	0x20000000
 8003764:	20000004 	.word	0x20000004

08003768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800376c:	b090      	sub	sp, #64	; 0x40
 800376e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003780:	4b59      	ldr	r3, [pc, #356]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	2b08      	cmp	r3, #8
 800378a:	d00d      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x40>
 800378c:	2b08      	cmp	r3, #8
 800378e:	f200 80a1 	bhi.w	80038d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x34>
 8003796:	2b04      	cmp	r3, #4
 8003798:	d003      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800379a:	e09b      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800379c:	4b53      	ldr	r3, [pc, #332]	; (80038ec <HAL_RCC_GetSysClockFreq+0x184>)
 800379e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037a0:	e09b      	b.n	80038da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037a2:	4b53      	ldr	r3, [pc, #332]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80037a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037a6:	e098      	b.n	80038da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037a8:	4b4f      	ldr	r3, [pc, #316]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037b2:	4b4d      	ldr	r3, [pc, #308]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d028      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037be:	4b4a      	ldr	r3, [pc, #296]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	099b      	lsrs	r3, r3, #6
 80037c4:	2200      	movs	r2, #0
 80037c6:	623b      	str	r3, [r7, #32]
 80037c8:	627a      	str	r2, [r7, #36]	; 0x24
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037d0:	2100      	movs	r1, #0
 80037d2:	4b47      	ldr	r3, [pc, #284]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80037d4:	fb03 f201 	mul.w	r2, r3, r1
 80037d8:	2300      	movs	r3, #0
 80037da:	fb00 f303 	mul.w	r3, r0, r3
 80037de:	4413      	add	r3, r2
 80037e0:	4a43      	ldr	r2, [pc, #268]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80037e2:	fba0 1202 	umull	r1, r2, r0, r2
 80037e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e8:	460a      	mov	r2, r1
 80037ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80037ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ee:	4413      	add	r3, r2
 80037f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f4:	2200      	movs	r2, #0
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	61fa      	str	r2, [r7, #28]
 80037fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003802:	f7fd fa21 	bl	8000c48 <__aeabi_uldivmod>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4613      	mov	r3, r2
 800380c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800380e:	e053      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003810:	4b35      	ldr	r3, [pc, #212]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	099b      	lsrs	r3, r3, #6
 8003816:	2200      	movs	r2, #0
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	617a      	str	r2, [r7, #20]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003822:	f04f 0b00 	mov.w	fp, #0
 8003826:	4652      	mov	r2, sl
 8003828:	465b      	mov	r3, fp
 800382a:	f04f 0000 	mov.w	r0, #0
 800382e:	f04f 0100 	mov.w	r1, #0
 8003832:	0159      	lsls	r1, r3, #5
 8003834:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003838:	0150      	lsls	r0, r2, #5
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	ebb2 080a 	subs.w	r8, r2, sl
 8003842:	eb63 090b 	sbc.w	r9, r3, fp
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003852:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003856:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800385a:	ebb2 0408 	subs.w	r4, r2, r8
 800385e:	eb63 0509 	sbc.w	r5, r3, r9
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	00eb      	lsls	r3, r5, #3
 800386c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003870:	00e2      	lsls	r2, r4, #3
 8003872:	4614      	mov	r4, r2
 8003874:	461d      	mov	r5, r3
 8003876:	eb14 030a 	adds.w	r3, r4, sl
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	eb45 030b 	adc.w	r3, r5, fp
 8003880:	607b      	str	r3, [r7, #4]
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800388e:	4629      	mov	r1, r5
 8003890:	028b      	lsls	r3, r1, #10
 8003892:	4621      	mov	r1, r4
 8003894:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003898:	4621      	mov	r1, r4
 800389a:	028a      	lsls	r2, r1, #10
 800389c:	4610      	mov	r0, r2
 800389e:	4619      	mov	r1, r3
 80038a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a2:	2200      	movs	r2, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	60fa      	str	r2, [r7, #12]
 80038a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ac:	f7fd f9cc 	bl	8000c48 <__aeabi_uldivmod>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4613      	mov	r3, r2
 80038b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	0c1b      	lsrs	r3, r3, #16
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	3301      	adds	r3, #1
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80038c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038d2:	e002      	b.n	80038da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <HAL_RCC_GetSysClockFreq+0x184>)
 80038d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3740      	adds	r7, #64	; 0x40
 80038e0:	46bd      	mov	sp, r7
 80038e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038e6:	bf00      	nop
 80038e8:	40023800 	.word	0x40023800
 80038ec:	00f42400 	.word	0x00f42400
 80038f0:	017d7840 	.word	0x017d7840

080038f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d105      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003918:	2b00      	cmp	r3, #0
 800391a:	d035      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800391c:	4b62      	ldr	r3, [pc, #392]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003922:	f7fd ffcf 	bl	80018c4 <HAL_GetTick>
 8003926:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003928:	e008      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800392a:	f7fd ffcb 	bl	80018c4 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e0b0      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800393c:	4b5b      	ldr	r3, [pc, #364]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f0      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	019a      	lsls	r2, r3, #6
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	071b      	lsls	r3, r3, #28
 8003954:	4955      	ldr	r1, [pc, #340]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800395c:	4b52      	ldr	r3, [pc, #328]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003962:	f7fd ffaf 	bl	80018c4 <HAL_GetTick>
 8003966:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003968:	e008      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800396a:	f7fd ffab 	bl	80018c4 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e090      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800397c:	4b4b      	ldr	r3, [pc, #300]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0f0      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 8083 	beq.w	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	4b44      	ldr	r3, [pc, #272]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	4a43      	ldr	r2, [pc, #268]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a4:	6413      	str	r3, [r2, #64]	; 0x40
 80039a6:	4b41      	ldr	r3, [pc, #260]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039b2:	4b3f      	ldr	r3, [pc, #252]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a3e      	ldr	r2, [pc, #248]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039be:	f7fd ff81 	bl	80018c4 <HAL_GetTick>
 80039c2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c6:	f7fd ff7d 	bl	80018c4 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e062      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80039d8:	4b35      	ldr	r3, [pc, #212]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f0      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039e4:	4b31      	ldr	r3, [pc, #196]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ec:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d02f      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d028      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a02:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a0c:	4b29      	ldr	r3, [pc, #164]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a12:	4b28      	ldr	r3, [pc, #160]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a18:	4a24      	ldr	r2, [pc, #144]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a1e:	4b23      	ldr	r3, [pc, #140]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d114      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a2a:	f7fd ff4b 	bl	80018c4 <HAL_GetTick>
 8003a2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a30:	e00a      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a32:	f7fd ff47 	bl	80018c4 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e02a      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a48:	4b18      	ldr	r3, [pc, #96]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0ee      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a60:	d10d      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a76:	490d      	ldr	r1, [pc, #52]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	608b      	str	r3, [r1, #8]
 8003a7c:	e005      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a7e:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a88:	6093      	str	r3, [r2, #8]
 8003a8a:	4b08      	ldr	r3, [pc, #32]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a96:	4905      	ldr	r1, [pc, #20]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	670b      	str	r3, [r1, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	42470068 	.word	0x42470068
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40007000 	.word	0x40007000
 8003ab4:	42470e40 	.word	0x42470e40

08003ab8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d13f      	bne.n	8003b56 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003ad6:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d006      	beq.n	8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aec:	d12f      	bne.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003aee:	4b1f      	ldr	r3, [pc, #124]	; (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003af0:	617b      	str	r3, [r7, #20]
          break;
 8003af2:	e02f      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003af4:	4b1c      	ldr	r3, [pc, #112]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b00:	d108      	bne.n	8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b02:	4b19      	ldr	r3, [pc, #100]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b0a:	4a19      	ldr	r2, [pc, #100]	; (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	e007      	b.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b14:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b1c:	4a15      	ldr	r2, [pc, #84]	; (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b22:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b24:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2a:	099b      	lsrs	r3, r3, #6
 8003b2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3e:	0f1b      	lsrs	r3, r3, #28
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4a:	617b      	str	r3, [r7, #20]
          break;
 8003b4c:	e002      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]
          break;
 8003b52:	bf00      	nop
        }
      }
      break;
 8003b54:	e000      	b.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8003b56:	bf00      	nop
    }
  }
  return frequency;
 8003b58:	697b      	ldr	r3, [r7, #20]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	00bb8000 	.word	0x00bb8000
 8003b70:	017d7840 	.word	0x017d7840
 8003b74:	00f42400 	.word	0x00f42400

08003b78 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e022      	b.n	8003bd0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d105      	bne.n	8003ba2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7fd fc65 	bl	800146c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f814 	bl	8003bd8 <HAL_SD_InitCard>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e00a      	b.n	8003bd0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003bd8:	b5b0      	push	{r4, r5, r7, lr}
 8003bda:	b08e      	sub	sp, #56	; 0x38
 8003bdc:	af04      	add	r7, sp, #16
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003be4:	2300      	movs	r3, #0
 8003be6:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003bf4:	2376      	movs	r3, #118	; 0x76
 8003bf6:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681d      	ldr	r5, [r3, #0]
 8003bfc:	466c      	mov	r4, sp
 8003bfe:	f107 0318 	add.w	r3, r7, #24
 8003c02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c0a:	f107 030c 	add.w	r3, r7, #12
 8003c0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c10:	4628      	mov	r0, r5
 8003c12:	f001 f94b 	bl	8004eac <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003c16:	4b2a      	ldr	r3, [pc, #168]	; (8003cc0 <HAL_SD_InitCard+0xe8>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 f98c 	bl	8004f3e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003c26:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <HAL_SD_InitCard+0xe8>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003c2c:	2002      	movs	r0, #2
 8003c2e:	f7fd fe55 	bl	80018dc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 ff14 	bl	8004a60 <SD_PowerON>
 8003c38:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00b      	beq.n	8003c58 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e02e      	b.n	8003cb6 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fe33 	bl	80048c4 <SD_InitCard>
 8003c5e:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00b      	beq.n	8003c7e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e01b      	b.n	8003cb6 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c86:	4618      	mov	r0, r3
 8003c88:	f001 f9eb 	bl	8005062 <SDMMC_CmdBlockLength>
 8003c8c:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00f      	beq.n	8003cb4 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <HAL_SD_InitCard+0xec>)
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3728      	adds	r7, #40	; 0x28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	422580a0 	.word	0x422580a0
 8003cc4:	004005ff 	.word	0x004005ff

08003cc8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b092      	sub	sp, #72	; 0x48
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003cd6:	f7fd fdf5 	bl	80018c4 <HAL_GetTick>
 8003cda:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d107      	bne.n	8003cfa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e1c5      	b.n	8004086 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	f040 81b8 	bne.w	8004078 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	441a      	add	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d907      	bls.n	8003d2c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e1ac      	b.n	8004086 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2203      	movs	r2, #3
 8003d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d002      	beq.n	8003d4a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	025b      	lsls	r3, r3, #9
 8003d48:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	025b      	lsls	r3, r3, #9
 8003d54:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003d56:	2390      	movs	r3, #144	; 0x90
 8003d58:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003d62:	2301      	movs	r3, #1
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f107 0214 	add.w	r2, r7, #20
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f001 f94a 	bl	800500a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d90a      	bls.n	8003d92 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 f9ae 	bl	80050ea <SDMMC_CmdReadMultiBlock>
 8003d8e:	6478      	str	r0, [r7, #68]	; 0x44
 8003d90:	e009      	b.n	8003da6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f001 f981 	bl	80050a6 <SDMMC_CmdReadSingleBlock>
 8003da4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d012      	beq.n	8003dd2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a7e      	ldr	r2, [pc, #504]	; (8003fac <HAL_SD_ReadBlocks+0x2e4>)
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e159      	b.n	8004086 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003dd6:	e061      	b.n	8003e9c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d03c      	beq.n	8003e60 <HAL_SD_ReadBlocks+0x198>
 8003de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d039      	beq.n	8003e60 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003dec:	2300      	movs	r3, #0
 8003dee:	643b      	str	r3, [r7, #64]	; 0x40
 8003df0:	e033      	b.n	8003e5a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f001 f883 	bl	8004f02 <SDIO_ReadFIFO>
 8003dfc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e04:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e08:	3301      	adds	r3, #1
 8003e0a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e14:	0a1b      	lsrs	r3, r3, #8
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1e:	3301      	adds	r3, #1
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e24:	3b01      	subs	r3, #1
 8003e26:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	0c1b      	lsrs	r3, r3, #16
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e30:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e34:	3301      	adds	r3, #1
 8003e36:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	0e1b      	lsrs	r3, r3, #24
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e46:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e50:	3b01      	subs	r3, #1
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e56:	3301      	adds	r3, #1
 8003e58:	643b      	str	r3, [r7, #64]	; 0x40
 8003e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e5c:	2b07      	cmp	r3, #7
 8003e5e:	d9c8      	bls.n	8003df2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003e60:	f7fd fd30 	bl	80018c4 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d902      	bls.n	8003e76 <HAL_SD_ReadBlocks+0x1ae>
 8003e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d112      	bne.n	8003e9c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a4c      	ldr	r2, [pc, #304]	; (8003fac <HAL_SD_ReadBlocks+0x2e4>)
 8003e7c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e0f4      	b.n	8004086 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea2:	f240 332a 	movw	r3, #810	; 0x32a
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d095      	beq.n	8003dd8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d022      	beq.n	8003f00 <HAL_SD_ReadBlocks+0x238>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d91f      	bls.n	8003f00 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d01b      	beq.n	8003f00 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f001 f973 	bl	80051b8 <SDMMC_CmdStopTransfer>
 8003ed2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d012      	beq.n	8003f00 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a33      	ldr	r2, [pc, #204]	; (8003fac <HAL_SD_ReadBlocks+0x2e4>)
 8003ee0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0c2      	b.n	8004086 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_SD_ReadBlocks+0x254>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d012      	beq.n	8003f42 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a22      	ldr	r2, [pc, #136]	; (8003fac <HAL_SD_ReadBlocks+0x2e4>)
 8003f22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	f043 0208 	orr.w	r2, r3, #8
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e0a1      	b.n	8004086 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d012      	beq.n	8003f76 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a15      	ldr	r2, [pc, #84]	; (8003fac <HAL_SD_ReadBlocks+0x2e4>)
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5c:	f043 0202 	orr.w	r2, r3, #2
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e087      	b.n	8004086 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d064      	beq.n	800404e <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a08      	ldr	r2, [pc, #32]	; (8003fac <HAL_SD_ReadBlocks+0x2e4>)
 8003f8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	f043 0220 	orr.w	r2, r3, #32
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e06d      	b.n	8004086 <HAL_SD_ReadBlocks+0x3be>
 8003faa:	bf00      	nop
 8003fac:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 ffa4 	bl	8004f02 <SDIO_ReadFIFO>
 8003fba:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fdc:	3301      	adds	r3, #1
 8003fde:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	0c1b      	lsrs	r3, r3, #16
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffe:	0e1b      	lsrs	r3, r3, #24
 8004000:	b2da      	uxtb	r2, r3
 8004002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004004:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004008:	3301      	adds	r3, #1
 800400a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800400c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400e:	3b01      	subs	r3, #1
 8004010:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004012:	f7fd fc57 	bl	80018c4 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800401e:	429a      	cmp	r2, r3
 8004020:	d902      	bls.n	8004028 <HAL_SD_ReadBlocks+0x360>
 8004022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004024:	2b00      	cmp	r3, #0
 8004026:	d112      	bne.n	800404e <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a18      	ldr	r2, [pc, #96]	; (8004090 <HAL_SD_ReadBlocks+0x3c8>)
 800402e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e01b      	b.n	8004086 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_SD_ReadBlocks+0x39a>
 800405c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1a6      	bne.n	8003fb0 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f240 523a 	movw	r2, #1338	; 0x53a
 800406a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	e006      	b.n	8004086 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
  }
}
 8004086:	4618      	mov	r0, r3
 8004088:	3748      	adds	r7, #72	; 0x48
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	004005ff 	.word	0x004005ff

08004094 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b092      	sub	sp, #72	; 0x48
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80040a2:	f7fd fc0f 	bl	80018c4 <HAL_GetTick>
 80040a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d107      	bne.n	80040c6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e16d      	b.n	80043a2 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	f040 8160 	bne.w	8004394 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80040da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	441a      	add	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d907      	bls.n	80040f8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e154      	b.n	80043a2 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2203      	movs	r2, #3
 80040fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2200      	movs	r2, #0
 8004106:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410c:	2b01      	cmp	r3, #1
 800410e:	d002      	beq.n	8004116 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004112:	025b      	lsls	r3, r3, #9
 8004114:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	025b      	lsls	r3, r3, #9
 8004120:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004122:	2390      	movs	r3, #144	; 0x90
 8004124:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004126:	2300      	movs	r3, #0
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800412a:	2300      	movs	r3, #0
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800412e:	2301      	movs	r3, #1
 8004130:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f107 0218 	add.w	r2, r7, #24
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f000 ff64 	bl	800500a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d90a      	bls.n	800415e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004154:	4618      	mov	r0, r3
 8004156:	f001 f80c 	bl	8005172 <SDMMC_CmdWriteMultiBlock>
 800415a:	6478      	str	r0, [r7, #68]	; 0x44
 800415c:	e009      	b.n	8004172 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2210      	movs	r2, #16
 8004162:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800416a:	4618      	mov	r0, r3
 800416c:	f000 ffdf 	bl	800512e <SDMMC_CmdWriteSingleBlock>
 8004170:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004174:	2b00      	cmp	r3, #0
 8004176:	d012      	beq.n	800419e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a8b      	ldr	r2, [pc, #556]	; (80043ac <HAL_SD_WriteBlocks+0x318>)
 800417e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004186:	431a      	orrs	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e101      	b.n	80043a2 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80041a2:	e065      	b.n	8004270 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d040      	beq.n	8004234 <HAL_SD_WriteBlocks+0x1a0>
 80041b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d03d      	beq.n	8004234 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80041b8:	2300      	movs	r3, #0
 80041ba:	643b      	str	r3, [r7, #64]	; 0x40
 80041bc:	e037      	b.n	800422e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80041be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80041c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c6:	3301      	adds	r3, #1
 80041c8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80041ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041cc:	3b01      	subs	r3, #1
 80041ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80041d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	021a      	lsls	r2, r3, #8
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80041dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041de:	3301      	adds	r3, #1
 80041e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80041e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e4:	3b01      	subs	r3, #1
 80041e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80041e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	041a      	lsls	r2, r3, #16
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80041f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f6:	3301      	adds	r3, #1
 80041f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80041fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041fc:	3b01      	subs	r3, #1
 80041fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	061a      	lsls	r2, r3, #24
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800420c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420e:	3301      	adds	r3, #1
 8004210:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004214:	3b01      	subs	r3, #1
 8004216:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f107 0214 	add.w	r2, r7, #20
 8004220:	4611      	mov	r1, r2
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fe7a 	bl	8004f1c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800422a:	3301      	adds	r3, #1
 800422c:	643b      	str	r3, [r7, #64]	; 0x40
 800422e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004230:	2b07      	cmp	r3, #7
 8004232:	d9c4      	bls.n	80041be <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004234:	f7fd fb46 	bl	80018c4 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004240:	429a      	cmp	r2, r3
 8004242:	d902      	bls.n	800424a <HAL_SD_WriteBlocks+0x1b6>
 8004244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004246:	2b00      	cmp	r3, #0
 8004248:	d112      	bne.n	8004270 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a57      	ldr	r2, [pc, #348]	; (80043ac <HAL_SD_WriteBlocks+0x318>)
 8004250:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004258:	431a      	orrs	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e098      	b.n	80043a2 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004276:	f240 331a 	movw	r3, #794	; 0x31a
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d091      	beq.n	80041a4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d022      	beq.n	80042d4 <HAL_SD_WriteBlocks+0x240>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d91f      	bls.n	80042d4 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004298:	2b03      	cmp	r3, #3
 800429a:	d01b      	beq.n	80042d4 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 ff89 	bl	80051b8 <SDMMC_CmdStopTransfer>
 80042a6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80042a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d012      	beq.n	80042d4 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a3e      	ldr	r2, [pc, #248]	; (80043ac <HAL_SD_WriteBlocks+0x318>)
 80042b4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042bc:	431a      	orrs	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e066      	b.n	80043a2 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <HAL_SD_WriteBlocks+0x25c>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d012      	beq.n	8004316 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a2d      	ldr	r2, [pc, #180]	; (80043ac <HAL_SD_WriteBlocks+0x318>)
 80042f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	f043 0208 	orr.w	r2, r3, #8
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e045      	b.n	80043a2 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d012      	beq.n	800434a <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a20      	ldr	r2, [pc, #128]	; (80043ac <HAL_SD_WriteBlocks+0x318>)
 800432a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	f043 0202 	orr.w	r2, r3, #2
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e02b      	b.n	80043a2 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b00      	cmp	r3, #0
 8004356:	d012      	beq.n	800437e <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a13      	ldr	r2, [pc, #76]	; (80043ac <HAL_SD_WriteBlocks+0x318>)
 800435e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	f043 0210 	orr.w	r2, r3, #16
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e011      	b.n	80043a2 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f240 523a 	movw	r2, #1338	; 0x53a
 8004386:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	e006      	b.n	80043a2 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
  }
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3748      	adds	r7, #72	; 0x48
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	004005ff 	.word	0x004005ff

080043b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043be:	0f9b      	lsrs	r3, r3, #30
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ca:	0e9b      	lsrs	r3, r3, #26
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043dc:	0e1b      	lsrs	r3, r3, #24
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ee:	0c1b      	lsrs	r3, r3, #16
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043fa:	0a1b      	lsrs	r3, r3, #8
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004406:	b2da      	uxtb	r2, r3
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004410:	0d1b      	lsrs	r3, r3, #20
 8004412:	b29a      	uxth	r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800441c:	0c1b      	lsrs	r3, r3, #16
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	b2da      	uxtb	r2, r3
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800442e:	0bdb      	lsrs	r3, r3, #15
 8004430:	b2db      	uxtb	r3, r3
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	b2da      	uxtb	r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004440:	0b9b      	lsrs	r3, r3, #14
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	b2da      	uxtb	r2, r3
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004452:	0b5b      	lsrs	r3, r3, #13
 8004454:	b2db      	uxtb	r3, r3
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	b2da      	uxtb	r2, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004464:	0b1b      	lsrs	r3, r3, #12
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	b2da      	uxtb	r2, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2200      	movs	r2, #0
 8004476:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447c:	2b00      	cmp	r3, #0
 800447e:	d163      	bne.n	8004548 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004484:	009a      	lsls	r2, r3, #2
 8004486:	f640 73fc 	movw	r3, #4092	; 0xffc
 800448a:	4013      	ands	r3, r2
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004490:	0f92      	lsrs	r2, r2, #30
 8004492:	431a      	orrs	r2, r3
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800449c:	0edb      	lsrs	r3, r3, #27
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ae:	0e1b      	lsrs	r3, r3, #24
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c0:	0d5b      	lsrs	r3, r3, #21
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d2:	0c9b      	lsrs	r3, r3, #18
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044e4:	0bdb      	lsrs	r3, r3, #15
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	7e1b      	ldrb	r3, [r3, #24]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	3302      	adds	r3, #2
 8004508:	2201      	movs	r2, #1
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004512:	fb03 f202 	mul.w	r2, r3, r2
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	7a1b      	ldrb	r3, [r3, #8]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	2201      	movs	r2, #1
 8004526:	409a      	lsls	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004534:	0a52      	lsrs	r2, r2, #9
 8004536:	fb03 f202 	mul.w	r2, r3, r2
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004544:	661a      	str	r2, [r3, #96]	; 0x60
 8004546:	e031      	b.n	80045ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454c:	2b01      	cmp	r3, #1
 800454e:	d11d      	bne.n	800458c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004554:	041b      	lsls	r3, r3, #16
 8004556:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800455e:	0c1b      	lsrs	r3, r3, #16
 8004560:	431a      	orrs	r2, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	3301      	adds	r3, #1
 800456c:	029a      	lsls	r2, r3, #10
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004580:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	661a      	str	r2, [r3, #96]	; 0x60
 800458a:	e00f      	b.n	80045ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a58      	ldr	r2, [pc, #352]	; (80046f4 <HAL_SD_GetCardCSD+0x344>)
 8004592:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e09d      	b.n	80046e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b0:	0b9b      	lsrs	r3, r3, #14
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c2:	09db      	lsrs	r3, r3, #7
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e4:	0fdb      	lsrs	r3, r3, #31
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	0f5b      	lsrs	r3, r3, #29
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f003 0303 	and.w	r3, r3, #3
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004602:	0e9b      	lsrs	r3, r3, #26
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	b2da      	uxtb	r2, r3
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	0d9b      	lsrs	r3, r3, #22
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	b2da      	uxtb	r2, r3
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	0d5b      	lsrs	r3, r3, #21
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	b2da      	uxtb	r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	0c1b      	lsrs	r3, r3, #16
 8004644:	b2db      	uxtb	r3, r3
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	b2da      	uxtb	r2, r3
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	0bdb      	lsrs	r3, r3, #15
 8004658:	b2db      	uxtb	r3, r3
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	b2da      	uxtb	r2, r3
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	0b9b      	lsrs	r3, r3, #14
 800466c:	b2db      	uxtb	r3, r3
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	b2da      	uxtb	r2, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	0b5b      	lsrs	r3, r3, #13
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	b2da      	uxtb	r2, r3
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	0b1b      	lsrs	r3, r3, #12
 8004694:	b2db      	uxtb	r3, r3
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	b2da      	uxtb	r2, r3
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	0a9b      	lsrs	r3, r3, #10
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	0a1b      	lsrs	r3, r3, #8
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ce:	085b      	lsrs	r3, r3, #1
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	004005ff 	.word	0x004005ff

080046f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004750:	b5b0      	push	{r4, r5, r7, lr}
 8004752:	b08e      	sub	sp, #56	; 0x38
 8004754:	af04      	add	r7, sp, #16
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2203      	movs	r2, #3
 8004764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476c:	2b03      	cmp	r3, #3
 800476e:	d02e      	beq.n	80047ce <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004776:	d106      	bne.n	8004786 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	639a      	str	r2, [r3, #56]	; 0x38
 8004784:	e029      	b.n	80047da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800478c:	d10a      	bne.n	80047a4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fa1c 	bl	8004bcc <SD_WideBus_Enable>
 8004794:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	639a      	str	r2, [r3, #56]	; 0x38
 80047a2:	e01a      	b.n	80047da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fa59 	bl	8004c62 <SD_WideBus_Disable>
 80047b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	639a      	str	r2, [r3, #56]	; 0x38
 80047be:	e00c      	b.n	80047da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	639a      	str	r2, [r3, #56]	; 0x38
 80047cc:	e005      	b.n	80047da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a26      	ldr	r2, [pc, #152]	; (8004880 <HAL_SD_ConfigWideBusOperation+0x130>)
 80047e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80047f8:	e01f      	b.n	800483a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681d      	ldr	r5, [r3, #0]
 8004820:	466c      	mov	r4, sp
 8004822:	f107 0314 	add.w	r3, r7, #20
 8004826:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800482a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800482e:	f107 0308 	add.w	r3, r7, #8
 8004832:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004834:	4628      	mov	r0, r5
 8004836:	f000 fb39 	bl	8004eac <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fc0d 	bl	8005062 <SDMMC_CmdBlockLength>
 8004848:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00c      	beq.n	800486a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a0a      	ldr	r2, [pc, #40]	; (8004880 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004856:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004876:	4618      	mov	r0, r3
 8004878:	3728      	adds	r7, #40	; 0x28
 800487a:	46bd      	mov	sp, r7
 800487c:	bdb0      	pop	{r4, r5, r7, pc}
 800487e:	bf00      	nop
 8004880:	004005ff 	.word	0x004005ff

08004884 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004890:	f107 030c 	add.w	r3, r7, #12
 8004894:	4619      	mov	r1, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f970 	bl	8004b7c <SD_SendStatus>
 800489c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	0a5b      	lsrs	r3, r3, #9
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80048ba:	693b      	ldr	r3, [r7, #16]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80048c4:	b5b0      	push	{r4, r5, r7, lr}
 80048c6:	b094      	sub	sp, #80	; 0x50
 80048c8:	af04      	add	r7, sp, #16
 80048ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80048cc:	2301      	movs	r3, #1
 80048ce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fb40 	bl	8004f5a <SDIO_GetPowerState>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d102      	bne.n	80048e6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80048e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80048e4:	e0b8      	b.n	8004a58 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	d02f      	beq.n	800494e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fd6a 	bl	80053cc <SDMMC_CmdSendCID>
 80048f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <SD_InitCard+0x40>
    {
      return errorstate;
 8004900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004902:	e0a9      	b.n	8004a58 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2100      	movs	r1, #0
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fb6a 	bl	8004fe4 <SDIO_GetResponse>
 8004910:	4602      	mov	r2, r0
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2104      	movs	r1, #4
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fb61 	bl	8004fe4 <SDIO_GetResponse>
 8004922:	4602      	mov	r2, r0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2108      	movs	r1, #8
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fb58 	bl	8004fe4 <SDIO_GetResponse>
 8004934:	4602      	mov	r2, r0
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	210c      	movs	r1, #12
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fb4f 	bl	8004fe4 <SDIO_GetResponse>
 8004946:	4602      	mov	r2, r0
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004952:	2b03      	cmp	r3, #3
 8004954:	d00d      	beq.n	8004972 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f107 020e 	add.w	r2, r7, #14
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f000 fd70 	bl	8005446 <SDMMC_CmdSetRelAdd>
 8004966:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <SD_InitCard+0xae>
    {
      return errorstate;
 800496e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004970:	e072      	b.n	8004a58 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	2b03      	cmp	r3, #3
 8004978:	d036      	beq.n	80049e8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800497a:	89fb      	ldrh	r3, [r7, #14]
 800497c:	461a      	mov	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498a:	041b      	lsls	r3, r3, #16
 800498c:	4619      	mov	r1, r3
 800498e:	4610      	mov	r0, r2
 8004990:	f000 fd3a 	bl	8005408 <SDMMC_CmdSendCSD>
 8004994:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800499c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499e:	e05b      	b.n	8004a58 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fb1c 	bl	8004fe4 <SDIO_GetResponse>
 80049ac:	4602      	mov	r2, r0
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2104      	movs	r1, #4
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fb13 	bl	8004fe4 <SDIO_GetResponse>
 80049be:	4602      	mov	r2, r0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2108      	movs	r1, #8
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fb0a 	bl	8004fe4 <SDIO_GetResponse>
 80049d0:	4602      	mov	r2, r0
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	210c      	movs	r1, #12
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fb01 	bl	8004fe4 <SDIO_GetResponse>
 80049e2:	4602      	mov	r2, r0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2104      	movs	r1, #4
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 faf8 	bl	8004fe4 <SDIO_GetResponse>
 80049f4:	4603      	mov	r3, r0
 80049f6:	0d1a      	lsrs	r2, r3, #20
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80049fc:	f107 0310 	add.w	r3, r7, #16
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff fcd4 	bl	80043b0 <HAL_SD_GetCardCSD>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a12:	e021      	b.n	8004a58 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6819      	ldr	r1, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1c:	041b      	lsls	r3, r3, #16
 8004a1e:	2200      	movs	r2, #0
 8004a20:	461c      	mov	r4, r3
 8004a22:	4615      	mov	r5, r2
 8004a24:	4622      	mov	r2, r4
 8004a26:	462b      	mov	r3, r5
 8004a28:	4608      	mov	r0, r1
 8004a2a:	f000 fbe7 	bl	80051fc <SDMMC_CmdSelDesel>
 8004a2e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <SD_InitCard+0x176>
  {
    return errorstate;
 8004a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a38:	e00e      	b.n	8004a58 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681d      	ldr	r5, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	466c      	mov	r4, sp
 8004a42:	f103 0210 	add.w	r2, r3, #16
 8004a46:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a50:	4628      	mov	r0, r5
 8004a52:	f000 fa2b 	bl	8004eac <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3740      	adds	r7, #64	; 0x40
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bdb0      	pop	{r4, r5, r7, pc}

08004a60 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	2300      	movs	r3, #0
 8004a72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fbe2 	bl	8005242 <SDMMC_CmdGoIdleState>
 8004a7e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	e072      	b.n	8004b70 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fbf5 	bl	800527e <SDMMC_CmdOperCond>
 8004a94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00d      	beq.n	8004ab8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fbcb 	bl	8005242 <SDMMC_CmdGoIdleState>
 8004aac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <SD_PowerON+0x5e>
    {
      return errorstate;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	e05b      	b.n	8004b70 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d137      	bne.n	8004b36 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2100      	movs	r1, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fbf5 	bl	80052bc <SDMMC_CmdAppCommand>
 8004ad2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d02d      	beq.n	8004b36 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ada:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004ade:	e047      	b.n	8004b70 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fbe8 	bl	80052bc <SDMMC_CmdAppCommand>
 8004aec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <SD_PowerON+0x98>
    {
      return errorstate;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	e03b      	b.n	8004b70 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	491e      	ldr	r1, [pc, #120]	; (8004b78 <SD_PowerON+0x118>)
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fbfe 	bl	8005300 <SDMMC_CmdAppOperCommand>
 8004b04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b10:	e02e      	b.n	8004b70 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fa63 	bl	8004fe4 <SDIO_GetResponse>
 8004b1e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	0fdb      	lsrs	r3, r3, #31
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <SD_PowerON+0xcc>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <SD_PowerON+0xce>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	613b      	str	r3, [r7, #16]

    count++;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	3301      	adds	r3, #1
 8004b34:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d802      	bhi.n	8004b46 <SD_PowerON+0xe6>
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0cc      	beq.n	8004ae0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d902      	bls.n	8004b56 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b54:	e00c      	b.n	8004b70 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	645a      	str	r2, [r3, #68]	; 0x44
 8004b66:	e002      	b.n	8004b6e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	c1100000 	.word	0xc1100000

08004b7c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004b8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b90:	e018      	b.n	8004bc4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	f000 fc72 	bl	8005488 <SDMMC_CmdSendStatus>
 8004ba4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	e009      	b.n	8004bc4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fa14 	bl	8004fe4 <SDIO_GetResponse>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2100      	movs	r1, #0
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 f9fe 	bl	8004fe4 <SDIO_GetResponse>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bf2:	d102      	bne.n	8004bfa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004bf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bf8:	e02f      	b.n	8004c5a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004bfa:	f107 030c 	add.w	r3, r7, #12
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f879 	bl	8004cf8 <SD_FindSCR>
 8004c06:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	e023      	b.n	8004c5a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01c      	beq.n	8004c56 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	4619      	mov	r1, r3
 8004c28:	4610      	mov	r0, r2
 8004c2a:	f000 fb47 	bl	80052bc <SDMMC_CmdAppCommand>
 8004c2e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	e00f      	b.n	8004c5a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2102      	movs	r1, #2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fb80 	bl	8005346 <SDMMC_CmdBusWidth>
 8004c46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	e003      	b.n	8004c5a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004c52:	2300      	movs	r3, #0
 8004c54:	e001      	b.n	8004c5a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b086      	sub	sp, #24
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2100      	movs	r1, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 f9b3 	bl	8004fe4 <SDIO_GetResponse>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c88:	d102      	bne.n	8004c90 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c8e:	e02f      	b.n	8004cf0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c90:	f107 030c 	add.w	r3, r7, #12
 8004c94:	4619      	mov	r1, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f82e 	bl	8004cf8 <SD_FindSCR>
 8004c9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	e023      	b.n	8004cf0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01c      	beq.n	8004cec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f000 fafc 	bl	80052bc <SDMMC_CmdAppCommand>
 8004cc4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	e00f      	b.n	8004cf0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fb35 	bl	8005346 <SDMMC_CmdBusWidth>
 8004cdc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	e003      	b.n	8004cf0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e001      	b.n	8004cf0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004cec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004cf8:	b590      	push	{r4, r7, lr}
 8004cfa:	b08f      	sub	sp, #60	; 0x3c
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004d02:	f7fc fddf 	bl	80018c4 <HAL_GetTick>
 8004d06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	2300      	movs	r3, #0
 8004d12:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2108      	movs	r1, #8
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 f99f 	bl	8005062 <SDMMC_CmdBlockLength>
 8004d24:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	e0b9      	b.n	8004ea4 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f000 fabd 	bl	80052bc <SDMMC_CmdAppCommand>
 8004d42:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <SD_FindSCR+0x56>
  {
    return errorstate;
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	e0aa      	b.n	8004ea4 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d52:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004d54:	2308      	movs	r3, #8
 8004d56:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004d58:	2330      	movs	r3, #48	; 0x30
 8004d5a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004d64:	2301      	movs	r3, #1
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f107 0210 	add.w	r2, r7, #16
 8004d70:	4611      	mov	r1, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 f949 	bl	800500a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fb04 	bl	800538a <SDMMC_CmdSendSCR>
 8004d82:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d02a      	beq.n	8004de0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	e08a      	b.n	8004ea4 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00f      	beq.n	8004dbc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	f107 0208 	add.w	r2, r7, #8
 8004da8:	18d4      	adds	r4, r2, r3
 8004daa:	4608      	mov	r0, r1
 8004dac:	f000 f8a9 	bl	8004f02 <SDIO_ReadFIFO>
 8004db0:	4603      	mov	r3, r0
 8004db2:	6023      	str	r3, [r4, #0]
      index++;
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	3301      	adds	r3, #1
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dba:	e006      	b.n	8004dca <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d012      	beq.n	8004df0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8004dca:	f7fc fd7b 	bl	80018c4 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d102      	bne.n	8004de0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004dda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004dde:	e061      	b.n	8004ea4 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0cf      	beq.n	8004d8e <SD_FindSCR+0x96>
 8004dee:	e000      	b.n	8004df2 <SD_FindSCR+0xfa>
      break;
 8004df0:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d106      	bne.n	8004e0e <SD_FindSCR+0x116>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d005      	beq.n	8004e1a <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2208      	movs	r2, #8
 8004e14:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004e16:	2308      	movs	r3, #8
 8004e18:	e044      	b.n	8004ea4 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e30:	2302      	movs	r3, #2
 8004e32:	e037      	b.n	8004ea4 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d005      	beq.n	8004e4e <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2220      	movs	r2, #32
 8004e48:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004e4a:	2320      	movs	r3, #32
 8004e4c:	e02a      	b.n	8004ea4 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e56:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	061a      	lsls	r2, r3, #24
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e64:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	0a1b      	lsrs	r3, r3, #8
 8004e6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e6e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	0e1b      	lsrs	r3, r3, #24
 8004e74:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e78:	601a      	str	r2, [r3, #0]
    scr++;
 8004e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	061a      	lsls	r2, r3, #24
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	021b      	lsls	r3, r3, #8
 8004e88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e8c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	0a1b      	lsrs	r3, r3, #8
 8004e92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e96:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	0e1b      	lsrs	r3, r3, #24
 8004e9c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	373c      	adds	r7, #60	; 0x3c
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd90      	pop	{r4, r7, pc}

08004eac <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004eac:	b084      	sub	sp, #16
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	f107 001c 	add.w	r0, r7, #28
 8004eba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004ec2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004ec6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004eca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004ece:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004ed2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004ed6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004ee6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	b004      	add	sp, #16
 8004f00:	4770      	bx	lr

08004f02 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2203      	movs	r2, #3
 8004f4a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0303 	and.w	r3, r3, #3
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b085      	sub	sp, #20
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f94:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004f9a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004fa0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004fb0:	f023 030f 	bic.w	r3, r3, #15
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	b2db      	uxtb	r3, r3
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3314      	adds	r3, #20
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
}  
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800500a:	b480      	push	{r7}
 800500c:	b085      	sub	sp, #20
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005030:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005036:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800503c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005054:	2300      	movs	r3, #0

}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b088      	sub	sp, #32
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005070:	2310      	movs	r3, #16
 8005072:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005074:	2340      	movs	r3, #64	; 0x40
 8005076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005078:	2300      	movs	r3, #0
 800507a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800507c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005080:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005082:	f107 0308 	add.w	r3, r7, #8
 8005086:	4619      	mov	r1, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff ff74 	bl	8004f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800508e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005092:	2110      	movs	r1, #16
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fa19 	bl	80054cc <SDMMC_GetCmdResp1>
 800509a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800509c:	69fb      	ldr	r3, [r7, #28]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3720      	adds	r7, #32
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b088      	sub	sp, #32
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80050b4:	2311      	movs	r3, #17
 80050b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050b8:	2340      	movs	r3, #64	; 0x40
 80050ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050bc:	2300      	movs	r3, #0
 80050be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050c6:	f107 0308 	add.w	r3, r7, #8
 80050ca:	4619      	mov	r1, r3
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff ff52 	bl	8004f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80050d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d6:	2111      	movs	r1, #17
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f9f7 	bl	80054cc <SDMMC_GetCmdResp1>
 80050de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050e0:	69fb      	ldr	r3, [r7, #28]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b088      	sub	sp, #32
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80050f8:	2312      	movs	r3, #18
 80050fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050fc:	2340      	movs	r3, #64	; 0x40
 80050fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005100:	2300      	movs	r3, #0
 8005102:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005108:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800510a:	f107 0308 	add.w	r3, r7, #8
 800510e:	4619      	mov	r1, r3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff ff30 	bl	8004f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005116:	f241 3288 	movw	r2, #5000	; 0x1388
 800511a:	2112      	movs	r1, #18
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f9d5 	bl	80054cc <SDMMC_GetCmdResp1>
 8005122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005124:	69fb      	ldr	r3, [r7, #28]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3720      	adds	r7, #32
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b088      	sub	sp, #32
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800513c:	2318      	movs	r3, #24
 800513e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005140:	2340      	movs	r3, #64	; 0x40
 8005142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800514c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800514e:	f107 0308 	add.w	r3, r7, #8
 8005152:	4619      	mov	r1, r3
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff ff0e 	bl	8004f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800515a:	f241 3288 	movw	r2, #5000	; 0x1388
 800515e:	2118      	movs	r1, #24
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f9b3 	bl	80054cc <SDMMC_GetCmdResp1>
 8005166:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005168:	69fb      	ldr	r3, [r7, #28]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3720      	adds	r7, #32
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b088      	sub	sp, #32
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005180:	2319      	movs	r3, #25
 8005182:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005184:	2340      	movs	r3, #64	; 0x40
 8005186:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800518c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005190:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005192:	f107 0308 	add.w	r3, r7, #8
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff feec 	bl	8004f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800519e:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a2:	2119      	movs	r1, #25
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f991 	bl	80054cc <SDMMC_GetCmdResp1>
 80051aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051ac:	69fb      	ldr	r3, [r7, #28]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80051c4:	230c      	movs	r3, #12
 80051c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051c8:	2340      	movs	r3, #64	; 0x40
 80051ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051cc:	2300      	movs	r3, #0
 80051ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051d6:	f107 0308 	add.w	r3, r7, #8
 80051da:	4619      	mov	r1, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff feca 	bl	8004f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80051e2:	4a05      	ldr	r2, [pc, #20]	; (80051f8 <SDMMC_CmdStopTransfer+0x40>)
 80051e4:	210c      	movs	r1, #12
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f970 	bl	80054cc <SDMMC_GetCmdResp1>
 80051ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051ee:	69fb      	ldr	r3, [r7, #28]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3720      	adds	r7, #32
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	05f5e100 	.word	0x05f5e100

080051fc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	; 0x28
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800520c:	2307      	movs	r3, #7
 800520e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005210:	2340      	movs	r3, #64	; 0x40
 8005212:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005214:	2300      	movs	r3, #0
 8005216:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800521c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800521e:	f107 0310 	add.w	r3, r7, #16
 8005222:	4619      	mov	r1, r3
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f7ff fea6 	bl	8004f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800522a:	f241 3288 	movw	r2, #5000	; 0x1388
 800522e:	2107      	movs	r1, #7
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f94b 	bl	80054cc <SDMMC_GetCmdResp1>
 8005236:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800523a:	4618      	mov	r0, r3
 800523c:	3728      	adds	r7, #40	; 0x28
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b088      	sub	sp, #32
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005252:	2300      	movs	r3, #0
 8005254:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005256:	2300      	movs	r3, #0
 8005258:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800525a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800525e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005260:	f107 0308 	add.w	r3, r7, #8
 8005264:	4619      	mov	r1, r3
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff fe85 	bl	8004f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fb65 	bl	800593c <SDMMC_GetCmdError>
 8005272:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005274:	69fb      	ldr	r3, [r7, #28]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3720      	adds	r7, #32
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b088      	sub	sp, #32
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005286:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800528a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800528c:	2308      	movs	r3, #8
 800528e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005290:	2340      	movs	r3, #64	; 0x40
 8005292:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005294:	2300      	movs	r3, #0
 8005296:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800529c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800529e:	f107 0308 	add.w	r3, r7, #8
 80052a2:	4619      	mov	r1, r3
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff fe66 	bl	8004f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 faf8 	bl	80058a0 <SDMMC_GetCmdResp7>
 80052b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052b2:	69fb      	ldr	r3, [r7, #28]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3720      	adds	r7, #32
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80052ca:	2337      	movs	r3, #55	; 0x37
 80052cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052ce:	2340      	movs	r3, #64	; 0x40
 80052d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052dc:	f107 0308 	add.w	r3, r7, #8
 80052e0:	4619      	mov	r1, r3
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff fe47 	bl	8004f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80052e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ec:	2137      	movs	r1, #55	; 0x37
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f8ec 	bl	80054cc <SDMMC_GetCmdResp1>
 80052f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052f6:	69fb      	ldr	r3, [r7, #28]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3720      	adds	r7, #32
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005310:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005314:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005316:	2329      	movs	r3, #41	; 0x29
 8005318:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800531a:	2340      	movs	r3, #64	; 0x40
 800531c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800531e:	2300      	movs	r3, #0
 8005320:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005326:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005328:	f107 0308 	add.w	r3, r7, #8
 800532c:	4619      	mov	r1, r3
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff fe21 	bl	8004f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f9ff 	bl	8005738 <SDMMC_GetCmdResp3>
 800533a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800533c:	69fb      	ldr	r3, [r7, #28]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b088      	sub	sp, #32
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005354:	2306      	movs	r3, #6
 8005356:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005358:	2340      	movs	r3, #64	; 0x40
 800535a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800535c:	2300      	movs	r3, #0
 800535e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005364:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005366:	f107 0308 	add.w	r3, r7, #8
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff fe02 	bl	8004f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005372:	f241 3288 	movw	r2, #5000	; 0x1388
 8005376:	2106      	movs	r1, #6
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f8a7 	bl	80054cc <SDMMC_GetCmdResp1>
 800537e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005380:	69fb      	ldr	r3, [r7, #28]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3720      	adds	r7, #32
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b088      	sub	sp, #32
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005396:	2333      	movs	r3, #51	; 0x33
 8005398:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800539a:	2340      	movs	r3, #64	; 0x40
 800539c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053a8:	f107 0308 	add.w	r3, r7, #8
 80053ac:	4619      	mov	r1, r3
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff fde1 	bl	8004f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80053b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b8:	2133      	movs	r1, #51	; 0x33
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f886 	bl	80054cc <SDMMC_GetCmdResp1>
 80053c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053c2:	69fb      	ldr	r3, [r7, #28]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3720      	adds	r7, #32
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80053d8:	2302      	movs	r3, #2
 80053da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80053dc:	23c0      	movs	r3, #192	; 0xc0
 80053de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053e0:	2300      	movs	r3, #0
 80053e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053ea:	f107 0308 	add.w	r3, r7, #8
 80053ee:	4619      	mov	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff fdc0 	bl	8004f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f956 	bl	80056a8 <SDMMC_GetCmdResp2>
 80053fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053fe:	69fb      	ldr	r3, [r7, #28]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3720      	adds	r7, #32
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005416:	2309      	movs	r3, #9
 8005418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800541a:	23c0      	movs	r3, #192	; 0xc0
 800541c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005426:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005428:	f107 0308 	add.w	r3, r7, #8
 800542c:	4619      	mov	r1, r3
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff fda1 	bl	8004f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f937 	bl	80056a8 <SDMMC_GetCmdResp2>
 800543a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800543c:	69fb      	ldr	r3, [r7, #28]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3720      	adds	r7, #32
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b088      	sub	sp, #32
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005454:	2303      	movs	r3, #3
 8005456:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005458:	2340      	movs	r3, #64	; 0x40
 800545a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005464:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005466:	f107 0308 	add.w	r3, r7, #8
 800546a:	4619      	mov	r1, r3
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff fd82 	bl	8004f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	2103      	movs	r1, #3
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f99c 	bl	80057b4 <SDMMC_GetCmdResp6>
 800547c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800547e:	69fb      	ldr	r3, [r7, #28]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3720      	adds	r7, #32
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005496:	230d      	movs	r3, #13
 8005498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800549a:	2340      	movs	r3, #64	; 0x40
 800549c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054a8:	f107 0308 	add.w	r3, r7, #8
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff fd61 	bl	8004f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80054b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b8:	210d      	movs	r1, #13
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f806 	bl	80054cc <SDMMC_GetCmdResp1>
 80054c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054c2:	69fb      	ldr	r3, [r7, #28]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3720      	adds	r7, #32
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	460b      	mov	r3, r1
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80054da:	4b70      	ldr	r3, [pc, #448]	; (800569c <SDMMC_GetCmdResp1+0x1d0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a70      	ldr	r2, [pc, #448]	; (80056a0 <SDMMC_GetCmdResp1+0x1d4>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	0a5a      	lsrs	r2, r3, #9
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	fb02 f303 	mul.w	r3, r2, r3
 80054ec:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	1e5a      	subs	r2, r3, #1
 80054f2:	61fa      	str	r2, [r7, #28]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d102      	bne.n	80054fe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054fc:	e0c9      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005502:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0ef      	beq.n	80054ee <SDMMC_GetCmdResp1+0x22>
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1ea      	bne.n	80054ee <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d004      	beq.n	800552e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2204      	movs	r2, #4
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800552a:	2304      	movs	r3, #4
 800552c:	e0b1      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d004      	beq.n	8005544 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005540:	2301      	movs	r3, #1
 8005542:	e0a6      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	22c5      	movs	r2, #197	; 0xc5
 8005548:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f7ff fd3d 	bl	8004fca <SDIO_GetCommandResponse>
 8005550:	4603      	mov	r3, r0
 8005552:	461a      	mov	r2, r3
 8005554:	7afb      	ldrb	r3, [r7, #11]
 8005556:	4293      	cmp	r3, r2
 8005558:	d001      	beq.n	800555e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800555a:	2301      	movs	r3, #1
 800555c:	e099      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800555e:	2100      	movs	r1, #0
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f7ff fd3f 	bl	8004fe4 <SDIO_GetResponse>
 8005566:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4b4e      	ldr	r3, [pc, #312]	; (80056a4 <SDMMC_GetCmdResp1+0x1d8>)
 800556c:	4013      	ands	r3, r2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005572:	2300      	movs	r3, #0
 8005574:	e08d      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b00      	cmp	r3, #0
 800557a:	da02      	bge.n	8005582 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800557c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005580:	e087      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800558c:	2340      	movs	r3, #64	; 0x40
 800558e:	e080      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800559a:	2380      	movs	r3, #128	; 0x80
 800559c:	e079      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80055a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055ac:	e071      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80055b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055bc:	e069      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80055c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055cc:	e061      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80055d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055dc:	e059      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80055e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055ec:	e051      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80055f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055fc:	e049      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005608:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800560c:	e041      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005618:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800561c:	e039      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800562c:	e031      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005638:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800563c:	e029      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005648:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800564c:	e021      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005658:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800565c:	e019      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005668:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800566c:	e011      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005678:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800567c:	e009      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005688:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800568c:	e001      	b.n	8005692 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800568e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20000000 	.word	0x20000000
 80056a0:	10624dd3 	.word	0x10624dd3
 80056a4:	fdffe008 	.word	0xfdffe008

080056a8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056b0:	4b1f      	ldr	r3, [pc, #124]	; (8005730 <SDMMC_GetCmdResp2+0x88>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1f      	ldr	r2, [pc, #124]	; (8005734 <SDMMC_GetCmdResp2+0x8c>)
 80056b6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ba:	0a5b      	lsrs	r3, r3, #9
 80056bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c0:	fb02 f303 	mul.w	r3, r2, r3
 80056c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	1e5a      	subs	r2, r3, #1
 80056ca:	60fa      	str	r2, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d102      	bne.n	80056d6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056d4:	e026      	b.n	8005724 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0ef      	beq.n	80056c6 <SDMMC_GetCmdResp2+0x1e>
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1ea      	bne.n	80056c6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2204      	movs	r2, #4
 8005700:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005702:	2304      	movs	r3, #4
 8005704:	e00e      	b.n	8005724 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d004      	beq.n	800571c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005718:	2301      	movs	r3, #1
 800571a:	e003      	b.n	8005724 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	22c5      	movs	r2, #197	; 0xc5
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	20000000 	.word	0x20000000
 8005734:	10624dd3 	.word	0x10624dd3

08005738 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005740:	4b1a      	ldr	r3, [pc, #104]	; (80057ac <SDMMC_GetCmdResp3+0x74>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a1a      	ldr	r2, [pc, #104]	; (80057b0 <SDMMC_GetCmdResp3+0x78>)
 8005746:	fba2 2303 	umull	r2, r3, r2, r3
 800574a:	0a5b      	lsrs	r3, r3, #9
 800574c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005750:	fb02 f303 	mul.w	r3, r2, r3
 8005754:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	1e5a      	subs	r2, r3, #1
 800575a:	60fa      	str	r2, [r7, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d102      	bne.n	8005766 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005764:	e01b      	b.n	800579e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0ef      	beq.n	8005756 <SDMMC_GetCmdResp3+0x1e>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1ea      	bne.n	8005756 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d004      	beq.n	8005796 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2204      	movs	r2, #4
 8005790:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005792:	2304      	movs	r3, #4
 8005794:	e003      	b.n	800579e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	22c5      	movs	r2, #197	; 0xc5
 800579a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	20000000 	.word	0x20000000
 80057b0:	10624dd3 	.word	0x10624dd3

080057b4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	460b      	mov	r3, r1
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057c2:	4b35      	ldr	r3, [pc, #212]	; (8005898 <SDMMC_GetCmdResp6+0xe4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a35      	ldr	r2, [pc, #212]	; (800589c <SDMMC_GetCmdResp6+0xe8>)
 80057c8:	fba2 2303 	umull	r2, r3, r2, r3
 80057cc:	0a5b      	lsrs	r3, r3, #9
 80057ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d2:	fb02 f303 	mul.w	r3, r2, r3
 80057d6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	1e5a      	subs	r2, r3, #1
 80057dc:	61fa      	str	r2, [r7, #28]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d102      	bne.n	80057e8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057e6:	e052      	b.n	800588e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ec:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0ef      	beq.n	80057d8 <SDMMC_GetCmdResp6+0x24>
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1ea      	bne.n	80057d8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d004      	beq.n	8005818 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2204      	movs	r2, #4
 8005812:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005814:	2304      	movs	r3, #4
 8005816:	e03a      	b.n	800588e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d004      	beq.n	800582e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800582a:	2301      	movs	r3, #1
 800582c:	e02f      	b.n	800588e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f7ff fbcb 	bl	8004fca <SDIO_GetCommandResponse>
 8005834:	4603      	mov	r3, r0
 8005836:	461a      	mov	r2, r3
 8005838:	7afb      	ldrb	r3, [r7, #11]
 800583a:	4293      	cmp	r3, r2
 800583c:	d001      	beq.n	8005842 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800583e:	2301      	movs	r3, #1
 8005840:	e025      	b.n	800588e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	22c5      	movs	r2, #197	; 0xc5
 8005846:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005848:	2100      	movs	r1, #0
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f7ff fbca 	bl	8004fe4 <SDIO_GetResponse>
 8005850:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d106      	bne.n	800586a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	0c1b      	lsrs	r3, r3, #16
 8005860:	b29a      	uxth	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005866:	2300      	movs	r3, #0
 8005868:	e011      	b.n	800588e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005878:	e009      	b.n	800588e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005888:	e001      	b.n	800588e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800588a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800588e:	4618      	mov	r0, r3
 8005890:	3720      	adds	r7, #32
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20000000 	.word	0x20000000
 800589c:	10624dd3 	.word	0x10624dd3

080058a0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058a8:	4b22      	ldr	r3, [pc, #136]	; (8005934 <SDMMC_GetCmdResp7+0x94>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a22      	ldr	r2, [pc, #136]	; (8005938 <SDMMC_GetCmdResp7+0x98>)
 80058ae:	fba2 2303 	umull	r2, r3, r2, r3
 80058b2:	0a5b      	lsrs	r3, r3, #9
 80058b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b8:	fb02 f303 	mul.w	r3, r2, r3
 80058bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	1e5a      	subs	r2, r3, #1
 80058c2:	60fa      	str	r2, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d102      	bne.n	80058ce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058cc:	e02c      	b.n	8005928 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0ef      	beq.n	80058be <SDMMC_GetCmdResp7+0x1e>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1ea      	bne.n	80058be <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2204      	movs	r2, #4
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80058fa:	2304      	movs	r3, #4
 80058fc:	e014      	b.n	8005928 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d004      	beq.n	8005914 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005910:	2301      	movs	r3, #1
 8005912:	e009      	b.n	8005928 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2240      	movs	r2, #64	; 0x40
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005926:	2300      	movs	r3, #0
  
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	20000000 	.word	0x20000000
 8005938:	10624dd3 	.word	0x10624dd3

0800593c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005944:	4b11      	ldr	r3, [pc, #68]	; (800598c <SDMMC_GetCmdError+0x50>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a11      	ldr	r2, [pc, #68]	; (8005990 <SDMMC_GetCmdError+0x54>)
 800594a:	fba2 2303 	umull	r2, r3, r2, r3
 800594e:	0a5b      	lsrs	r3, r3, #9
 8005950:	f241 3288 	movw	r2, #5000	; 0x1388
 8005954:	fb02 f303 	mul.w	r3, r2, r3
 8005958:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	1e5a      	subs	r2, r3, #1
 800595e:	60fa      	str	r2, [r7, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d102      	bne.n	800596a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005964:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005968:	e009      	b.n	800597e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f1      	beq.n	800595a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	22c5      	movs	r2, #197	; 0xc5
 800597a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	20000000 	.word	0x20000000
 8005990:	10624dd3 	.word	0x10624dd3

08005994 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005998:	4904      	ldr	r1, [pc, #16]	; (80059ac <MX_FATFS_Init+0x18>)
 800599a:	4805      	ldr	r0, [pc, #20]	; (80059b0 <MX_FATFS_Init+0x1c>)
 800599c:	f000 f9e4 	bl	8005d68 <FATFS_LinkDriver>
 80059a0:	4603      	mov	r3, r0
 80059a2:	461a      	mov	r2, r3
 80059a4:	4b03      	ldr	r3, [pc, #12]	; (80059b4 <MX_FATFS_Init+0x20>)
 80059a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80059a8:	bf00      	nop
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	2000231c 	.word	0x2000231c
 80059b0:	0800a6f0 	.word	0x0800a6f0
 80059b4:	20002318 	.word	0x20002318

080059b8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80059c2:	f000 f879 	bl	8005ab8 <BSP_SD_IsDetected>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d001      	beq.n	80059d0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e012      	b.n	80059f6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80059d0:	480b      	ldr	r0, [pc, #44]	; (8005a00 <BSP_SD_Init+0x48>)
 80059d2:	f7fe f8d1 	bl	8003b78 <HAL_SD_Init>
 80059d6:	4603      	mov	r3, r0
 80059d8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80059e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059e4:	4806      	ldr	r0, [pc, #24]	; (8005a00 <BSP_SD_Init+0x48>)
 80059e6:	f7fe feb3 	bl	8004750 <HAL_SD_ConfigWideBusOperation>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80059f4:	79fb      	ldrb	r3, [r7, #7]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	2000228c 	.word	0x2000228c

08005a04 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	4806      	ldr	r0, [pc, #24]	; (8005a3c <BSP_SD_ReadBlocks+0x38>)
 8005a22:	f7fe f951 	bl	8003cc8 <HAL_SD_ReadBlocks>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	2000228c 	.word	0x2000228c

08005a40 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	68f9      	ldr	r1, [r7, #12]
 8005a5c:	4806      	ldr	r0, [pc, #24]	; (8005a78 <BSP_SD_WriteBlocks+0x38>)
 8005a5e:	f7fe fb19 	bl	8004094 <HAL_SD_WriteBlocks>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	2000228c 	.word	0x2000228c

08005a7c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005a80:	4805      	ldr	r0, [pc, #20]	; (8005a98 <BSP_SD_GetCardState+0x1c>)
 8005a82:	f7fe feff 	bl	8004884 <HAL_SD_GetCardState>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	bf14      	ite	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	2300      	moveq	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	2000228c 	.word	0x2000228c

08005a9c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	4803      	ldr	r0, [pc, #12]	; (8005ab4 <BSP_SD_GetCardInfo+0x18>)
 8005aa8:	f7fe fe26 	bl	80046f8 <HAL_SD_GetCardInfo>
}
 8005aac:	bf00      	nop
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	2000228c 	.word	0x2000228c

08005ab8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005ac2:	f000 f80b 	bl	8005adc <BSP_PlatformIsDetected>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005acc:	2300      	movs	r3, #0
 8005ace:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	b2db      	uxtb	r3, r3
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005ae6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005aea:	4806      	ldr	r0, [pc, #24]	; (8005b04 <BSP_PlatformIsDetected+0x28>)
 8005aec:	f7fc fd38 	bl	8002560 <HAL_GPIO_ReadPin>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005af6:	2300      	movs	r3, #0
 8005af8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005afa:	79fb      	ldrb	r3, [r7, #7]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40020800 	.word	0x40020800

08005b08 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005b12:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <SD_CheckStatus+0x38>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005b18:	f7ff ffb0 	bl	8005a7c <BSP_SD_GetCardState>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d107      	bne.n	8005b32 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005b22:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <SD_CheckStatus+0x38>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	f023 0301 	bic.w	r3, r3, #1
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	4b04      	ldr	r3, [pc, #16]	; (8005b40 <SD_CheckStatus+0x38>)
 8005b30:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005b32:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <SD_CheckStatus+0x38>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	b2db      	uxtb	r3, r3
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000009 	.word	0x20000009

08005b44 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005b4e:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <SD_initialize+0x38>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005b54:	f7ff ff30 	bl	80059b8 <BSP_SD_Init>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d107      	bne.n	8005b6e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff ffd1 	bl	8005b08 <SD_CheckStatus>
 8005b66:	4603      	mov	r3, r0
 8005b68:	461a      	mov	r2, r3
 8005b6a:	4b04      	ldr	r3, [pc, #16]	; (8005b7c <SD_initialize+0x38>)
 8005b6c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005b6e:	4b03      	ldr	r3, [pc, #12]	; (8005b7c <SD_initialize+0x38>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	b2db      	uxtb	r3, r3
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	20000009 	.word	0x20000009

08005b80 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	4603      	mov	r3, r0
 8005b88:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff ffbb 	bl	8005b08 <SD_CheckStatus>
 8005b92:	4603      	mov	r3, r0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60b9      	str	r1, [r7, #8]
 8005ba4:	607a      	str	r2, [r7, #4]
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	4603      	mov	r3, r0
 8005baa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	68b8      	ldr	r0, [r7, #8]
 8005bba:	f7ff ff23 	bl	8005a04 <BSP_SD_ReadBlocks>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d107      	bne.n	8005bd4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005bc4:	bf00      	nop
 8005bc6:	f7ff ff59 	bl	8005a7c <BSP_SD_GetCardState>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1fa      	bne.n	8005bc6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b086      	sub	sp, #24
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
 8005bea:	4603      	mov	r3, r0
 8005bec:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	68b8      	ldr	r0, [r7, #8]
 8005bfc:	f7ff ff20 	bl	8005a40 <BSP_SD_WriteBlocks>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d107      	bne.n	8005c16 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005c06:	bf00      	nop
 8005c08:	f7ff ff38 	bl	8005a7c <BSP_SD_GetCardState>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1fa      	bne.n	8005c08 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08c      	sub	sp, #48	; 0x30
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	4603      	mov	r3, r0
 8005c28:	603a      	str	r2, [r7, #0]
 8005c2a:	71fb      	strb	r3, [r7, #7]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005c36:	4b25      	ldr	r3, [pc, #148]	; (8005ccc <SD_ioctl+0xac>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <SD_ioctl+0x28>
 8005c44:	2303      	movs	r3, #3
 8005c46:	e03c      	b.n	8005cc2 <SD_ioctl+0xa2>

  switch (cmd)
 8005c48:	79bb      	ldrb	r3, [r7, #6]
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d834      	bhi.n	8005cb8 <SD_ioctl+0x98>
 8005c4e:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <SD_ioctl+0x34>)
 8005c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c54:	08005c65 	.word	0x08005c65
 8005c58:	08005c6d 	.word	0x08005c6d
 8005c5c:	08005c85 	.word	0x08005c85
 8005c60:	08005c9f 	.word	0x08005c9f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005c64:	2300      	movs	r3, #0
 8005c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c6a:	e028      	b.n	8005cbe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c6c:	f107 030c 	add.w	r3, r7, #12
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff ff13 	bl	8005a9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c82:	e01c      	b.n	8005cbe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c84:	f107 030c 	add.w	r3, r7, #12
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff ff07 	bl	8005a9c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c9c:	e00f      	b.n	8005cbe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c9e:	f107 030c 	add.w	r3, r7, #12
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff fefa 	bl	8005a9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	0a5a      	lsrs	r2, r3, #9
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005cb6:	e002      	b.n	8005cbe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005cb8:	2304      	movs	r3, #4
 8005cba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005cbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3730      	adds	r7, #48	; 0x30
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000009 	.word	0x20000009

08005cd0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005ce6:	4b1f      	ldr	r3, [pc, #124]	; (8005d64 <FATFS_LinkDriverEx+0x94>)
 8005ce8:	7a5b      	ldrb	r3, [r3, #9]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d131      	bne.n	8005d54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005cf0:	4b1c      	ldr	r3, [pc, #112]	; (8005d64 <FATFS_LinkDriverEx+0x94>)
 8005cf2:	7a5b      	ldrb	r3, [r3, #9]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	4b1a      	ldr	r3, [pc, #104]	; (8005d64 <FATFS_LinkDriverEx+0x94>)
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005cfe:	4b19      	ldr	r3, [pc, #100]	; (8005d64 <FATFS_LinkDriverEx+0x94>)
 8005d00:	7a5b      	ldrb	r3, [r3, #9]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <FATFS_LinkDriverEx+0x94>)
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005d0e:	4b15      	ldr	r3, [pc, #84]	; (8005d64 <FATFS_LinkDriverEx+0x94>)
 8005d10:	7a5b      	ldrb	r3, [r3, #9]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	461a      	mov	r2, r3
 8005d16:	4b13      	ldr	r3, [pc, #76]	; (8005d64 <FATFS_LinkDriverEx+0x94>)
 8005d18:	4413      	add	r3, r2
 8005d1a:	79fa      	ldrb	r2, [r7, #7]
 8005d1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005d1e:	4b11      	ldr	r3, [pc, #68]	; (8005d64 <FATFS_LinkDriverEx+0x94>)
 8005d20:	7a5b      	ldrb	r3, [r3, #9]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	b2d1      	uxtb	r1, r2
 8005d28:	4a0e      	ldr	r2, [pc, #56]	; (8005d64 <FATFS_LinkDriverEx+0x94>)
 8005d2a:	7251      	strb	r1, [r2, #9]
 8005d2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005d2e:	7dbb      	ldrb	r3, [r7, #22]
 8005d30:	3330      	adds	r3, #48	; 0x30
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	223a      	movs	r2, #58	; 0x3a
 8005d3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	3302      	adds	r3, #2
 8005d44:	222f      	movs	r2, #47	; 0x2f
 8005d46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	3303      	adds	r3, #3
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	20002320 	.word	0x20002320

08005d68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005d72:	2200      	movs	r2, #0
 8005d74:	6839      	ldr	r1, [r7, #0]
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff ffaa 	bl	8005cd0 <FATFS_LinkDriverEx>
 8005d7c:	4603      	mov	r3, r0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <__assert_func>:
 8005d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d8a:	4614      	mov	r4, r2
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <__assert_func+0x2c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4605      	mov	r5, r0
 8005d94:	68d8      	ldr	r0, [r3, #12]
 8005d96:	b14c      	cbz	r4, 8005dac <__assert_func+0x24>
 8005d98:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <__assert_func+0x30>)
 8005d9a:	9100      	str	r1, [sp, #0]
 8005d9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005da0:	4906      	ldr	r1, [pc, #24]	; (8005dbc <__assert_func+0x34>)
 8005da2:	462b      	mov	r3, r5
 8005da4:	f000 f814 	bl	8005dd0 <fiprintf>
 8005da8:	f001 ffb6 	bl	8007d18 <abort>
 8005dac:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <__assert_func+0x38>)
 8005dae:	461c      	mov	r4, r3
 8005db0:	e7f3      	b.n	8005d9a <__assert_func+0x12>
 8005db2:	bf00      	nop
 8005db4:	2000000c 	.word	0x2000000c
 8005db8:	0800a704 	.word	0x0800a704
 8005dbc:	0800a711 	.word	0x0800a711
 8005dc0:	0800a73f 	.word	0x0800a73f

08005dc4 <__errno>:
 8005dc4:	4b01      	ldr	r3, [pc, #4]	; (8005dcc <__errno+0x8>)
 8005dc6:	6818      	ldr	r0, [r3, #0]
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	2000000c 	.word	0x2000000c

08005dd0 <fiprintf>:
 8005dd0:	b40e      	push	{r1, r2, r3}
 8005dd2:	b503      	push	{r0, r1, lr}
 8005dd4:	4601      	mov	r1, r0
 8005dd6:	ab03      	add	r3, sp, #12
 8005dd8:	4805      	ldr	r0, [pc, #20]	; (8005df0 <fiprintf+0x20>)
 8005dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dde:	6800      	ldr	r0, [r0, #0]
 8005de0:	9301      	str	r3, [sp, #4]
 8005de2:	f000 f85d 	bl	8005ea0 <_vfiprintf_r>
 8005de6:	b002      	add	sp, #8
 8005de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dec:	b003      	add	sp, #12
 8005dee:	4770      	bx	lr
 8005df0:	2000000c 	.word	0x2000000c

08005df4 <__libc_init_array>:
 8005df4:	b570      	push	{r4, r5, r6, lr}
 8005df6:	4d0d      	ldr	r5, [pc, #52]	; (8005e2c <__libc_init_array+0x38>)
 8005df8:	4c0d      	ldr	r4, [pc, #52]	; (8005e30 <__libc_init_array+0x3c>)
 8005dfa:	1b64      	subs	r4, r4, r5
 8005dfc:	10a4      	asrs	r4, r4, #2
 8005dfe:	2600      	movs	r6, #0
 8005e00:	42a6      	cmp	r6, r4
 8005e02:	d109      	bne.n	8005e18 <__libc_init_array+0x24>
 8005e04:	4d0b      	ldr	r5, [pc, #44]	; (8005e34 <__libc_init_array+0x40>)
 8005e06:	4c0c      	ldr	r4, [pc, #48]	; (8005e38 <__libc_init_array+0x44>)
 8005e08:	f004 fc5a 	bl	800a6c0 <_init>
 8005e0c:	1b64      	subs	r4, r4, r5
 8005e0e:	10a4      	asrs	r4, r4, #2
 8005e10:	2600      	movs	r6, #0
 8005e12:	42a6      	cmp	r6, r4
 8005e14:	d105      	bne.n	8005e22 <__libc_init_array+0x2e>
 8005e16:	bd70      	pop	{r4, r5, r6, pc}
 8005e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e1c:	4798      	blx	r3
 8005e1e:	3601      	adds	r6, #1
 8005e20:	e7ee      	b.n	8005e00 <__libc_init_array+0xc>
 8005e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e26:	4798      	blx	r3
 8005e28:	3601      	adds	r6, #1
 8005e2a:	e7f2      	b.n	8005e12 <__libc_init_array+0x1e>
	...

08005e3c <memset>:
 8005e3c:	4402      	add	r2, r0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d100      	bne.n	8005e46 <memset+0xa>
 8005e44:	4770      	bx	lr
 8005e46:	f803 1b01 	strb.w	r1, [r3], #1
 8005e4a:	e7f9      	b.n	8005e40 <memset+0x4>

08005e4c <__sfputc_r>:
 8005e4c:	6893      	ldr	r3, [r2, #8]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	b410      	push	{r4}
 8005e54:	6093      	str	r3, [r2, #8]
 8005e56:	da08      	bge.n	8005e6a <__sfputc_r+0x1e>
 8005e58:	6994      	ldr	r4, [r2, #24]
 8005e5a:	42a3      	cmp	r3, r4
 8005e5c:	db01      	blt.n	8005e62 <__sfputc_r+0x16>
 8005e5e:	290a      	cmp	r1, #10
 8005e60:	d103      	bne.n	8005e6a <__sfputc_r+0x1e>
 8005e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e66:	f001 be97 	b.w	8007b98 <__swbuf_r>
 8005e6a:	6813      	ldr	r3, [r2, #0]
 8005e6c:	1c58      	adds	r0, r3, #1
 8005e6e:	6010      	str	r0, [r2, #0]
 8005e70:	7019      	strb	r1, [r3, #0]
 8005e72:	4608      	mov	r0, r1
 8005e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <__sfputs_r>:
 8005e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7c:	4606      	mov	r6, r0
 8005e7e:	460f      	mov	r7, r1
 8005e80:	4614      	mov	r4, r2
 8005e82:	18d5      	adds	r5, r2, r3
 8005e84:	42ac      	cmp	r4, r5
 8005e86:	d101      	bne.n	8005e8c <__sfputs_r+0x12>
 8005e88:	2000      	movs	r0, #0
 8005e8a:	e007      	b.n	8005e9c <__sfputs_r+0x22>
 8005e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e90:	463a      	mov	r2, r7
 8005e92:	4630      	mov	r0, r6
 8005e94:	f7ff ffda 	bl	8005e4c <__sfputc_r>
 8005e98:	1c43      	adds	r3, r0, #1
 8005e9a:	d1f3      	bne.n	8005e84 <__sfputs_r+0xa>
 8005e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ea0 <_vfiprintf_r>:
 8005ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	460d      	mov	r5, r1
 8005ea6:	b09d      	sub	sp, #116	; 0x74
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	4698      	mov	r8, r3
 8005eac:	4606      	mov	r6, r0
 8005eae:	b118      	cbz	r0, 8005eb8 <_vfiprintf_r+0x18>
 8005eb0:	6983      	ldr	r3, [r0, #24]
 8005eb2:	b90b      	cbnz	r3, 8005eb8 <_vfiprintf_r+0x18>
 8005eb4:	f002 fecc 	bl	8008c50 <__sinit>
 8005eb8:	4b89      	ldr	r3, [pc, #548]	; (80060e0 <_vfiprintf_r+0x240>)
 8005eba:	429d      	cmp	r5, r3
 8005ebc:	d11b      	bne.n	8005ef6 <_vfiprintf_r+0x56>
 8005ebe:	6875      	ldr	r5, [r6, #4]
 8005ec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ec2:	07d9      	lsls	r1, r3, #31
 8005ec4:	d405      	bmi.n	8005ed2 <_vfiprintf_r+0x32>
 8005ec6:	89ab      	ldrh	r3, [r5, #12]
 8005ec8:	059a      	lsls	r2, r3, #22
 8005eca:	d402      	bmi.n	8005ed2 <_vfiprintf_r+0x32>
 8005ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ece:	f003 fad0 	bl	8009472 <__retarget_lock_acquire_recursive>
 8005ed2:	89ab      	ldrh	r3, [r5, #12]
 8005ed4:	071b      	lsls	r3, r3, #28
 8005ed6:	d501      	bpl.n	8005edc <_vfiprintf_r+0x3c>
 8005ed8:	692b      	ldr	r3, [r5, #16]
 8005eda:	b9eb      	cbnz	r3, 8005f18 <_vfiprintf_r+0x78>
 8005edc:	4629      	mov	r1, r5
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f001 feac 	bl	8007c3c <__swsetup_r>
 8005ee4:	b1c0      	cbz	r0, 8005f18 <_vfiprintf_r+0x78>
 8005ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ee8:	07dc      	lsls	r4, r3, #31
 8005eea:	d50e      	bpl.n	8005f0a <_vfiprintf_r+0x6a>
 8005eec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef0:	b01d      	add	sp, #116	; 0x74
 8005ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef6:	4b7b      	ldr	r3, [pc, #492]	; (80060e4 <_vfiprintf_r+0x244>)
 8005ef8:	429d      	cmp	r5, r3
 8005efa:	d101      	bne.n	8005f00 <_vfiprintf_r+0x60>
 8005efc:	68b5      	ldr	r5, [r6, #8]
 8005efe:	e7df      	b.n	8005ec0 <_vfiprintf_r+0x20>
 8005f00:	4b79      	ldr	r3, [pc, #484]	; (80060e8 <_vfiprintf_r+0x248>)
 8005f02:	429d      	cmp	r5, r3
 8005f04:	bf08      	it	eq
 8005f06:	68f5      	ldreq	r5, [r6, #12]
 8005f08:	e7da      	b.n	8005ec0 <_vfiprintf_r+0x20>
 8005f0a:	89ab      	ldrh	r3, [r5, #12]
 8005f0c:	0598      	lsls	r0, r3, #22
 8005f0e:	d4ed      	bmi.n	8005eec <_vfiprintf_r+0x4c>
 8005f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f12:	f003 faaf 	bl	8009474 <__retarget_lock_release_recursive>
 8005f16:	e7e9      	b.n	8005eec <_vfiprintf_r+0x4c>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f1c:	2320      	movs	r3, #32
 8005f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f26:	2330      	movs	r3, #48	; 0x30
 8005f28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80060ec <_vfiprintf_r+0x24c>
 8005f2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f30:	f04f 0901 	mov.w	r9, #1
 8005f34:	4623      	mov	r3, r4
 8005f36:	469a      	mov	sl, r3
 8005f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f3c:	b10a      	cbz	r2, 8005f42 <_vfiprintf_r+0xa2>
 8005f3e:	2a25      	cmp	r2, #37	; 0x25
 8005f40:	d1f9      	bne.n	8005f36 <_vfiprintf_r+0x96>
 8005f42:	ebba 0b04 	subs.w	fp, sl, r4
 8005f46:	d00b      	beq.n	8005f60 <_vfiprintf_r+0xc0>
 8005f48:	465b      	mov	r3, fp
 8005f4a:	4622      	mov	r2, r4
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	4630      	mov	r0, r6
 8005f50:	f7ff ff93 	bl	8005e7a <__sfputs_r>
 8005f54:	3001      	adds	r0, #1
 8005f56:	f000 80aa 	beq.w	80060ae <_vfiprintf_r+0x20e>
 8005f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f5c:	445a      	add	r2, fp
 8005f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8005f60:	f89a 3000 	ldrb.w	r3, [sl]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80a2 	beq.w	80060ae <_vfiprintf_r+0x20e>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f74:	f10a 0a01 	add.w	sl, sl, #1
 8005f78:	9304      	str	r3, [sp, #16]
 8005f7a:	9307      	str	r3, [sp, #28]
 8005f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f80:	931a      	str	r3, [sp, #104]	; 0x68
 8005f82:	4654      	mov	r4, sl
 8005f84:	2205      	movs	r2, #5
 8005f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f8a:	4858      	ldr	r0, [pc, #352]	; (80060ec <_vfiprintf_r+0x24c>)
 8005f8c:	f7fa f908 	bl	80001a0 <memchr>
 8005f90:	9a04      	ldr	r2, [sp, #16]
 8005f92:	b9d8      	cbnz	r0, 8005fcc <_vfiprintf_r+0x12c>
 8005f94:	06d1      	lsls	r1, r2, #27
 8005f96:	bf44      	itt	mi
 8005f98:	2320      	movmi	r3, #32
 8005f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f9e:	0713      	lsls	r3, r2, #28
 8005fa0:	bf44      	itt	mi
 8005fa2:	232b      	movmi	r3, #43	; 0x2b
 8005fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8005fac:	2b2a      	cmp	r3, #42	; 0x2a
 8005fae:	d015      	beq.n	8005fdc <_vfiprintf_r+0x13c>
 8005fb0:	9a07      	ldr	r2, [sp, #28]
 8005fb2:	4654      	mov	r4, sl
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	f04f 0c0a 	mov.w	ip, #10
 8005fba:	4621      	mov	r1, r4
 8005fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fc0:	3b30      	subs	r3, #48	; 0x30
 8005fc2:	2b09      	cmp	r3, #9
 8005fc4:	d94e      	bls.n	8006064 <_vfiprintf_r+0x1c4>
 8005fc6:	b1b0      	cbz	r0, 8005ff6 <_vfiprintf_r+0x156>
 8005fc8:	9207      	str	r2, [sp, #28]
 8005fca:	e014      	b.n	8005ff6 <_vfiprintf_r+0x156>
 8005fcc:	eba0 0308 	sub.w	r3, r0, r8
 8005fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	9304      	str	r3, [sp, #16]
 8005fd8:	46a2      	mov	sl, r4
 8005fda:	e7d2      	b.n	8005f82 <_vfiprintf_r+0xe2>
 8005fdc:	9b03      	ldr	r3, [sp, #12]
 8005fde:	1d19      	adds	r1, r3, #4
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	9103      	str	r1, [sp, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	bfbb      	ittet	lt
 8005fe8:	425b      	neglt	r3, r3
 8005fea:	f042 0202 	orrlt.w	r2, r2, #2
 8005fee:	9307      	strge	r3, [sp, #28]
 8005ff0:	9307      	strlt	r3, [sp, #28]
 8005ff2:	bfb8      	it	lt
 8005ff4:	9204      	strlt	r2, [sp, #16]
 8005ff6:	7823      	ldrb	r3, [r4, #0]
 8005ff8:	2b2e      	cmp	r3, #46	; 0x2e
 8005ffa:	d10c      	bne.n	8006016 <_vfiprintf_r+0x176>
 8005ffc:	7863      	ldrb	r3, [r4, #1]
 8005ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8006000:	d135      	bne.n	800606e <_vfiprintf_r+0x1ce>
 8006002:	9b03      	ldr	r3, [sp, #12]
 8006004:	1d1a      	adds	r2, r3, #4
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	9203      	str	r2, [sp, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	bfb8      	it	lt
 800600e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006012:	3402      	adds	r4, #2
 8006014:	9305      	str	r3, [sp, #20]
 8006016:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80060fc <_vfiprintf_r+0x25c>
 800601a:	7821      	ldrb	r1, [r4, #0]
 800601c:	2203      	movs	r2, #3
 800601e:	4650      	mov	r0, sl
 8006020:	f7fa f8be 	bl	80001a0 <memchr>
 8006024:	b140      	cbz	r0, 8006038 <_vfiprintf_r+0x198>
 8006026:	2340      	movs	r3, #64	; 0x40
 8006028:	eba0 000a 	sub.w	r0, r0, sl
 800602c:	fa03 f000 	lsl.w	r0, r3, r0
 8006030:	9b04      	ldr	r3, [sp, #16]
 8006032:	4303      	orrs	r3, r0
 8006034:	3401      	adds	r4, #1
 8006036:	9304      	str	r3, [sp, #16]
 8006038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800603c:	482c      	ldr	r0, [pc, #176]	; (80060f0 <_vfiprintf_r+0x250>)
 800603e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006042:	2206      	movs	r2, #6
 8006044:	f7fa f8ac 	bl	80001a0 <memchr>
 8006048:	2800      	cmp	r0, #0
 800604a:	d03f      	beq.n	80060cc <_vfiprintf_r+0x22c>
 800604c:	4b29      	ldr	r3, [pc, #164]	; (80060f4 <_vfiprintf_r+0x254>)
 800604e:	bb1b      	cbnz	r3, 8006098 <_vfiprintf_r+0x1f8>
 8006050:	9b03      	ldr	r3, [sp, #12]
 8006052:	3307      	adds	r3, #7
 8006054:	f023 0307 	bic.w	r3, r3, #7
 8006058:	3308      	adds	r3, #8
 800605a:	9303      	str	r3, [sp, #12]
 800605c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800605e:	443b      	add	r3, r7
 8006060:	9309      	str	r3, [sp, #36]	; 0x24
 8006062:	e767      	b.n	8005f34 <_vfiprintf_r+0x94>
 8006064:	fb0c 3202 	mla	r2, ip, r2, r3
 8006068:	460c      	mov	r4, r1
 800606a:	2001      	movs	r0, #1
 800606c:	e7a5      	b.n	8005fba <_vfiprintf_r+0x11a>
 800606e:	2300      	movs	r3, #0
 8006070:	3401      	adds	r4, #1
 8006072:	9305      	str	r3, [sp, #20]
 8006074:	4619      	mov	r1, r3
 8006076:	f04f 0c0a 	mov.w	ip, #10
 800607a:	4620      	mov	r0, r4
 800607c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006080:	3a30      	subs	r2, #48	; 0x30
 8006082:	2a09      	cmp	r2, #9
 8006084:	d903      	bls.n	800608e <_vfiprintf_r+0x1ee>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0c5      	beq.n	8006016 <_vfiprintf_r+0x176>
 800608a:	9105      	str	r1, [sp, #20]
 800608c:	e7c3      	b.n	8006016 <_vfiprintf_r+0x176>
 800608e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006092:	4604      	mov	r4, r0
 8006094:	2301      	movs	r3, #1
 8006096:	e7f0      	b.n	800607a <_vfiprintf_r+0x1da>
 8006098:	ab03      	add	r3, sp, #12
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	462a      	mov	r2, r5
 800609e:	4b16      	ldr	r3, [pc, #88]	; (80060f8 <_vfiprintf_r+0x258>)
 80060a0:	a904      	add	r1, sp, #16
 80060a2:	4630      	mov	r0, r6
 80060a4:	f000 f8cc 	bl	8006240 <_printf_float>
 80060a8:	4607      	mov	r7, r0
 80060aa:	1c78      	adds	r0, r7, #1
 80060ac:	d1d6      	bne.n	800605c <_vfiprintf_r+0x1bc>
 80060ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060b0:	07d9      	lsls	r1, r3, #31
 80060b2:	d405      	bmi.n	80060c0 <_vfiprintf_r+0x220>
 80060b4:	89ab      	ldrh	r3, [r5, #12]
 80060b6:	059a      	lsls	r2, r3, #22
 80060b8:	d402      	bmi.n	80060c0 <_vfiprintf_r+0x220>
 80060ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060bc:	f003 f9da 	bl	8009474 <__retarget_lock_release_recursive>
 80060c0:	89ab      	ldrh	r3, [r5, #12]
 80060c2:	065b      	lsls	r3, r3, #25
 80060c4:	f53f af12 	bmi.w	8005eec <_vfiprintf_r+0x4c>
 80060c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060ca:	e711      	b.n	8005ef0 <_vfiprintf_r+0x50>
 80060cc:	ab03      	add	r3, sp, #12
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	462a      	mov	r2, r5
 80060d2:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <_vfiprintf_r+0x258>)
 80060d4:	a904      	add	r1, sp, #16
 80060d6:	4630      	mov	r0, r6
 80060d8:	f000 fb56 	bl	8006788 <_printf_i>
 80060dc:	e7e4      	b.n	80060a8 <_vfiprintf_r+0x208>
 80060de:	bf00      	nop
 80060e0:	0800a994 	.word	0x0800a994
 80060e4:	0800a9b4 	.word	0x0800a9b4
 80060e8:	0800a974 	.word	0x0800a974
 80060ec:	0800a744 	.word	0x0800a744
 80060f0:	0800a74e 	.word	0x0800a74e
 80060f4:	08006241 	.word	0x08006241
 80060f8:	08005e7b 	.word	0x08005e7b
 80060fc:	0800a74a 	.word	0x0800a74a

08006100 <__cvt>:
 8006100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006104:	ec55 4b10 	vmov	r4, r5, d0
 8006108:	2d00      	cmp	r5, #0
 800610a:	460e      	mov	r6, r1
 800610c:	4619      	mov	r1, r3
 800610e:	462b      	mov	r3, r5
 8006110:	bfbb      	ittet	lt
 8006112:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006116:	461d      	movlt	r5, r3
 8006118:	2300      	movge	r3, #0
 800611a:	232d      	movlt	r3, #45	; 0x2d
 800611c:	700b      	strb	r3, [r1, #0]
 800611e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006120:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006124:	4691      	mov	r9, r2
 8006126:	f023 0820 	bic.w	r8, r3, #32
 800612a:	bfbc      	itt	lt
 800612c:	4622      	movlt	r2, r4
 800612e:	4614      	movlt	r4, r2
 8006130:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006134:	d005      	beq.n	8006142 <__cvt+0x42>
 8006136:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800613a:	d100      	bne.n	800613e <__cvt+0x3e>
 800613c:	3601      	adds	r6, #1
 800613e:	2102      	movs	r1, #2
 8006140:	e000      	b.n	8006144 <__cvt+0x44>
 8006142:	2103      	movs	r1, #3
 8006144:	ab03      	add	r3, sp, #12
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	ab02      	add	r3, sp, #8
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	ec45 4b10 	vmov	d0, r4, r5
 8006150:	4653      	mov	r3, sl
 8006152:	4632      	mov	r2, r6
 8006154:	f001 fe74 	bl	8007e40 <_dtoa_r>
 8006158:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800615c:	4607      	mov	r7, r0
 800615e:	d102      	bne.n	8006166 <__cvt+0x66>
 8006160:	f019 0f01 	tst.w	r9, #1
 8006164:	d022      	beq.n	80061ac <__cvt+0xac>
 8006166:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800616a:	eb07 0906 	add.w	r9, r7, r6
 800616e:	d110      	bne.n	8006192 <__cvt+0x92>
 8006170:	783b      	ldrb	r3, [r7, #0]
 8006172:	2b30      	cmp	r3, #48	; 0x30
 8006174:	d10a      	bne.n	800618c <__cvt+0x8c>
 8006176:	2200      	movs	r2, #0
 8006178:	2300      	movs	r3, #0
 800617a:	4620      	mov	r0, r4
 800617c:	4629      	mov	r1, r5
 800617e:	f7fa fc83 	bl	8000a88 <__aeabi_dcmpeq>
 8006182:	b918      	cbnz	r0, 800618c <__cvt+0x8c>
 8006184:	f1c6 0601 	rsb	r6, r6, #1
 8006188:	f8ca 6000 	str.w	r6, [sl]
 800618c:	f8da 3000 	ldr.w	r3, [sl]
 8006190:	4499      	add	r9, r3
 8006192:	2200      	movs	r2, #0
 8006194:	2300      	movs	r3, #0
 8006196:	4620      	mov	r0, r4
 8006198:	4629      	mov	r1, r5
 800619a:	f7fa fc75 	bl	8000a88 <__aeabi_dcmpeq>
 800619e:	b108      	cbz	r0, 80061a4 <__cvt+0xa4>
 80061a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80061a4:	2230      	movs	r2, #48	; 0x30
 80061a6:	9b03      	ldr	r3, [sp, #12]
 80061a8:	454b      	cmp	r3, r9
 80061aa:	d307      	bcc.n	80061bc <__cvt+0xbc>
 80061ac:	9b03      	ldr	r3, [sp, #12]
 80061ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061b0:	1bdb      	subs	r3, r3, r7
 80061b2:	4638      	mov	r0, r7
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	b004      	add	sp, #16
 80061b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061bc:	1c59      	adds	r1, r3, #1
 80061be:	9103      	str	r1, [sp, #12]
 80061c0:	701a      	strb	r2, [r3, #0]
 80061c2:	e7f0      	b.n	80061a6 <__cvt+0xa6>

080061c4 <__exponent>:
 80061c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061c6:	4603      	mov	r3, r0
 80061c8:	2900      	cmp	r1, #0
 80061ca:	bfb8      	it	lt
 80061cc:	4249      	neglt	r1, r1
 80061ce:	f803 2b02 	strb.w	r2, [r3], #2
 80061d2:	bfb4      	ite	lt
 80061d4:	222d      	movlt	r2, #45	; 0x2d
 80061d6:	222b      	movge	r2, #43	; 0x2b
 80061d8:	2909      	cmp	r1, #9
 80061da:	7042      	strb	r2, [r0, #1]
 80061dc:	dd2a      	ble.n	8006234 <__exponent+0x70>
 80061de:	f10d 0407 	add.w	r4, sp, #7
 80061e2:	46a4      	mov	ip, r4
 80061e4:	270a      	movs	r7, #10
 80061e6:	46a6      	mov	lr, r4
 80061e8:	460a      	mov	r2, r1
 80061ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80061ee:	fb07 1516 	mls	r5, r7, r6, r1
 80061f2:	3530      	adds	r5, #48	; 0x30
 80061f4:	2a63      	cmp	r2, #99	; 0x63
 80061f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80061fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80061fe:	4631      	mov	r1, r6
 8006200:	dcf1      	bgt.n	80061e6 <__exponent+0x22>
 8006202:	3130      	adds	r1, #48	; 0x30
 8006204:	f1ae 0502 	sub.w	r5, lr, #2
 8006208:	f804 1c01 	strb.w	r1, [r4, #-1]
 800620c:	1c44      	adds	r4, r0, #1
 800620e:	4629      	mov	r1, r5
 8006210:	4561      	cmp	r1, ip
 8006212:	d30a      	bcc.n	800622a <__exponent+0x66>
 8006214:	f10d 0209 	add.w	r2, sp, #9
 8006218:	eba2 020e 	sub.w	r2, r2, lr
 800621c:	4565      	cmp	r5, ip
 800621e:	bf88      	it	hi
 8006220:	2200      	movhi	r2, #0
 8006222:	4413      	add	r3, r2
 8006224:	1a18      	subs	r0, r3, r0
 8006226:	b003      	add	sp, #12
 8006228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800622a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800622e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006232:	e7ed      	b.n	8006210 <__exponent+0x4c>
 8006234:	2330      	movs	r3, #48	; 0x30
 8006236:	3130      	adds	r1, #48	; 0x30
 8006238:	7083      	strb	r3, [r0, #2]
 800623a:	70c1      	strb	r1, [r0, #3]
 800623c:	1d03      	adds	r3, r0, #4
 800623e:	e7f1      	b.n	8006224 <__exponent+0x60>

08006240 <_printf_float>:
 8006240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006244:	ed2d 8b02 	vpush	{d8}
 8006248:	b08d      	sub	sp, #52	; 0x34
 800624a:	460c      	mov	r4, r1
 800624c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006250:	4616      	mov	r6, r2
 8006252:	461f      	mov	r7, r3
 8006254:	4605      	mov	r5, r0
 8006256:	f003 f907 	bl	8009468 <_localeconv_r>
 800625a:	f8d0 a000 	ldr.w	sl, [r0]
 800625e:	4650      	mov	r0, sl
 8006260:	f7f9 ff96 	bl	8000190 <strlen>
 8006264:	2300      	movs	r3, #0
 8006266:	930a      	str	r3, [sp, #40]	; 0x28
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	9305      	str	r3, [sp, #20]
 800626c:	f8d8 3000 	ldr.w	r3, [r8]
 8006270:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006274:	3307      	adds	r3, #7
 8006276:	f023 0307 	bic.w	r3, r3, #7
 800627a:	f103 0208 	add.w	r2, r3, #8
 800627e:	f8c8 2000 	str.w	r2, [r8]
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800628a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800628e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006292:	9307      	str	r3, [sp, #28]
 8006294:	f8cd 8018 	str.w	r8, [sp, #24]
 8006298:	ee08 0a10 	vmov	s16, r0
 800629c:	4b9f      	ldr	r3, [pc, #636]	; (800651c <_printf_float+0x2dc>)
 800629e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062a2:	f04f 32ff 	mov.w	r2, #4294967295
 80062a6:	f7fa fc21 	bl	8000aec <__aeabi_dcmpun>
 80062aa:	bb88      	cbnz	r0, 8006310 <_printf_float+0xd0>
 80062ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062b0:	4b9a      	ldr	r3, [pc, #616]	; (800651c <_printf_float+0x2dc>)
 80062b2:	f04f 32ff 	mov.w	r2, #4294967295
 80062b6:	f7fa fbfb 	bl	8000ab0 <__aeabi_dcmple>
 80062ba:	bb48      	cbnz	r0, 8006310 <_printf_float+0xd0>
 80062bc:	2200      	movs	r2, #0
 80062be:	2300      	movs	r3, #0
 80062c0:	4640      	mov	r0, r8
 80062c2:	4649      	mov	r1, r9
 80062c4:	f7fa fbea 	bl	8000a9c <__aeabi_dcmplt>
 80062c8:	b110      	cbz	r0, 80062d0 <_printf_float+0x90>
 80062ca:	232d      	movs	r3, #45	; 0x2d
 80062cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d0:	4b93      	ldr	r3, [pc, #588]	; (8006520 <_printf_float+0x2e0>)
 80062d2:	4894      	ldr	r0, [pc, #592]	; (8006524 <_printf_float+0x2e4>)
 80062d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80062d8:	bf94      	ite	ls
 80062da:	4698      	movls	r8, r3
 80062dc:	4680      	movhi	r8, r0
 80062de:	2303      	movs	r3, #3
 80062e0:	6123      	str	r3, [r4, #16]
 80062e2:	9b05      	ldr	r3, [sp, #20]
 80062e4:	f023 0204 	bic.w	r2, r3, #4
 80062e8:	6022      	str	r2, [r4, #0]
 80062ea:	f04f 0900 	mov.w	r9, #0
 80062ee:	9700      	str	r7, [sp, #0]
 80062f0:	4633      	mov	r3, r6
 80062f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80062f4:	4621      	mov	r1, r4
 80062f6:	4628      	mov	r0, r5
 80062f8:	f000 f9d8 	bl	80066ac <_printf_common>
 80062fc:	3001      	adds	r0, #1
 80062fe:	f040 8090 	bne.w	8006422 <_printf_float+0x1e2>
 8006302:	f04f 30ff 	mov.w	r0, #4294967295
 8006306:	b00d      	add	sp, #52	; 0x34
 8006308:	ecbd 8b02 	vpop	{d8}
 800630c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006310:	4642      	mov	r2, r8
 8006312:	464b      	mov	r3, r9
 8006314:	4640      	mov	r0, r8
 8006316:	4649      	mov	r1, r9
 8006318:	f7fa fbe8 	bl	8000aec <__aeabi_dcmpun>
 800631c:	b140      	cbz	r0, 8006330 <_printf_float+0xf0>
 800631e:	464b      	mov	r3, r9
 8006320:	2b00      	cmp	r3, #0
 8006322:	bfbc      	itt	lt
 8006324:	232d      	movlt	r3, #45	; 0x2d
 8006326:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800632a:	487f      	ldr	r0, [pc, #508]	; (8006528 <_printf_float+0x2e8>)
 800632c:	4b7f      	ldr	r3, [pc, #508]	; (800652c <_printf_float+0x2ec>)
 800632e:	e7d1      	b.n	80062d4 <_printf_float+0x94>
 8006330:	6863      	ldr	r3, [r4, #4]
 8006332:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006336:	9206      	str	r2, [sp, #24]
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	d13f      	bne.n	80063bc <_printf_float+0x17c>
 800633c:	2306      	movs	r3, #6
 800633e:	6063      	str	r3, [r4, #4]
 8006340:	9b05      	ldr	r3, [sp, #20]
 8006342:	6861      	ldr	r1, [r4, #4]
 8006344:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006348:	2300      	movs	r3, #0
 800634a:	9303      	str	r3, [sp, #12]
 800634c:	ab0a      	add	r3, sp, #40	; 0x28
 800634e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006352:	ab09      	add	r3, sp, #36	; 0x24
 8006354:	ec49 8b10 	vmov	d0, r8, r9
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	6022      	str	r2, [r4, #0]
 800635c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006360:	4628      	mov	r0, r5
 8006362:	f7ff fecd 	bl	8006100 <__cvt>
 8006366:	9b06      	ldr	r3, [sp, #24]
 8006368:	9909      	ldr	r1, [sp, #36]	; 0x24
 800636a:	2b47      	cmp	r3, #71	; 0x47
 800636c:	4680      	mov	r8, r0
 800636e:	d108      	bne.n	8006382 <_printf_float+0x142>
 8006370:	1cc8      	adds	r0, r1, #3
 8006372:	db02      	blt.n	800637a <_printf_float+0x13a>
 8006374:	6863      	ldr	r3, [r4, #4]
 8006376:	4299      	cmp	r1, r3
 8006378:	dd41      	ble.n	80063fe <_printf_float+0x1be>
 800637a:	f1ab 0b02 	sub.w	fp, fp, #2
 800637e:	fa5f fb8b 	uxtb.w	fp, fp
 8006382:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006386:	d820      	bhi.n	80063ca <_printf_float+0x18a>
 8006388:	3901      	subs	r1, #1
 800638a:	465a      	mov	r2, fp
 800638c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006390:	9109      	str	r1, [sp, #36]	; 0x24
 8006392:	f7ff ff17 	bl	80061c4 <__exponent>
 8006396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006398:	1813      	adds	r3, r2, r0
 800639a:	2a01      	cmp	r2, #1
 800639c:	4681      	mov	r9, r0
 800639e:	6123      	str	r3, [r4, #16]
 80063a0:	dc02      	bgt.n	80063a8 <_printf_float+0x168>
 80063a2:	6822      	ldr	r2, [r4, #0]
 80063a4:	07d2      	lsls	r2, r2, #31
 80063a6:	d501      	bpl.n	80063ac <_printf_float+0x16c>
 80063a8:	3301      	adds	r3, #1
 80063aa:	6123      	str	r3, [r4, #16]
 80063ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d09c      	beq.n	80062ee <_printf_float+0xae>
 80063b4:	232d      	movs	r3, #45	; 0x2d
 80063b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063ba:	e798      	b.n	80062ee <_printf_float+0xae>
 80063bc:	9a06      	ldr	r2, [sp, #24]
 80063be:	2a47      	cmp	r2, #71	; 0x47
 80063c0:	d1be      	bne.n	8006340 <_printf_float+0x100>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1bc      	bne.n	8006340 <_printf_float+0x100>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e7b9      	b.n	800633e <_printf_float+0xfe>
 80063ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80063ce:	d118      	bne.n	8006402 <_printf_float+0x1c2>
 80063d0:	2900      	cmp	r1, #0
 80063d2:	6863      	ldr	r3, [r4, #4]
 80063d4:	dd0b      	ble.n	80063ee <_printf_float+0x1ae>
 80063d6:	6121      	str	r1, [r4, #16]
 80063d8:	b913      	cbnz	r3, 80063e0 <_printf_float+0x1a0>
 80063da:	6822      	ldr	r2, [r4, #0]
 80063dc:	07d0      	lsls	r0, r2, #31
 80063de:	d502      	bpl.n	80063e6 <_printf_float+0x1a6>
 80063e0:	3301      	adds	r3, #1
 80063e2:	440b      	add	r3, r1
 80063e4:	6123      	str	r3, [r4, #16]
 80063e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80063e8:	f04f 0900 	mov.w	r9, #0
 80063ec:	e7de      	b.n	80063ac <_printf_float+0x16c>
 80063ee:	b913      	cbnz	r3, 80063f6 <_printf_float+0x1b6>
 80063f0:	6822      	ldr	r2, [r4, #0]
 80063f2:	07d2      	lsls	r2, r2, #31
 80063f4:	d501      	bpl.n	80063fa <_printf_float+0x1ba>
 80063f6:	3302      	adds	r3, #2
 80063f8:	e7f4      	b.n	80063e4 <_printf_float+0x1a4>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e7f2      	b.n	80063e4 <_printf_float+0x1a4>
 80063fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006404:	4299      	cmp	r1, r3
 8006406:	db05      	blt.n	8006414 <_printf_float+0x1d4>
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	6121      	str	r1, [r4, #16]
 800640c:	07d8      	lsls	r0, r3, #31
 800640e:	d5ea      	bpl.n	80063e6 <_printf_float+0x1a6>
 8006410:	1c4b      	adds	r3, r1, #1
 8006412:	e7e7      	b.n	80063e4 <_printf_float+0x1a4>
 8006414:	2900      	cmp	r1, #0
 8006416:	bfd4      	ite	le
 8006418:	f1c1 0202 	rsble	r2, r1, #2
 800641c:	2201      	movgt	r2, #1
 800641e:	4413      	add	r3, r2
 8006420:	e7e0      	b.n	80063e4 <_printf_float+0x1a4>
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	055a      	lsls	r2, r3, #21
 8006426:	d407      	bmi.n	8006438 <_printf_float+0x1f8>
 8006428:	6923      	ldr	r3, [r4, #16]
 800642a:	4642      	mov	r2, r8
 800642c:	4631      	mov	r1, r6
 800642e:	4628      	mov	r0, r5
 8006430:	47b8      	blx	r7
 8006432:	3001      	adds	r0, #1
 8006434:	d12c      	bne.n	8006490 <_printf_float+0x250>
 8006436:	e764      	b.n	8006302 <_printf_float+0xc2>
 8006438:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800643c:	f240 80e0 	bls.w	8006600 <_printf_float+0x3c0>
 8006440:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006444:	2200      	movs	r2, #0
 8006446:	2300      	movs	r3, #0
 8006448:	f7fa fb1e 	bl	8000a88 <__aeabi_dcmpeq>
 800644c:	2800      	cmp	r0, #0
 800644e:	d034      	beq.n	80064ba <_printf_float+0x27a>
 8006450:	4a37      	ldr	r2, [pc, #220]	; (8006530 <_printf_float+0x2f0>)
 8006452:	2301      	movs	r3, #1
 8006454:	4631      	mov	r1, r6
 8006456:	4628      	mov	r0, r5
 8006458:	47b8      	blx	r7
 800645a:	3001      	adds	r0, #1
 800645c:	f43f af51 	beq.w	8006302 <_printf_float+0xc2>
 8006460:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006464:	429a      	cmp	r2, r3
 8006466:	db02      	blt.n	800646e <_printf_float+0x22e>
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	07d8      	lsls	r0, r3, #31
 800646c:	d510      	bpl.n	8006490 <_printf_float+0x250>
 800646e:	ee18 3a10 	vmov	r3, s16
 8006472:	4652      	mov	r2, sl
 8006474:	4631      	mov	r1, r6
 8006476:	4628      	mov	r0, r5
 8006478:	47b8      	blx	r7
 800647a:	3001      	adds	r0, #1
 800647c:	f43f af41 	beq.w	8006302 <_printf_float+0xc2>
 8006480:	f04f 0800 	mov.w	r8, #0
 8006484:	f104 091a 	add.w	r9, r4, #26
 8006488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800648a:	3b01      	subs	r3, #1
 800648c:	4543      	cmp	r3, r8
 800648e:	dc09      	bgt.n	80064a4 <_printf_float+0x264>
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	079b      	lsls	r3, r3, #30
 8006494:	f100 8105 	bmi.w	80066a2 <_printf_float+0x462>
 8006498:	68e0      	ldr	r0, [r4, #12]
 800649a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800649c:	4298      	cmp	r0, r3
 800649e:	bfb8      	it	lt
 80064a0:	4618      	movlt	r0, r3
 80064a2:	e730      	b.n	8006306 <_printf_float+0xc6>
 80064a4:	2301      	movs	r3, #1
 80064a6:	464a      	mov	r2, r9
 80064a8:	4631      	mov	r1, r6
 80064aa:	4628      	mov	r0, r5
 80064ac:	47b8      	blx	r7
 80064ae:	3001      	adds	r0, #1
 80064b0:	f43f af27 	beq.w	8006302 <_printf_float+0xc2>
 80064b4:	f108 0801 	add.w	r8, r8, #1
 80064b8:	e7e6      	b.n	8006488 <_printf_float+0x248>
 80064ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064bc:	2b00      	cmp	r3, #0
 80064be:	dc39      	bgt.n	8006534 <_printf_float+0x2f4>
 80064c0:	4a1b      	ldr	r2, [pc, #108]	; (8006530 <_printf_float+0x2f0>)
 80064c2:	2301      	movs	r3, #1
 80064c4:	4631      	mov	r1, r6
 80064c6:	4628      	mov	r0, r5
 80064c8:	47b8      	blx	r7
 80064ca:	3001      	adds	r0, #1
 80064cc:	f43f af19 	beq.w	8006302 <_printf_float+0xc2>
 80064d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064d4:	4313      	orrs	r3, r2
 80064d6:	d102      	bne.n	80064de <_printf_float+0x29e>
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	07d9      	lsls	r1, r3, #31
 80064dc:	d5d8      	bpl.n	8006490 <_printf_float+0x250>
 80064de:	ee18 3a10 	vmov	r3, s16
 80064e2:	4652      	mov	r2, sl
 80064e4:	4631      	mov	r1, r6
 80064e6:	4628      	mov	r0, r5
 80064e8:	47b8      	blx	r7
 80064ea:	3001      	adds	r0, #1
 80064ec:	f43f af09 	beq.w	8006302 <_printf_float+0xc2>
 80064f0:	f04f 0900 	mov.w	r9, #0
 80064f4:	f104 0a1a 	add.w	sl, r4, #26
 80064f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fa:	425b      	negs	r3, r3
 80064fc:	454b      	cmp	r3, r9
 80064fe:	dc01      	bgt.n	8006504 <_printf_float+0x2c4>
 8006500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006502:	e792      	b.n	800642a <_printf_float+0x1ea>
 8006504:	2301      	movs	r3, #1
 8006506:	4652      	mov	r2, sl
 8006508:	4631      	mov	r1, r6
 800650a:	4628      	mov	r0, r5
 800650c:	47b8      	blx	r7
 800650e:	3001      	adds	r0, #1
 8006510:	f43f aef7 	beq.w	8006302 <_printf_float+0xc2>
 8006514:	f109 0901 	add.w	r9, r9, #1
 8006518:	e7ee      	b.n	80064f8 <_printf_float+0x2b8>
 800651a:	bf00      	nop
 800651c:	7fefffff 	.word	0x7fefffff
 8006520:	0800a755 	.word	0x0800a755
 8006524:	0800a759 	.word	0x0800a759
 8006528:	0800a761 	.word	0x0800a761
 800652c:	0800a75d 	.word	0x0800a75d
 8006530:	0800a765 	.word	0x0800a765
 8006534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006536:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006538:	429a      	cmp	r2, r3
 800653a:	bfa8      	it	ge
 800653c:	461a      	movge	r2, r3
 800653e:	2a00      	cmp	r2, #0
 8006540:	4691      	mov	r9, r2
 8006542:	dc37      	bgt.n	80065b4 <_printf_float+0x374>
 8006544:	f04f 0b00 	mov.w	fp, #0
 8006548:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800654c:	f104 021a 	add.w	r2, r4, #26
 8006550:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006552:	9305      	str	r3, [sp, #20]
 8006554:	eba3 0309 	sub.w	r3, r3, r9
 8006558:	455b      	cmp	r3, fp
 800655a:	dc33      	bgt.n	80065c4 <_printf_float+0x384>
 800655c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006560:	429a      	cmp	r2, r3
 8006562:	db3b      	blt.n	80065dc <_printf_float+0x39c>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	07da      	lsls	r2, r3, #31
 8006568:	d438      	bmi.n	80065dc <_printf_float+0x39c>
 800656a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800656c:	9a05      	ldr	r2, [sp, #20]
 800656e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006570:	1a9a      	subs	r2, r3, r2
 8006572:	eba3 0901 	sub.w	r9, r3, r1
 8006576:	4591      	cmp	r9, r2
 8006578:	bfa8      	it	ge
 800657a:	4691      	movge	r9, r2
 800657c:	f1b9 0f00 	cmp.w	r9, #0
 8006580:	dc35      	bgt.n	80065ee <_printf_float+0x3ae>
 8006582:	f04f 0800 	mov.w	r8, #0
 8006586:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800658a:	f104 0a1a 	add.w	sl, r4, #26
 800658e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006592:	1a9b      	subs	r3, r3, r2
 8006594:	eba3 0309 	sub.w	r3, r3, r9
 8006598:	4543      	cmp	r3, r8
 800659a:	f77f af79 	ble.w	8006490 <_printf_float+0x250>
 800659e:	2301      	movs	r3, #1
 80065a0:	4652      	mov	r2, sl
 80065a2:	4631      	mov	r1, r6
 80065a4:	4628      	mov	r0, r5
 80065a6:	47b8      	blx	r7
 80065a8:	3001      	adds	r0, #1
 80065aa:	f43f aeaa 	beq.w	8006302 <_printf_float+0xc2>
 80065ae:	f108 0801 	add.w	r8, r8, #1
 80065b2:	e7ec      	b.n	800658e <_printf_float+0x34e>
 80065b4:	4613      	mov	r3, r2
 80065b6:	4631      	mov	r1, r6
 80065b8:	4642      	mov	r2, r8
 80065ba:	4628      	mov	r0, r5
 80065bc:	47b8      	blx	r7
 80065be:	3001      	adds	r0, #1
 80065c0:	d1c0      	bne.n	8006544 <_printf_float+0x304>
 80065c2:	e69e      	b.n	8006302 <_printf_float+0xc2>
 80065c4:	2301      	movs	r3, #1
 80065c6:	4631      	mov	r1, r6
 80065c8:	4628      	mov	r0, r5
 80065ca:	9205      	str	r2, [sp, #20]
 80065cc:	47b8      	blx	r7
 80065ce:	3001      	adds	r0, #1
 80065d0:	f43f ae97 	beq.w	8006302 <_printf_float+0xc2>
 80065d4:	9a05      	ldr	r2, [sp, #20]
 80065d6:	f10b 0b01 	add.w	fp, fp, #1
 80065da:	e7b9      	b.n	8006550 <_printf_float+0x310>
 80065dc:	ee18 3a10 	vmov	r3, s16
 80065e0:	4652      	mov	r2, sl
 80065e2:	4631      	mov	r1, r6
 80065e4:	4628      	mov	r0, r5
 80065e6:	47b8      	blx	r7
 80065e8:	3001      	adds	r0, #1
 80065ea:	d1be      	bne.n	800656a <_printf_float+0x32a>
 80065ec:	e689      	b.n	8006302 <_printf_float+0xc2>
 80065ee:	9a05      	ldr	r2, [sp, #20]
 80065f0:	464b      	mov	r3, r9
 80065f2:	4442      	add	r2, r8
 80065f4:	4631      	mov	r1, r6
 80065f6:	4628      	mov	r0, r5
 80065f8:	47b8      	blx	r7
 80065fa:	3001      	adds	r0, #1
 80065fc:	d1c1      	bne.n	8006582 <_printf_float+0x342>
 80065fe:	e680      	b.n	8006302 <_printf_float+0xc2>
 8006600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006602:	2a01      	cmp	r2, #1
 8006604:	dc01      	bgt.n	800660a <_printf_float+0x3ca>
 8006606:	07db      	lsls	r3, r3, #31
 8006608:	d538      	bpl.n	800667c <_printf_float+0x43c>
 800660a:	2301      	movs	r3, #1
 800660c:	4642      	mov	r2, r8
 800660e:	4631      	mov	r1, r6
 8006610:	4628      	mov	r0, r5
 8006612:	47b8      	blx	r7
 8006614:	3001      	adds	r0, #1
 8006616:	f43f ae74 	beq.w	8006302 <_printf_float+0xc2>
 800661a:	ee18 3a10 	vmov	r3, s16
 800661e:	4652      	mov	r2, sl
 8006620:	4631      	mov	r1, r6
 8006622:	4628      	mov	r0, r5
 8006624:	47b8      	blx	r7
 8006626:	3001      	adds	r0, #1
 8006628:	f43f ae6b 	beq.w	8006302 <_printf_float+0xc2>
 800662c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006630:	2200      	movs	r2, #0
 8006632:	2300      	movs	r3, #0
 8006634:	f7fa fa28 	bl	8000a88 <__aeabi_dcmpeq>
 8006638:	b9d8      	cbnz	r0, 8006672 <_printf_float+0x432>
 800663a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800663c:	f108 0201 	add.w	r2, r8, #1
 8006640:	3b01      	subs	r3, #1
 8006642:	4631      	mov	r1, r6
 8006644:	4628      	mov	r0, r5
 8006646:	47b8      	blx	r7
 8006648:	3001      	adds	r0, #1
 800664a:	d10e      	bne.n	800666a <_printf_float+0x42a>
 800664c:	e659      	b.n	8006302 <_printf_float+0xc2>
 800664e:	2301      	movs	r3, #1
 8006650:	4652      	mov	r2, sl
 8006652:	4631      	mov	r1, r6
 8006654:	4628      	mov	r0, r5
 8006656:	47b8      	blx	r7
 8006658:	3001      	adds	r0, #1
 800665a:	f43f ae52 	beq.w	8006302 <_printf_float+0xc2>
 800665e:	f108 0801 	add.w	r8, r8, #1
 8006662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006664:	3b01      	subs	r3, #1
 8006666:	4543      	cmp	r3, r8
 8006668:	dcf1      	bgt.n	800664e <_printf_float+0x40e>
 800666a:	464b      	mov	r3, r9
 800666c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006670:	e6dc      	b.n	800642c <_printf_float+0x1ec>
 8006672:	f04f 0800 	mov.w	r8, #0
 8006676:	f104 0a1a 	add.w	sl, r4, #26
 800667a:	e7f2      	b.n	8006662 <_printf_float+0x422>
 800667c:	2301      	movs	r3, #1
 800667e:	4642      	mov	r2, r8
 8006680:	e7df      	b.n	8006642 <_printf_float+0x402>
 8006682:	2301      	movs	r3, #1
 8006684:	464a      	mov	r2, r9
 8006686:	4631      	mov	r1, r6
 8006688:	4628      	mov	r0, r5
 800668a:	47b8      	blx	r7
 800668c:	3001      	adds	r0, #1
 800668e:	f43f ae38 	beq.w	8006302 <_printf_float+0xc2>
 8006692:	f108 0801 	add.w	r8, r8, #1
 8006696:	68e3      	ldr	r3, [r4, #12]
 8006698:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800669a:	1a5b      	subs	r3, r3, r1
 800669c:	4543      	cmp	r3, r8
 800669e:	dcf0      	bgt.n	8006682 <_printf_float+0x442>
 80066a0:	e6fa      	b.n	8006498 <_printf_float+0x258>
 80066a2:	f04f 0800 	mov.w	r8, #0
 80066a6:	f104 0919 	add.w	r9, r4, #25
 80066aa:	e7f4      	b.n	8006696 <_printf_float+0x456>

080066ac <_printf_common>:
 80066ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b0:	4616      	mov	r6, r2
 80066b2:	4699      	mov	r9, r3
 80066b4:	688a      	ldr	r2, [r1, #8]
 80066b6:	690b      	ldr	r3, [r1, #16]
 80066b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066bc:	4293      	cmp	r3, r2
 80066be:	bfb8      	it	lt
 80066c0:	4613      	movlt	r3, r2
 80066c2:	6033      	str	r3, [r6, #0]
 80066c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066c8:	4607      	mov	r7, r0
 80066ca:	460c      	mov	r4, r1
 80066cc:	b10a      	cbz	r2, 80066d2 <_printf_common+0x26>
 80066ce:	3301      	adds	r3, #1
 80066d0:	6033      	str	r3, [r6, #0]
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	0699      	lsls	r1, r3, #26
 80066d6:	bf42      	ittt	mi
 80066d8:	6833      	ldrmi	r3, [r6, #0]
 80066da:	3302      	addmi	r3, #2
 80066dc:	6033      	strmi	r3, [r6, #0]
 80066de:	6825      	ldr	r5, [r4, #0]
 80066e0:	f015 0506 	ands.w	r5, r5, #6
 80066e4:	d106      	bne.n	80066f4 <_printf_common+0x48>
 80066e6:	f104 0a19 	add.w	sl, r4, #25
 80066ea:	68e3      	ldr	r3, [r4, #12]
 80066ec:	6832      	ldr	r2, [r6, #0]
 80066ee:	1a9b      	subs	r3, r3, r2
 80066f0:	42ab      	cmp	r3, r5
 80066f2:	dc26      	bgt.n	8006742 <_printf_common+0x96>
 80066f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066f8:	1e13      	subs	r3, r2, #0
 80066fa:	6822      	ldr	r2, [r4, #0]
 80066fc:	bf18      	it	ne
 80066fe:	2301      	movne	r3, #1
 8006700:	0692      	lsls	r2, r2, #26
 8006702:	d42b      	bmi.n	800675c <_printf_common+0xb0>
 8006704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006708:	4649      	mov	r1, r9
 800670a:	4638      	mov	r0, r7
 800670c:	47c0      	blx	r8
 800670e:	3001      	adds	r0, #1
 8006710:	d01e      	beq.n	8006750 <_printf_common+0xa4>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	68e5      	ldr	r5, [r4, #12]
 8006716:	6832      	ldr	r2, [r6, #0]
 8006718:	f003 0306 	and.w	r3, r3, #6
 800671c:	2b04      	cmp	r3, #4
 800671e:	bf08      	it	eq
 8006720:	1aad      	subeq	r5, r5, r2
 8006722:	68a3      	ldr	r3, [r4, #8]
 8006724:	6922      	ldr	r2, [r4, #16]
 8006726:	bf0c      	ite	eq
 8006728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800672c:	2500      	movne	r5, #0
 800672e:	4293      	cmp	r3, r2
 8006730:	bfc4      	itt	gt
 8006732:	1a9b      	subgt	r3, r3, r2
 8006734:	18ed      	addgt	r5, r5, r3
 8006736:	2600      	movs	r6, #0
 8006738:	341a      	adds	r4, #26
 800673a:	42b5      	cmp	r5, r6
 800673c:	d11a      	bne.n	8006774 <_printf_common+0xc8>
 800673e:	2000      	movs	r0, #0
 8006740:	e008      	b.n	8006754 <_printf_common+0xa8>
 8006742:	2301      	movs	r3, #1
 8006744:	4652      	mov	r2, sl
 8006746:	4649      	mov	r1, r9
 8006748:	4638      	mov	r0, r7
 800674a:	47c0      	blx	r8
 800674c:	3001      	adds	r0, #1
 800674e:	d103      	bne.n	8006758 <_printf_common+0xac>
 8006750:	f04f 30ff 	mov.w	r0, #4294967295
 8006754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006758:	3501      	adds	r5, #1
 800675a:	e7c6      	b.n	80066ea <_printf_common+0x3e>
 800675c:	18e1      	adds	r1, r4, r3
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	2030      	movs	r0, #48	; 0x30
 8006762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006766:	4422      	add	r2, r4
 8006768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800676c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006770:	3302      	adds	r3, #2
 8006772:	e7c7      	b.n	8006704 <_printf_common+0x58>
 8006774:	2301      	movs	r3, #1
 8006776:	4622      	mov	r2, r4
 8006778:	4649      	mov	r1, r9
 800677a:	4638      	mov	r0, r7
 800677c:	47c0      	blx	r8
 800677e:	3001      	adds	r0, #1
 8006780:	d0e6      	beq.n	8006750 <_printf_common+0xa4>
 8006782:	3601      	adds	r6, #1
 8006784:	e7d9      	b.n	800673a <_printf_common+0x8e>
	...

08006788 <_printf_i>:
 8006788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800678c:	7e0f      	ldrb	r7, [r1, #24]
 800678e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006790:	2f78      	cmp	r7, #120	; 0x78
 8006792:	4691      	mov	r9, r2
 8006794:	4680      	mov	r8, r0
 8006796:	460c      	mov	r4, r1
 8006798:	469a      	mov	sl, r3
 800679a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800679e:	d807      	bhi.n	80067b0 <_printf_i+0x28>
 80067a0:	2f62      	cmp	r7, #98	; 0x62
 80067a2:	d80a      	bhi.n	80067ba <_printf_i+0x32>
 80067a4:	2f00      	cmp	r7, #0
 80067a6:	f000 80d8 	beq.w	800695a <_printf_i+0x1d2>
 80067aa:	2f58      	cmp	r7, #88	; 0x58
 80067ac:	f000 80a3 	beq.w	80068f6 <_printf_i+0x16e>
 80067b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067b8:	e03a      	b.n	8006830 <_printf_i+0xa8>
 80067ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067be:	2b15      	cmp	r3, #21
 80067c0:	d8f6      	bhi.n	80067b0 <_printf_i+0x28>
 80067c2:	a101      	add	r1, pc, #4	; (adr r1, 80067c8 <_printf_i+0x40>)
 80067c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067c8:	08006821 	.word	0x08006821
 80067cc:	08006835 	.word	0x08006835
 80067d0:	080067b1 	.word	0x080067b1
 80067d4:	080067b1 	.word	0x080067b1
 80067d8:	080067b1 	.word	0x080067b1
 80067dc:	080067b1 	.word	0x080067b1
 80067e0:	08006835 	.word	0x08006835
 80067e4:	080067b1 	.word	0x080067b1
 80067e8:	080067b1 	.word	0x080067b1
 80067ec:	080067b1 	.word	0x080067b1
 80067f0:	080067b1 	.word	0x080067b1
 80067f4:	08006941 	.word	0x08006941
 80067f8:	08006865 	.word	0x08006865
 80067fc:	08006923 	.word	0x08006923
 8006800:	080067b1 	.word	0x080067b1
 8006804:	080067b1 	.word	0x080067b1
 8006808:	08006963 	.word	0x08006963
 800680c:	080067b1 	.word	0x080067b1
 8006810:	08006865 	.word	0x08006865
 8006814:	080067b1 	.word	0x080067b1
 8006818:	080067b1 	.word	0x080067b1
 800681c:	0800692b 	.word	0x0800692b
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	1d1a      	adds	r2, r3, #4
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	602a      	str	r2, [r5, #0]
 8006828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800682c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006830:	2301      	movs	r3, #1
 8006832:	e0a3      	b.n	800697c <_printf_i+0x1f4>
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	6829      	ldr	r1, [r5, #0]
 8006838:	0606      	lsls	r6, r0, #24
 800683a:	f101 0304 	add.w	r3, r1, #4
 800683e:	d50a      	bpl.n	8006856 <_printf_i+0xce>
 8006840:	680e      	ldr	r6, [r1, #0]
 8006842:	602b      	str	r3, [r5, #0]
 8006844:	2e00      	cmp	r6, #0
 8006846:	da03      	bge.n	8006850 <_printf_i+0xc8>
 8006848:	232d      	movs	r3, #45	; 0x2d
 800684a:	4276      	negs	r6, r6
 800684c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006850:	485e      	ldr	r0, [pc, #376]	; (80069cc <_printf_i+0x244>)
 8006852:	230a      	movs	r3, #10
 8006854:	e019      	b.n	800688a <_printf_i+0x102>
 8006856:	680e      	ldr	r6, [r1, #0]
 8006858:	602b      	str	r3, [r5, #0]
 800685a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800685e:	bf18      	it	ne
 8006860:	b236      	sxthne	r6, r6
 8006862:	e7ef      	b.n	8006844 <_printf_i+0xbc>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	6820      	ldr	r0, [r4, #0]
 8006868:	1d19      	adds	r1, r3, #4
 800686a:	6029      	str	r1, [r5, #0]
 800686c:	0601      	lsls	r1, r0, #24
 800686e:	d501      	bpl.n	8006874 <_printf_i+0xec>
 8006870:	681e      	ldr	r6, [r3, #0]
 8006872:	e002      	b.n	800687a <_printf_i+0xf2>
 8006874:	0646      	lsls	r6, r0, #25
 8006876:	d5fb      	bpl.n	8006870 <_printf_i+0xe8>
 8006878:	881e      	ldrh	r6, [r3, #0]
 800687a:	4854      	ldr	r0, [pc, #336]	; (80069cc <_printf_i+0x244>)
 800687c:	2f6f      	cmp	r7, #111	; 0x6f
 800687e:	bf0c      	ite	eq
 8006880:	2308      	moveq	r3, #8
 8006882:	230a      	movne	r3, #10
 8006884:	2100      	movs	r1, #0
 8006886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800688a:	6865      	ldr	r5, [r4, #4]
 800688c:	60a5      	str	r5, [r4, #8]
 800688e:	2d00      	cmp	r5, #0
 8006890:	bfa2      	ittt	ge
 8006892:	6821      	ldrge	r1, [r4, #0]
 8006894:	f021 0104 	bicge.w	r1, r1, #4
 8006898:	6021      	strge	r1, [r4, #0]
 800689a:	b90e      	cbnz	r6, 80068a0 <_printf_i+0x118>
 800689c:	2d00      	cmp	r5, #0
 800689e:	d04d      	beq.n	800693c <_printf_i+0x1b4>
 80068a0:	4615      	mov	r5, r2
 80068a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80068a6:	fb03 6711 	mls	r7, r3, r1, r6
 80068aa:	5dc7      	ldrb	r7, [r0, r7]
 80068ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068b0:	4637      	mov	r7, r6
 80068b2:	42bb      	cmp	r3, r7
 80068b4:	460e      	mov	r6, r1
 80068b6:	d9f4      	bls.n	80068a2 <_printf_i+0x11a>
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d10b      	bne.n	80068d4 <_printf_i+0x14c>
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	07de      	lsls	r6, r3, #31
 80068c0:	d508      	bpl.n	80068d4 <_printf_i+0x14c>
 80068c2:	6923      	ldr	r3, [r4, #16]
 80068c4:	6861      	ldr	r1, [r4, #4]
 80068c6:	4299      	cmp	r1, r3
 80068c8:	bfde      	ittt	le
 80068ca:	2330      	movle	r3, #48	; 0x30
 80068cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068d4:	1b52      	subs	r2, r2, r5
 80068d6:	6122      	str	r2, [r4, #16]
 80068d8:	f8cd a000 	str.w	sl, [sp]
 80068dc:	464b      	mov	r3, r9
 80068de:	aa03      	add	r2, sp, #12
 80068e0:	4621      	mov	r1, r4
 80068e2:	4640      	mov	r0, r8
 80068e4:	f7ff fee2 	bl	80066ac <_printf_common>
 80068e8:	3001      	adds	r0, #1
 80068ea:	d14c      	bne.n	8006986 <_printf_i+0x1fe>
 80068ec:	f04f 30ff 	mov.w	r0, #4294967295
 80068f0:	b004      	add	sp, #16
 80068f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f6:	4835      	ldr	r0, [pc, #212]	; (80069cc <_printf_i+0x244>)
 80068f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068fc:	6829      	ldr	r1, [r5, #0]
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	f851 6b04 	ldr.w	r6, [r1], #4
 8006904:	6029      	str	r1, [r5, #0]
 8006906:	061d      	lsls	r5, r3, #24
 8006908:	d514      	bpl.n	8006934 <_printf_i+0x1ac>
 800690a:	07df      	lsls	r7, r3, #31
 800690c:	bf44      	itt	mi
 800690e:	f043 0320 	orrmi.w	r3, r3, #32
 8006912:	6023      	strmi	r3, [r4, #0]
 8006914:	b91e      	cbnz	r6, 800691e <_printf_i+0x196>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	f023 0320 	bic.w	r3, r3, #32
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	2310      	movs	r3, #16
 8006920:	e7b0      	b.n	8006884 <_printf_i+0xfc>
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	f043 0320 	orr.w	r3, r3, #32
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	2378      	movs	r3, #120	; 0x78
 800692c:	4828      	ldr	r0, [pc, #160]	; (80069d0 <_printf_i+0x248>)
 800692e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006932:	e7e3      	b.n	80068fc <_printf_i+0x174>
 8006934:	0659      	lsls	r1, r3, #25
 8006936:	bf48      	it	mi
 8006938:	b2b6      	uxthmi	r6, r6
 800693a:	e7e6      	b.n	800690a <_printf_i+0x182>
 800693c:	4615      	mov	r5, r2
 800693e:	e7bb      	b.n	80068b8 <_printf_i+0x130>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	6826      	ldr	r6, [r4, #0]
 8006944:	6961      	ldr	r1, [r4, #20]
 8006946:	1d18      	adds	r0, r3, #4
 8006948:	6028      	str	r0, [r5, #0]
 800694a:	0635      	lsls	r5, r6, #24
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	d501      	bpl.n	8006954 <_printf_i+0x1cc>
 8006950:	6019      	str	r1, [r3, #0]
 8006952:	e002      	b.n	800695a <_printf_i+0x1d2>
 8006954:	0670      	lsls	r0, r6, #25
 8006956:	d5fb      	bpl.n	8006950 <_printf_i+0x1c8>
 8006958:	8019      	strh	r1, [r3, #0]
 800695a:	2300      	movs	r3, #0
 800695c:	6123      	str	r3, [r4, #16]
 800695e:	4615      	mov	r5, r2
 8006960:	e7ba      	b.n	80068d8 <_printf_i+0x150>
 8006962:	682b      	ldr	r3, [r5, #0]
 8006964:	1d1a      	adds	r2, r3, #4
 8006966:	602a      	str	r2, [r5, #0]
 8006968:	681d      	ldr	r5, [r3, #0]
 800696a:	6862      	ldr	r2, [r4, #4]
 800696c:	2100      	movs	r1, #0
 800696e:	4628      	mov	r0, r5
 8006970:	f7f9 fc16 	bl	80001a0 <memchr>
 8006974:	b108      	cbz	r0, 800697a <_printf_i+0x1f2>
 8006976:	1b40      	subs	r0, r0, r5
 8006978:	6060      	str	r0, [r4, #4]
 800697a:	6863      	ldr	r3, [r4, #4]
 800697c:	6123      	str	r3, [r4, #16]
 800697e:	2300      	movs	r3, #0
 8006980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006984:	e7a8      	b.n	80068d8 <_printf_i+0x150>
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	462a      	mov	r2, r5
 800698a:	4649      	mov	r1, r9
 800698c:	4640      	mov	r0, r8
 800698e:	47d0      	blx	sl
 8006990:	3001      	adds	r0, #1
 8006992:	d0ab      	beq.n	80068ec <_printf_i+0x164>
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	079b      	lsls	r3, r3, #30
 8006998:	d413      	bmi.n	80069c2 <_printf_i+0x23a>
 800699a:	68e0      	ldr	r0, [r4, #12]
 800699c:	9b03      	ldr	r3, [sp, #12]
 800699e:	4298      	cmp	r0, r3
 80069a0:	bfb8      	it	lt
 80069a2:	4618      	movlt	r0, r3
 80069a4:	e7a4      	b.n	80068f0 <_printf_i+0x168>
 80069a6:	2301      	movs	r3, #1
 80069a8:	4632      	mov	r2, r6
 80069aa:	4649      	mov	r1, r9
 80069ac:	4640      	mov	r0, r8
 80069ae:	47d0      	blx	sl
 80069b0:	3001      	adds	r0, #1
 80069b2:	d09b      	beq.n	80068ec <_printf_i+0x164>
 80069b4:	3501      	adds	r5, #1
 80069b6:	68e3      	ldr	r3, [r4, #12]
 80069b8:	9903      	ldr	r1, [sp, #12]
 80069ba:	1a5b      	subs	r3, r3, r1
 80069bc:	42ab      	cmp	r3, r5
 80069be:	dcf2      	bgt.n	80069a6 <_printf_i+0x21e>
 80069c0:	e7eb      	b.n	800699a <_printf_i+0x212>
 80069c2:	2500      	movs	r5, #0
 80069c4:	f104 0619 	add.w	r6, r4, #25
 80069c8:	e7f5      	b.n	80069b6 <_printf_i+0x22e>
 80069ca:	bf00      	nop
 80069cc:	0800a767 	.word	0x0800a767
 80069d0:	0800a778 	.word	0x0800a778

080069d4 <_scanf_float>:
 80069d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d8:	b087      	sub	sp, #28
 80069da:	4617      	mov	r7, r2
 80069dc:	9303      	str	r3, [sp, #12]
 80069de:	688b      	ldr	r3, [r1, #8]
 80069e0:	1e5a      	subs	r2, r3, #1
 80069e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80069e6:	bf83      	ittte	hi
 80069e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80069ec:	195b      	addhi	r3, r3, r5
 80069ee:	9302      	strhi	r3, [sp, #8]
 80069f0:	2300      	movls	r3, #0
 80069f2:	bf86      	itte	hi
 80069f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80069f8:	608b      	strhi	r3, [r1, #8]
 80069fa:	9302      	strls	r3, [sp, #8]
 80069fc:	680b      	ldr	r3, [r1, #0]
 80069fe:	468b      	mov	fp, r1
 8006a00:	2500      	movs	r5, #0
 8006a02:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006a06:	f84b 3b1c 	str.w	r3, [fp], #28
 8006a0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a0e:	4680      	mov	r8, r0
 8006a10:	460c      	mov	r4, r1
 8006a12:	465e      	mov	r6, fp
 8006a14:	46aa      	mov	sl, r5
 8006a16:	46a9      	mov	r9, r5
 8006a18:	9501      	str	r5, [sp, #4]
 8006a1a:	68a2      	ldr	r2, [r4, #8]
 8006a1c:	b152      	cbz	r2, 8006a34 <_scanf_float+0x60>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b4e      	cmp	r3, #78	; 0x4e
 8006a24:	d864      	bhi.n	8006af0 <_scanf_float+0x11c>
 8006a26:	2b40      	cmp	r3, #64	; 0x40
 8006a28:	d83c      	bhi.n	8006aa4 <_scanf_float+0xd0>
 8006a2a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006a2e:	b2c8      	uxtb	r0, r1
 8006a30:	280e      	cmp	r0, #14
 8006a32:	d93a      	bls.n	8006aaa <_scanf_float+0xd6>
 8006a34:	f1b9 0f00 	cmp.w	r9, #0
 8006a38:	d003      	beq.n	8006a42 <_scanf_float+0x6e>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a46:	f1ba 0f01 	cmp.w	sl, #1
 8006a4a:	f200 8113 	bhi.w	8006c74 <_scanf_float+0x2a0>
 8006a4e:	455e      	cmp	r6, fp
 8006a50:	f200 8105 	bhi.w	8006c5e <_scanf_float+0x28a>
 8006a54:	2501      	movs	r5, #1
 8006a56:	4628      	mov	r0, r5
 8006a58:	b007      	add	sp, #28
 8006a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a5e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006a62:	2a0d      	cmp	r2, #13
 8006a64:	d8e6      	bhi.n	8006a34 <_scanf_float+0x60>
 8006a66:	a101      	add	r1, pc, #4	; (adr r1, 8006a6c <_scanf_float+0x98>)
 8006a68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a6c:	08006bab 	.word	0x08006bab
 8006a70:	08006a35 	.word	0x08006a35
 8006a74:	08006a35 	.word	0x08006a35
 8006a78:	08006a35 	.word	0x08006a35
 8006a7c:	08006c0b 	.word	0x08006c0b
 8006a80:	08006be3 	.word	0x08006be3
 8006a84:	08006a35 	.word	0x08006a35
 8006a88:	08006a35 	.word	0x08006a35
 8006a8c:	08006bb9 	.word	0x08006bb9
 8006a90:	08006a35 	.word	0x08006a35
 8006a94:	08006a35 	.word	0x08006a35
 8006a98:	08006a35 	.word	0x08006a35
 8006a9c:	08006a35 	.word	0x08006a35
 8006aa0:	08006b71 	.word	0x08006b71
 8006aa4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006aa8:	e7db      	b.n	8006a62 <_scanf_float+0x8e>
 8006aaa:	290e      	cmp	r1, #14
 8006aac:	d8c2      	bhi.n	8006a34 <_scanf_float+0x60>
 8006aae:	a001      	add	r0, pc, #4	; (adr r0, 8006ab4 <_scanf_float+0xe0>)
 8006ab0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006ab4:	08006b63 	.word	0x08006b63
 8006ab8:	08006a35 	.word	0x08006a35
 8006abc:	08006b63 	.word	0x08006b63
 8006ac0:	08006bf7 	.word	0x08006bf7
 8006ac4:	08006a35 	.word	0x08006a35
 8006ac8:	08006b11 	.word	0x08006b11
 8006acc:	08006b4d 	.word	0x08006b4d
 8006ad0:	08006b4d 	.word	0x08006b4d
 8006ad4:	08006b4d 	.word	0x08006b4d
 8006ad8:	08006b4d 	.word	0x08006b4d
 8006adc:	08006b4d 	.word	0x08006b4d
 8006ae0:	08006b4d 	.word	0x08006b4d
 8006ae4:	08006b4d 	.word	0x08006b4d
 8006ae8:	08006b4d 	.word	0x08006b4d
 8006aec:	08006b4d 	.word	0x08006b4d
 8006af0:	2b6e      	cmp	r3, #110	; 0x6e
 8006af2:	d809      	bhi.n	8006b08 <_scanf_float+0x134>
 8006af4:	2b60      	cmp	r3, #96	; 0x60
 8006af6:	d8b2      	bhi.n	8006a5e <_scanf_float+0x8a>
 8006af8:	2b54      	cmp	r3, #84	; 0x54
 8006afa:	d077      	beq.n	8006bec <_scanf_float+0x218>
 8006afc:	2b59      	cmp	r3, #89	; 0x59
 8006afe:	d199      	bne.n	8006a34 <_scanf_float+0x60>
 8006b00:	2d07      	cmp	r5, #7
 8006b02:	d197      	bne.n	8006a34 <_scanf_float+0x60>
 8006b04:	2508      	movs	r5, #8
 8006b06:	e029      	b.n	8006b5c <_scanf_float+0x188>
 8006b08:	2b74      	cmp	r3, #116	; 0x74
 8006b0a:	d06f      	beq.n	8006bec <_scanf_float+0x218>
 8006b0c:	2b79      	cmp	r3, #121	; 0x79
 8006b0e:	e7f6      	b.n	8006afe <_scanf_float+0x12a>
 8006b10:	6821      	ldr	r1, [r4, #0]
 8006b12:	05c8      	lsls	r0, r1, #23
 8006b14:	d51a      	bpl.n	8006b4c <_scanf_float+0x178>
 8006b16:	9b02      	ldr	r3, [sp, #8]
 8006b18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006b1c:	6021      	str	r1, [r4, #0]
 8006b1e:	f109 0901 	add.w	r9, r9, #1
 8006b22:	b11b      	cbz	r3, 8006b2c <_scanf_float+0x158>
 8006b24:	3b01      	subs	r3, #1
 8006b26:	3201      	adds	r2, #1
 8006b28:	9302      	str	r3, [sp, #8]
 8006b2a:	60a2      	str	r2, [r4, #8]
 8006b2c:	68a3      	ldr	r3, [r4, #8]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	60a3      	str	r3, [r4, #8]
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	3301      	adds	r3, #1
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	607b      	str	r3, [r7, #4]
 8006b40:	f340 8084 	ble.w	8006c4c <_scanf_float+0x278>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	3301      	adds	r3, #1
 8006b48:	603b      	str	r3, [r7, #0]
 8006b4a:	e766      	b.n	8006a1a <_scanf_float+0x46>
 8006b4c:	eb1a 0f05 	cmn.w	sl, r5
 8006b50:	f47f af70 	bne.w	8006a34 <_scanf_float+0x60>
 8006b54:	6822      	ldr	r2, [r4, #0]
 8006b56:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006b5a:	6022      	str	r2, [r4, #0]
 8006b5c:	f806 3b01 	strb.w	r3, [r6], #1
 8006b60:	e7e4      	b.n	8006b2c <_scanf_float+0x158>
 8006b62:	6822      	ldr	r2, [r4, #0]
 8006b64:	0610      	lsls	r0, r2, #24
 8006b66:	f57f af65 	bpl.w	8006a34 <_scanf_float+0x60>
 8006b6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b6e:	e7f4      	b.n	8006b5a <_scanf_float+0x186>
 8006b70:	f1ba 0f00 	cmp.w	sl, #0
 8006b74:	d10e      	bne.n	8006b94 <_scanf_float+0x1c0>
 8006b76:	f1b9 0f00 	cmp.w	r9, #0
 8006b7a:	d10e      	bne.n	8006b9a <_scanf_float+0x1c6>
 8006b7c:	6822      	ldr	r2, [r4, #0]
 8006b7e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b82:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b86:	d108      	bne.n	8006b9a <_scanf_float+0x1c6>
 8006b88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b8c:	6022      	str	r2, [r4, #0]
 8006b8e:	f04f 0a01 	mov.w	sl, #1
 8006b92:	e7e3      	b.n	8006b5c <_scanf_float+0x188>
 8006b94:	f1ba 0f02 	cmp.w	sl, #2
 8006b98:	d055      	beq.n	8006c46 <_scanf_float+0x272>
 8006b9a:	2d01      	cmp	r5, #1
 8006b9c:	d002      	beq.n	8006ba4 <_scanf_float+0x1d0>
 8006b9e:	2d04      	cmp	r5, #4
 8006ba0:	f47f af48 	bne.w	8006a34 <_scanf_float+0x60>
 8006ba4:	3501      	adds	r5, #1
 8006ba6:	b2ed      	uxtb	r5, r5
 8006ba8:	e7d8      	b.n	8006b5c <_scanf_float+0x188>
 8006baa:	f1ba 0f01 	cmp.w	sl, #1
 8006bae:	f47f af41 	bne.w	8006a34 <_scanf_float+0x60>
 8006bb2:	f04f 0a02 	mov.w	sl, #2
 8006bb6:	e7d1      	b.n	8006b5c <_scanf_float+0x188>
 8006bb8:	b97d      	cbnz	r5, 8006bda <_scanf_float+0x206>
 8006bba:	f1b9 0f00 	cmp.w	r9, #0
 8006bbe:	f47f af3c 	bne.w	8006a3a <_scanf_float+0x66>
 8006bc2:	6822      	ldr	r2, [r4, #0]
 8006bc4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006bc8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006bcc:	f47f af39 	bne.w	8006a42 <_scanf_float+0x6e>
 8006bd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bd4:	6022      	str	r2, [r4, #0]
 8006bd6:	2501      	movs	r5, #1
 8006bd8:	e7c0      	b.n	8006b5c <_scanf_float+0x188>
 8006bda:	2d03      	cmp	r5, #3
 8006bdc:	d0e2      	beq.n	8006ba4 <_scanf_float+0x1d0>
 8006bde:	2d05      	cmp	r5, #5
 8006be0:	e7de      	b.n	8006ba0 <_scanf_float+0x1cc>
 8006be2:	2d02      	cmp	r5, #2
 8006be4:	f47f af26 	bne.w	8006a34 <_scanf_float+0x60>
 8006be8:	2503      	movs	r5, #3
 8006bea:	e7b7      	b.n	8006b5c <_scanf_float+0x188>
 8006bec:	2d06      	cmp	r5, #6
 8006bee:	f47f af21 	bne.w	8006a34 <_scanf_float+0x60>
 8006bf2:	2507      	movs	r5, #7
 8006bf4:	e7b2      	b.n	8006b5c <_scanf_float+0x188>
 8006bf6:	6822      	ldr	r2, [r4, #0]
 8006bf8:	0591      	lsls	r1, r2, #22
 8006bfa:	f57f af1b 	bpl.w	8006a34 <_scanf_float+0x60>
 8006bfe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006c02:	6022      	str	r2, [r4, #0]
 8006c04:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c08:	e7a8      	b.n	8006b5c <_scanf_float+0x188>
 8006c0a:	6822      	ldr	r2, [r4, #0]
 8006c0c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006c10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006c14:	d006      	beq.n	8006c24 <_scanf_float+0x250>
 8006c16:	0550      	lsls	r0, r2, #21
 8006c18:	f57f af0c 	bpl.w	8006a34 <_scanf_float+0x60>
 8006c1c:	f1b9 0f00 	cmp.w	r9, #0
 8006c20:	f43f af0f 	beq.w	8006a42 <_scanf_float+0x6e>
 8006c24:	0591      	lsls	r1, r2, #22
 8006c26:	bf58      	it	pl
 8006c28:	9901      	ldrpl	r1, [sp, #4]
 8006c2a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c2e:	bf58      	it	pl
 8006c30:	eba9 0101 	subpl.w	r1, r9, r1
 8006c34:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006c38:	bf58      	it	pl
 8006c3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006c3e:	6022      	str	r2, [r4, #0]
 8006c40:	f04f 0900 	mov.w	r9, #0
 8006c44:	e78a      	b.n	8006b5c <_scanf_float+0x188>
 8006c46:	f04f 0a03 	mov.w	sl, #3
 8006c4a:	e787      	b.n	8006b5c <_scanf_float+0x188>
 8006c4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006c50:	4639      	mov	r1, r7
 8006c52:	4640      	mov	r0, r8
 8006c54:	4798      	blx	r3
 8006c56:	2800      	cmp	r0, #0
 8006c58:	f43f aedf 	beq.w	8006a1a <_scanf_float+0x46>
 8006c5c:	e6ea      	b.n	8006a34 <_scanf_float+0x60>
 8006c5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c66:	463a      	mov	r2, r7
 8006c68:	4640      	mov	r0, r8
 8006c6a:	4798      	blx	r3
 8006c6c:	6923      	ldr	r3, [r4, #16]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	6123      	str	r3, [r4, #16]
 8006c72:	e6ec      	b.n	8006a4e <_scanf_float+0x7a>
 8006c74:	1e6b      	subs	r3, r5, #1
 8006c76:	2b06      	cmp	r3, #6
 8006c78:	d825      	bhi.n	8006cc6 <_scanf_float+0x2f2>
 8006c7a:	2d02      	cmp	r5, #2
 8006c7c:	d836      	bhi.n	8006cec <_scanf_float+0x318>
 8006c7e:	455e      	cmp	r6, fp
 8006c80:	f67f aee8 	bls.w	8006a54 <_scanf_float+0x80>
 8006c84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c8c:	463a      	mov	r2, r7
 8006c8e:	4640      	mov	r0, r8
 8006c90:	4798      	blx	r3
 8006c92:	6923      	ldr	r3, [r4, #16]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	6123      	str	r3, [r4, #16]
 8006c98:	e7f1      	b.n	8006c7e <_scanf_float+0x2aa>
 8006c9a:	9802      	ldr	r0, [sp, #8]
 8006c9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ca0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006ca4:	9002      	str	r0, [sp, #8]
 8006ca6:	463a      	mov	r2, r7
 8006ca8:	4640      	mov	r0, r8
 8006caa:	4798      	blx	r3
 8006cac:	6923      	ldr	r3, [r4, #16]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	6123      	str	r3, [r4, #16]
 8006cb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cb6:	fa5f fa8a 	uxtb.w	sl, sl
 8006cba:	f1ba 0f02 	cmp.w	sl, #2
 8006cbe:	d1ec      	bne.n	8006c9a <_scanf_float+0x2c6>
 8006cc0:	3d03      	subs	r5, #3
 8006cc2:	b2ed      	uxtb	r5, r5
 8006cc4:	1b76      	subs	r6, r6, r5
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	05da      	lsls	r2, r3, #23
 8006cca:	d52f      	bpl.n	8006d2c <_scanf_float+0x358>
 8006ccc:	055b      	lsls	r3, r3, #21
 8006cce:	d510      	bpl.n	8006cf2 <_scanf_float+0x31e>
 8006cd0:	455e      	cmp	r6, fp
 8006cd2:	f67f aebf 	bls.w	8006a54 <_scanf_float+0x80>
 8006cd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cde:	463a      	mov	r2, r7
 8006ce0:	4640      	mov	r0, r8
 8006ce2:	4798      	blx	r3
 8006ce4:	6923      	ldr	r3, [r4, #16]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	6123      	str	r3, [r4, #16]
 8006cea:	e7f1      	b.n	8006cd0 <_scanf_float+0x2fc>
 8006cec:	46aa      	mov	sl, r5
 8006cee:	9602      	str	r6, [sp, #8]
 8006cf0:	e7df      	b.n	8006cb2 <_scanf_float+0x2de>
 8006cf2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006cf6:	6923      	ldr	r3, [r4, #16]
 8006cf8:	2965      	cmp	r1, #101	; 0x65
 8006cfa:	f103 33ff 	add.w	r3, r3, #4294967295
 8006cfe:	f106 35ff 	add.w	r5, r6, #4294967295
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	d00c      	beq.n	8006d20 <_scanf_float+0x34c>
 8006d06:	2945      	cmp	r1, #69	; 0x45
 8006d08:	d00a      	beq.n	8006d20 <_scanf_float+0x34c>
 8006d0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d0e:	463a      	mov	r2, r7
 8006d10:	4640      	mov	r0, r8
 8006d12:	4798      	blx	r3
 8006d14:	6923      	ldr	r3, [r4, #16]
 8006d16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	1eb5      	subs	r5, r6, #2
 8006d1e:	6123      	str	r3, [r4, #16]
 8006d20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d24:	463a      	mov	r2, r7
 8006d26:	4640      	mov	r0, r8
 8006d28:	4798      	blx	r3
 8006d2a:	462e      	mov	r6, r5
 8006d2c:	6825      	ldr	r5, [r4, #0]
 8006d2e:	f015 0510 	ands.w	r5, r5, #16
 8006d32:	d159      	bne.n	8006de8 <_scanf_float+0x414>
 8006d34:	7035      	strb	r5, [r6, #0]
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d40:	d11b      	bne.n	8006d7a <_scanf_float+0x3a6>
 8006d42:	9b01      	ldr	r3, [sp, #4]
 8006d44:	454b      	cmp	r3, r9
 8006d46:	eba3 0209 	sub.w	r2, r3, r9
 8006d4a:	d123      	bne.n	8006d94 <_scanf_float+0x3c0>
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	4659      	mov	r1, fp
 8006d50:	4640      	mov	r0, r8
 8006d52:	f000 fe97 	bl	8007a84 <_strtod_r>
 8006d56:	6822      	ldr	r2, [r4, #0]
 8006d58:	9b03      	ldr	r3, [sp, #12]
 8006d5a:	f012 0f02 	tst.w	r2, #2
 8006d5e:	ec57 6b10 	vmov	r6, r7, d0
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	d021      	beq.n	8006daa <_scanf_float+0x3d6>
 8006d66:	9903      	ldr	r1, [sp, #12]
 8006d68:	1d1a      	adds	r2, r3, #4
 8006d6a:	600a      	str	r2, [r1, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	e9c3 6700 	strd	r6, r7, [r3]
 8006d72:	68e3      	ldr	r3, [r4, #12]
 8006d74:	3301      	adds	r3, #1
 8006d76:	60e3      	str	r3, [r4, #12]
 8006d78:	e66d      	b.n	8006a56 <_scanf_float+0x82>
 8006d7a:	9b04      	ldr	r3, [sp, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d0e5      	beq.n	8006d4c <_scanf_float+0x378>
 8006d80:	9905      	ldr	r1, [sp, #20]
 8006d82:	230a      	movs	r3, #10
 8006d84:	462a      	mov	r2, r5
 8006d86:	3101      	adds	r1, #1
 8006d88:	4640      	mov	r0, r8
 8006d8a:	f000 ff03 	bl	8007b94 <_strtol_r>
 8006d8e:	9b04      	ldr	r3, [sp, #16]
 8006d90:	9e05      	ldr	r6, [sp, #20]
 8006d92:	1ac2      	subs	r2, r0, r3
 8006d94:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006d98:	429e      	cmp	r6, r3
 8006d9a:	bf28      	it	cs
 8006d9c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006da0:	4912      	ldr	r1, [pc, #72]	; (8006dec <_scanf_float+0x418>)
 8006da2:	4630      	mov	r0, r6
 8006da4:	f000 f82c 	bl	8006e00 <siprintf>
 8006da8:	e7d0      	b.n	8006d4c <_scanf_float+0x378>
 8006daa:	9903      	ldr	r1, [sp, #12]
 8006dac:	f012 0f04 	tst.w	r2, #4
 8006db0:	f103 0204 	add.w	r2, r3, #4
 8006db4:	600a      	str	r2, [r1, #0]
 8006db6:	d1d9      	bne.n	8006d6c <_scanf_float+0x398>
 8006db8:	f8d3 8000 	ldr.w	r8, [r3]
 8006dbc:	ee10 2a10 	vmov	r2, s0
 8006dc0:	ee10 0a10 	vmov	r0, s0
 8006dc4:	463b      	mov	r3, r7
 8006dc6:	4639      	mov	r1, r7
 8006dc8:	f7f9 fe90 	bl	8000aec <__aeabi_dcmpun>
 8006dcc:	b128      	cbz	r0, 8006dda <_scanf_float+0x406>
 8006dce:	4808      	ldr	r0, [pc, #32]	; (8006df0 <_scanf_float+0x41c>)
 8006dd0:	f000 f810 	bl	8006df4 <nanf>
 8006dd4:	ed88 0a00 	vstr	s0, [r8]
 8006dd8:	e7cb      	b.n	8006d72 <_scanf_float+0x39e>
 8006dda:	4630      	mov	r0, r6
 8006ddc:	4639      	mov	r1, r7
 8006dde:	f7f9 fee3 	bl	8000ba8 <__aeabi_d2f>
 8006de2:	f8c8 0000 	str.w	r0, [r8]
 8006de6:	e7c4      	b.n	8006d72 <_scanf_float+0x39e>
 8006de8:	2500      	movs	r5, #0
 8006dea:	e634      	b.n	8006a56 <_scanf_float+0x82>
 8006dec:	0800a789 	.word	0x0800a789
 8006df0:	0800a73f 	.word	0x0800a73f

08006df4 <nanf>:
 8006df4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006dfc <nanf+0x8>
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	7fc00000 	.word	0x7fc00000

08006e00 <siprintf>:
 8006e00:	b40e      	push	{r1, r2, r3}
 8006e02:	b500      	push	{lr}
 8006e04:	b09c      	sub	sp, #112	; 0x70
 8006e06:	ab1d      	add	r3, sp, #116	; 0x74
 8006e08:	9002      	str	r0, [sp, #8]
 8006e0a:	9006      	str	r0, [sp, #24]
 8006e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e10:	4809      	ldr	r0, [pc, #36]	; (8006e38 <siprintf+0x38>)
 8006e12:	9107      	str	r1, [sp, #28]
 8006e14:	9104      	str	r1, [sp, #16]
 8006e16:	4909      	ldr	r1, [pc, #36]	; (8006e3c <siprintf+0x3c>)
 8006e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e1c:	9105      	str	r1, [sp, #20]
 8006e1e:	6800      	ldr	r0, [r0, #0]
 8006e20:	9301      	str	r3, [sp, #4]
 8006e22:	a902      	add	r1, sp, #8
 8006e24:	f003 fa10 	bl	800a248 <_svfiprintf_r>
 8006e28:	9b02      	ldr	r3, [sp, #8]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	b01c      	add	sp, #112	; 0x70
 8006e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e34:	b003      	add	sp, #12
 8006e36:	4770      	bx	lr
 8006e38:	2000000c 	.word	0x2000000c
 8006e3c:	ffff0208 	.word	0xffff0208

08006e40 <sulp>:
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	4604      	mov	r4, r0
 8006e44:	460d      	mov	r5, r1
 8006e46:	ec45 4b10 	vmov	d0, r4, r5
 8006e4a:	4616      	mov	r6, r2
 8006e4c:	f002 ff2c 	bl	8009ca8 <__ulp>
 8006e50:	ec51 0b10 	vmov	r0, r1, d0
 8006e54:	b17e      	cbz	r6, 8006e76 <sulp+0x36>
 8006e56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006e5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	dd09      	ble.n	8006e76 <sulp+0x36>
 8006e62:	051b      	lsls	r3, r3, #20
 8006e64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006e68:	2400      	movs	r4, #0
 8006e6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006e6e:	4622      	mov	r2, r4
 8006e70:	462b      	mov	r3, r5
 8006e72:	f7f9 fba1 	bl	80005b8 <__aeabi_dmul>
 8006e76:	bd70      	pop	{r4, r5, r6, pc}

08006e78 <_strtod_l>:
 8006e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	ed2d 8b02 	vpush	{d8}
 8006e80:	b09d      	sub	sp, #116	; 0x74
 8006e82:	461f      	mov	r7, r3
 8006e84:	2300      	movs	r3, #0
 8006e86:	9318      	str	r3, [sp, #96]	; 0x60
 8006e88:	4ba2      	ldr	r3, [pc, #648]	; (8007114 <_strtod_l+0x29c>)
 8006e8a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	9305      	str	r3, [sp, #20]
 8006e90:	4604      	mov	r4, r0
 8006e92:	4618      	mov	r0, r3
 8006e94:	4688      	mov	r8, r1
 8006e96:	f7f9 f97b 	bl	8000190 <strlen>
 8006e9a:	f04f 0a00 	mov.w	sl, #0
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	f04f 0b00 	mov.w	fp, #0
 8006ea4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006ea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eaa:	781a      	ldrb	r2, [r3, #0]
 8006eac:	2a2b      	cmp	r2, #43	; 0x2b
 8006eae:	d04e      	beq.n	8006f4e <_strtod_l+0xd6>
 8006eb0:	d83b      	bhi.n	8006f2a <_strtod_l+0xb2>
 8006eb2:	2a0d      	cmp	r2, #13
 8006eb4:	d834      	bhi.n	8006f20 <_strtod_l+0xa8>
 8006eb6:	2a08      	cmp	r2, #8
 8006eb8:	d834      	bhi.n	8006f24 <_strtod_l+0xac>
 8006eba:	2a00      	cmp	r2, #0
 8006ebc:	d03e      	beq.n	8006f3c <_strtod_l+0xc4>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ec2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006ec4:	7833      	ldrb	r3, [r6, #0]
 8006ec6:	2b30      	cmp	r3, #48	; 0x30
 8006ec8:	f040 80b0 	bne.w	800702c <_strtod_l+0x1b4>
 8006ecc:	7873      	ldrb	r3, [r6, #1]
 8006ece:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ed2:	2b58      	cmp	r3, #88	; 0x58
 8006ed4:	d168      	bne.n	8006fa8 <_strtod_l+0x130>
 8006ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	ab18      	add	r3, sp, #96	; 0x60
 8006edc:	9702      	str	r7, [sp, #8]
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	4a8d      	ldr	r2, [pc, #564]	; (8007118 <_strtod_l+0x2a0>)
 8006ee2:	ab19      	add	r3, sp, #100	; 0x64
 8006ee4:	a917      	add	r1, sp, #92	; 0x5c
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f001 ffb6 	bl	8008e58 <__gethex>
 8006eec:	f010 0707 	ands.w	r7, r0, #7
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	d005      	beq.n	8006f00 <_strtod_l+0x88>
 8006ef4:	2f06      	cmp	r7, #6
 8006ef6:	d12c      	bne.n	8006f52 <_strtod_l+0xda>
 8006ef8:	3601      	adds	r6, #1
 8006efa:	2300      	movs	r3, #0
 8006efc:	9617      	str	r6, [sp, #92]	; 0x5c
 8006efe:	930a      	str	r3, [sp, #40]	; 0x28
 8006f00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f040 8590 	bne.w	8007a28 <_strtod_l+0xbb0>
 8006f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f0a:	b1eb      	cbz	r3, 8006f48 <_strtod_l+0xd0>
 8006f0c:	4652      	mov	r2, sl
 8006f0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f12:	ec43 2b10 	vmov	d0, r2, r3
 8006f16:	b01d      	add	sp, #116	; 0x74
 8006f18:	ecbd 8b02 	vpop	{d8}
 8006f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f20:	2a20      	cmp	r2, #32
 8006f22:	d1cc      	bne.n	8006ebe <_strtod_l+0x46>
 8006f24:	3301      	adds	r3, #1
 8006f26:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f28:	e7be      	b.n	8006ea8 <_strtod_l+0x30>
 8006f2a:	2a2d      	cmp	r2, #45	; 0x2d
 8006f2c:	d1c7      	bne.n	8006ebe <_strtod_l+0x46>
 8006f2e:	2201      	movs	r2, #1
 8006f30:	920a      	str	r2, [sp, #40]	; 0x28
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f36:	785b      	ldrb	r3, [r3, #1]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1c2      	bne.n	8006ec2 <_strtod_l+0x4a>
 8006f3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f040 856e 	bne.w	8007a24 <_strtod_l+0xbac>
 8006f48:	4652      	mov	r2, sl
 8006f4a:	465b      	mov	r3, fp
 8006f4c:	e7e1      	b.n	8006f12 <_strtod_l+0x9a>
 8006f4e:	2200      	movs	r2, #0
 8006f50:	e7ee      	b.n	8006f30 <_strtod_l+0xb8>
 8006f52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f54:	b13a      	cbz	r2, 8006f66 <_strtod_l+0xee>
 8006f56:	2135      	movs	r1, #53	; 0x35
 8006f58:	a81a      	add	r0, sp, #104	; 0x68
 8006f5a:	f002 ffb0 	bl	8009ebe <__copybits>
 8006f5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f60:	4620      	mov	r0, r4
 8006f62:	f002 fb6f 	bl	8009644 <_Bfree>
 8006f66:	3f01      	subs	r7, #1
 8006f68:	2f04      	cmp	r7, #4
 8006f6a:	d806      	bhi.n	8006f7a <_strtod_l+0x102>
 8006f6c:	e8df f007 	tbb	[pc, r7]
 8006f70:	1714030a 	.word	0x1714030a
 8006f74:	0a          	.byte	0x0a
 8006f75:	00          	.byte	0x00
 8006f76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006f7a:	0728      	lsls	r0, r5, #28
 8006f7c:	d5c0      	bpl.n	8006f00 <_strtod_l+0x88>
 8006f7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006f82:	e7bd      	b.n	8006f00 <_strtod_l+0x88>
 8006f84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006f88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006f96:	e7f0      	b.n	8006f7a <_strtod_l+0x102>
 8006f98:	f8df b180 	ldr.w	fp, [pc, #384]	; 800711c <_strtod_l+0x2a4>
 8006f9c:	e7ed      	b.n	8006f7a <_strtod_l+0x102>
 8006f9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006fa2:	f04f 3aff 	mov.w	sl, #4294967295
 8006fa6:	e7e8      	b.n	8006f7a <_strtod_l+0x102>
 8006fa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	2b30      	cmp	r3, #48	; 0x30
 8006fb2:	d0f9      	beq.n	8006fa8 <_strtod_l+0x130>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0a3      	beq.n	8006f00 <_strtod_l+0x88>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	f04f 0900 	mov.w	r9, #0
 8006fbe:	9304      	str	r3, [sp, #16]
 8006fc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fc2:	9308      	str	r3, [sp, #32]
 8006fc4:	f8cd 901c 	str.w	r9, [sp, #28]
 8006fc8:	464f      	mov	r7, r9
 8006fca:	220a      	movs	r2, #10
 8006fcc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006fce:	7806      	ldrb	r6, [r0, #0]
 8006fd0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006fd4:	b2d9      	uxtb	r1, r3
 8006fd6:	2909      	cmp	r1, #9
 8006fd8:	d92a      	bls.n	8007030 <_strtod_l+0x1b8>
 8006fda:	9905      	ldr	r1, [sp, #20]
 8006fdc:	462a      	mov	r2, r5
 8006fde:	f003 fad2 	bl	800a586 <strncmp>
 8006fe2:	b398      	cbz	r0, 800704c <_strtod_l+0x1d4>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	4632      	mov	r2, r6
 8006fe8:	463d      	mov	r5, r7
 8006fea:	9005      	str	r0, [sp, #20]
 8006fec:	4603      	mov	r3, r0
 8006fee:	2a65      	cmp	r2, #101	; 0x65
 8006ff0:	d001      	beq.n	8006ff6 <_strtod_l+0x17e>
 8006ff2:	2a45      	cmp	r2, #69	; 0x45
 8006ff4:	d118      	bne.n	8007028 <_strtod_l+0x1b0>
 8006ff6:	b91d      	cbnz	r5, 8007000 <_strtod_l+0x188>
 8006ff8:	9a04      	ldr	r2, [sp, #16]
 8006ffa:	4302      	orrs	r2, r0
 8006ffc:	d09e      	beq.n	8006f3c <_strtod_l+0xc4>
 8006ffe:	2500      	movs	r5, #0
 8007000:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007004:	f108 0201 	add.w	r2, r8, #1
 8007008:	9217      	str	r2, [sp, #92]	; 0x5c
 800700a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800700e:	2a2b      	cmp	r2, #43	; 0x2b
 8007010:	d075      	beq.n	80070fe <_strtod_l+0x286>
 8007012:	2a2d      	cmp	r2, #45	; 0x2d
 8007014:	d07b      	beq.n	800710e <_strtod_l+0x296>
 8007016:	f04f 0c00 	mov.w	ip, #0
 800701a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800701e:	2909      	cmp	r1, #9
 8007020:	f240 8082 	bls.w	8007128 <_strtod_l+0x2b0>
 8007024:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007028:	2600      	movs	r6, #0
 800702a:	e09d      	b.n	8007168 <_strtod_l+0x2f0>
 800702c:	2300      	movs	r3, #0
 800702e:	e7c4      	b.n	8006fba <_strtod_l+0x142>
 8007030:	2f08      	cmp	r7, #8
 8007032:	bfd8      	it	le
 8007034:	9907      	ldrle	r1, [sp, #28]
 8007036:	f100 0001 	add.w	r0, r0, #1
 800703a:	bfda      	itte	le
 800703c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007040:	9307      	strle	r3, [sp, #28]
 8007042:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007046:	3701      	adds	r7, #1
 8007048:	9017      	str	r0, [sp, #92]	; 0x5c
 800704a:	e7bf      	b.n	8006fcc <_strtod_l+0x154>
 800704c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800704e:	195a      	adds	r2, r3, r5
 8007050:	9217      	str	r2, [sp, #92]	; 0x5c
 8007052:	5d5a      	ldrb	r2, [r3, r5]
 8007054:	2f00      	cmp	r7, #0
 8007056:	d037      	beq.n	80070c8 <_strtod_l+0x250>
 8007058:	9005      	str	r0, [sp, #20]
 800705a:	463d      	mov	r5, r7
 800705c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007060:	2b09      	cmp	r3, #9
 8007062:	d912      	bls.n	800708a <_strtod_l+0x212>
 8007064:	2301      	movs	r3, #1
 8007066:	e7c2      	b.n	8006fee <_strtod_l+0x176>
 8007068:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	9217      	str	r2, [sp, #92]	; 0x5c
 800706e:	785a      	ldrb	r2, [r3, #1]
 8007070:	3001      	adds	r0, #1
 8007072:	2a30      	cmp	r2, #48	; 0x30
 8007074:	d0f8      	beq.n	8007068 <_strtod_l+0x1f0>
 8007076:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800707a:	2b08      	cmp	r3, #8
 800707c:	f200 84d9 	bhi.w	8007a32 <_strtod_l+0xbba>
 8007080:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007082:	9005      	str	r0, [sp, #20]
 8007084:	2000      	movs	r0, #0
 8007086:	9308      	str	r3, [sp, #32]
 8007088:	4605      	mov	r5, r0
 800708a:	3a30      	subs	r2, #48	; 0x30
 800708c:	f100 0301 	add.w	r3, r0, #1
 8007090:	d014      	beq.n	80070bc <_strtod_l+0x244>
 8007092:	9905      	ldr	r1, [sp, #20]
 8007094:	4419      	add	r1, r3
 8007096:	9105      	str	r1, [sp, #20]
 8007098:	462b      	mov	r3, r5
 800709a:	eb00 0e05 	add.w	lr, r0, r5
 800709e:	210a      	movs	r1, #10
 80070a0:	4573      	cmp	r3, lr
 80070a2:	d113      	bne.n	80070cc <_strtod_l+0x254>
 80070a4:	182b      	adds	r3, r5, r0
 80070a6:	2b08      	cmp	r3, #8
 80070a8:	f105 0501 	add.w	r5, r5, #1
 80070ac:	4405      	add	r5, r0
 80070ae:	dc1c      	bgt.n	80070ea <_strtod_l+0x272>
 80070b0:	9907      	ldr	r1, [sp, #28]
 80070b2:	230a      	movs	r3, #10
 80070b4:	fb03 2301 	mla	r3, r3, r1, r2
 80070b8:	9307      	str	r3, [sp, #28]
 80070ba:	2300      	movs	r3, #0
 80070bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070be:	1c51      	adds	r1, r2, #1
 80070c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80070c2:	7852      	ldrb	r2, [r2, #1]
 80070c4:	4618      	mov	r0, r3
 80070c6:	e7c9      	b.n	800705c <_strtod_l+0x1e4>
 80070c8:	4638      	mov	r0, r7
 80070ca:	e7d2      	b.n	8007072 <_strtod_l+0x1fa>
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	dc04      	bgt.n	80070da <_strtod_l+0x262>
 80070d0:	9e07      	ldr	r6, [sp, #28]
 80070d2:	434e      	muls	r6, r1
 80070d4:	9607      	str	r6, [sp, #28]
 80070d6:	3301      	adds	r3, #1
 80070d8:	e7e2      	b.n	80070a0 <_strtod_l+0x228>
 80070da:	f103 0c01 	add.w	ip, r3, #1
 80070de:	f1bc 0f10 	cmp.w	ip, #16
 80070e2:	bfd8      	it	le
 80070e4:	fb01 f909 	mulle.w	r9, r1, r9
 80070e8:	e7f5      	b.n	80070d6 <_strtod_l+0x25e>
 80070ea:	2d10      	cmp	r5, #16
 80070ec:	bfdc      	itt	le
 80070ee:	230a      	movle	r3, #10
 80070f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80070f4:	e7e1      	b.n	80070ba <_strtod_l+0x242>
 80070f6:	2300      	movs	r3, #0
 80070f8:	9305      	str	r3, [sp, #20]
 80070fa:	2301      	movs	r3, #1
 80070fc:	e77c      	b.n	8006ff8 <_strtod_l+0x180>
 80070fe:	f04f 0c00 	mov.w	ip, #0
 8007102:	f108 0202 	add.w	r2, r8, #2
 8007106:	9217      	str	r2, [sp, #92]	; 0x5c
 8007108:	f898 2002 	ldrb.w	r2, [r8, #2]
 800710c:	e785      	b.n	800701a <_strtod_l+0x1a2>
 800710e:	f04f 0c01 	mov.w	ip, #1
 8007112:	e7f6      	b.n	8007102 <_strtod_l+0x28a>
 8007114:	0800aa3c 	.word	0x0800aa3c
 8007118:	0800a790 	.word	0x0800a790
 800711c:	7ff00000 	.word	0x7ff00000
 8007120:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007122:	1c51      	adds	r1, r2, #1
 8007124:	9117      	str	r1, [sp, #92]	; 0x5c
 8007126:	7852      	ldrb	r2, [r2, #1]
 8007128:	2a30      	cmp	r2, #48	; 0x30
 800712a:	d0f9      	beq.n	8007120 <_strtod_l+0x2a8>
 800712c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007130:	2908      	cmp	r1, #8
 8007132:	f63f af79 	bhi.w	8007028 <_strtod_l+0x1b0>
 8007136:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800713a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800713c:	9206      	str	r2, [sp, #24]
 800713e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007140:	1c51      	adds	r1, r2, #1
 8007142:	9117      	str	r1, [sp, #92]	; 0x5c
 8007144:	7852      	ldrb	r2, [r2, #1]
 8007146:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800714a:	2e09      	cmp	r6, #9
 800714c:	d937      	bls.n	80071be <_strtod_l+0x346>
 800714e:	9e06      	ldr	r6, [sp, #24]
 8007150:	1b89      	subs	r1, r1, r6
 8007152:	2908      	cmp	r1, #8
 8007154:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007158:	dc02      	bgt.n	8007160 <_strtod_l+0x2e8>
 800715a:	4576      	cmp	r6, lr
 800715c:	bfa8      	it	ge
 800715e:	4676      	movge	r6, lr
 8007160:	f1bc 0f00 	cmp.w	ip, #0
 8007164:	d000      	beq.n	8007168 <_strtod_l+0x2f0>
 8007166:	4276      	negs	r6, r6
 8007168:	2d00      	cmp	r5, #0
 800716a:	d14d      	bne.n	8007208 <_strtod_l+0x390>
 800716c:	9904      	ldr	r1, [sp, #16]
 800716e:	4301      	orrs	r1, r0
 8007170:	f47f aec6 	bne.w	8006f00 <_strtod_l+0x88>
 8007174:	2b00      	cmp	r3, #0
 8007176:	f47f aee1 	bne.w	8006f3c <_strtod_l+0xc4>
 800717a:	2a69      	cmp	r2, #105	; 0x69
 800717c:	d027      	beq.n	80071ce <_strtod_l+0x356>
 800717e:	dc24      	bgt.n	80071ca <_strtod_l+0x352>
 8007180:	2a49      	cmp	r2, #73	; 0x49
 8007182:	d024      	beq.n	80071ce <_strtod_l+0x356>
 8007184:	2a4e      	cmp	r2, #78	; 0x4e
 8007186:	f47f aed9 	bne.w	8006f3c <_strtod_l+0xc4>
 800718a:	499f      	ldr	r1, [pc, #636]	; (8007408 <_strtod_l+0x590>)
 800718c:	a817      	add	r0, sp, #92	; 0x5c
 800718e:	f002 f8bb 	bl	8009308 <__match>
 8007192:	2800      	cmp	r0, #0
 8007194:	f43f aed2 	beq.w	8006f3c <_strtod_l+0xc4>
 8007198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	2b28      	cmp	r3, #40	; 0x28
 800719e:	d12d      	bne.n	80071fc <_strtod_l+0x384>
 80071a0:	499a      	ldr	r1, [pc, #616]	; (800740c <_strtod_l+0x594>)
 80071a2:	aa1a      	add	r2, sp, #104	; 0x68
 80071a4:	a817      	add	r0, sp, #92	; 0x5c
 80071a6:	f002 f8c3 	bl	8009330 <__hexnan>
 80071aa:	2805      	cmp	r0, #5
 80071ac:	d126      	bne.n	80071fc <_strtod_l+0x384>
 80071ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80071b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80071b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80071bc:	e6a0      	b.n	8006f00 <_strtod_l+0x88>
 80071be:	210a      	movs	r1, #10
 80071c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80071c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80071c8:	e7b9      	b.n	800713e <_strtod_l+0x2c6>
 80071ca:	2a6e      	cmp	r2, #110	; 0x6e
 80071cc:	e7db      	b.n	8007186 <_strtod_l+0x30e>
 80071ce:	4990      	ldr	r1, [pc, #576]	; (8007410 <_strtod_l+0x598>)
 80071d0:	a817      	add	r0, sp, #92	; 0x5c
 80071d2:	f002 f899 	bl	8009308 <__match>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f43f aeb0 	beq.w	8006f3c <_strtod_l+0xc4>
 80071dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071de:	498d      	ldr	r1, [pc, #564]	; (8007414 <_strtod_l+0x59c>)
 80071e0:	3b01      	subs	r3, #1
 80071e2:	a817      	add	r0, sp, #92	; 0x5c
 80071e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80071e6:	f002 f88f 	bl	8009308 <__match>
 80071ea:	b910      	cbnz	r0, 80071f2 <_strtod_l+0x37a>
 80071ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071ee:	3301      	adds	r3, #1
 80071f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80071f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007424 <_strtod_l+0x5ac>
 80071f6:	f04f 0a00 	mov.w	sl, #0
 80071fa:	e681      	b.n	8006f00 <_strtod_l+0x88>
 80071fc:	4886      	ldr	r0, [pc, #536]	; (8007418 <_strtod_l+0x5a0>)
 80071fe:	f003 f923 	bl	800a448 <nan>
 8007202:	ec5b ab10 	vmov	sl, fp, d0
 8007206:	e67b      	b.n	8006f00 <_strtod_l+0x88>
 8007208:	9b05      	ldr	r3, [sp, #20]
 800720a:	9807      	ldr	r0, [sp, #28]
 800720c:	1af3      	subs	r3, r6, r3
 800720e:	2f00      	cmp	r7, #0
 8007210:	bf08      	it	eq
 8007212:	462f      	moveq	r7, r5
 8007214:	2d10      	cmp	r5, #16
 8007216:	9306      	str	r3, [sp, #24]
 8007218:	46a8      	mov	r8, r5
 800721a:	bfa8      	it	ge
 800721c:	f04f 0810 	movge.w	r8, #16
 8007220:	f7f9 f950 	bl	80004c4 <__aeabi_ui2d>
 8007224:	2d09      	cmp	r5, #9
 8007226:	4682      	mov	sl, r0
 8007228:	468b      	mov	fp, r1
 800722a:	dd13      	ble.n	8007254 <_strtod_l+0x3dc>
 800722c:	4b7b      	ldr	r3, [pc, #492]	; (800741c <_strtod_l+0x5a4>)
 800722e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007232:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007236:	f7f9 f9bf 	bl	80005b8 <__aeabi_dmul>
 800723a:	4682      	mov	sl, r0
 800723c:	4648      	mov	r0, r9
 800723e:	468b      	mov	fp, r1
 8007240:	f7f9 f940 	bl	80004c4 <__aeabi_ui2d>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	4650      	mov	r0, sl
 800724a:	4659      	mov	r1, fp
 800724c:	f7f8 fffe 	bl	800024c <__adddf3>
 8007250:	4682      	mov	sl, r0
 8007252:	468b      	mov	fp, r1
 8007254:	2d0f      	cmp	r5, #15
 8007256:	dc38      	bgt.n	80072ca <_strtod_l+0x452>
 8007258:	9b06      	ldr	r3, [sp, #24]
 800725a:	2b00      	cmp	r3, #0
 800725c:	f43f ae50 	beq.w	8006f00 <_strtod_l+0x88>
 8007260:	dd24      	ble.n	80072ac <_strtod_l+0x434>
 8007262:	2b16      	cmp	r3, #22
 8007264:	dc0b      	bgt.n	800727e <_strtod_l+0x406>
 8007266:	496d      	ldr	r1, [pc, #436]	; (800741c <_strtod_l+0x5a4>)
 8007268:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800726c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007270:	4652      	mov	r2, sl
 8007272:	465b      	mov	r3, fp
 8007274:	f7f9 f9a0 	bl	80005b8 <__aeabi_dmul>
 8007278:	4682      	mov	sl, r0
 800727a:	468b      	mov	fp, r1
 800727c:	e640      	b.n	8006f00 <_strtod_l+0x88>
 800727e:	9a06      	ldr	r2, [sp, #24]
 8007280:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007284:	4293      	cmp	r3, r2
 8007286:	db20      	blt.n	80072ca <_strtod_l+0x452>
 8007288:	4c64      	ldr	r4, [pc, #400]	; (800741c <_strtod_l+0x5a4>)
 800728a:	f1c5 050f 	rsb	r5, r5, #15
 800728e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007292:	4652      	mov	r2, sl
 8007294:	465b      	mov	r3, fp
 8007296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800729a:	f7f9 f98d 	bl	80005b8 <__aeabi_dmul>
 800729e:	9b06      	ldr	r3, [sp, #24]
 80072a0:	1b5d      	subs	r5, r3, r5
 80072a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80072a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80072aa:	e7e3      	b.n	8007274 <_strtod_l+0x3fc>
 80072ac:	9b06      	ldr	r3, [sp, #24]
 80072ae:	3316      	adds	r3, #22
 80072b0:	db0b      	blt.n	80072ca <_strtod_l+0x452>
 80072b2:	9b05      	ldr	r3, [sp, #20]
 80072b4:	1b9e      	subs	r6, r3, r6
 80072b6:	4b59      	ldr	r3, [pc, #356]	; (800741c <_strtod_l+0x5a4>)
 80072b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80072bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072c0:	4650      	mov	r0, sl
 80072c2:	4659      	mov	r1, fp
 80072c4:	f7f9 faa2 	bl	800080c <__aeabi_ddiv>
 80072c8:	e7d6      	b.n	8007278 <_strtod_l+0x400>
 80072ca:	9b06      	ldr	r3, [sp, #24]
 80072cc:	eba5 0808 	sub.w	r8, r5, r8
 80072d0:	4498      	add	r8, r3
 80072d2:	f1b8 0f00 	cmp.w	r8, #0
 80072d6:	dd74      	ble.n	80073c2 <_strtod_l+0x54a>
 80072d8:	f018 030f 	ands.w	r3, r8, #15
 80072dc:	d00a      	beq.n	80072f4 <_strtod_l+0x47c>
 80072de:	494f      	ldr	r1, [pc, #316]	; (800741c <_strtod_l+0x5a4>)
 80072e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072e4:	4652      	mov	r2, sl
 80072e6:	465b      	mov	r3, fp
 80072e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072ec:	f7f9 f964 	bl	80005b8 <__aeabi_dmul>
 80072f0:	4682      	mov	sl, r0
 80072f2:	468b      	mov	fp, r1
 80072f4:	f038 080f 	bics.w	r8, r8, #15
 80072f8:	d04f      	beq.n	800739a <_strtod_l+0x522>
 80072fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80072fe:	dd22      	ble.n	8007346 <_strtod_l+0x4ce>
 8007300:	2500      	movs	r5, #0
 8007302:	462e      	mov	r6, r5
 8007304:	9507      	str	r5, [sp, #28]
 8007306:	9505      	str	r5, [sp, #20]
 8007308:	2322      	movs	r3, #34	; 0x22
 800730a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007424 <_strtod_l+0x5ac>
 800730e:	6023      	str	r3, [r4, #0]
 8007310:	f04f 0a00 	mov.w	sl, #0
 8007314:	9b07      	ldr	r3, [sp, #28]
 8007316:	2b00      	cmp	r3, #0
 8007318:	f43f adf2 	beq.w	8006f00 <_strtod_l+0x88>
 800731c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800731e:	4620      	mov	r0, r4
 8007320:	f002 f990 	bl	8009644 <_Bfree>
 8007324:	9905      	ldr	r1, [sp, #20]
 8007326:	4620      	mov	r0, r4
 8007328:	f002 f98c 	bl	8009644 <_Bfree>
 800732c:	4631      	mov	r1, r6
 800732e:	4620      	mov	r0, r4
 8007330:	f002 f988 	bl	8009644 <_Bfree>
 8007334:	9907      	ldr	r1, [sp, #28]
 8007336:	4620      	mov	r0, r4
 8007338:	f002 f984 	bl	8009644 <_Bfree>
 800733c:	4629      	mov	r1, r5
 800733e:	4620      	mov	r0, r4
 8007340:	f002 f980 	bl	8009644 <_Bfree>
 8007344:	e5dc      	b.n	8006f00 <_strtod_l+0x88>
 8007346:	4b36      	ldr	r3, [pc, #216]	; (8007420 <_strtod_l+0x5a8>)
 8007348:	9304      	str	r3, [sp, #16]
 800734a:	2300      	movs	r3, #0
 800734c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007350:	4650      	mov	r0, sl
 8007352:	4659      	mov	r1, fp
 8007354:	4699      	mov	r9, r3
 8007356:	f1b8 0f01 	cmp.w	r8, #1
 800735a:	dc21      	bgt.n	80073a0 <_strtod_l+0x528>
 800735c:	b10b      	cbz	r3, 8007362 <_strtod_l+0x4ea>
 800735e:	4682      	mov	sl, r0
 8007360:	468b      	mov	fp, r1
 8007362:	4b2f      	ldr	r3, [pc, #188]	; (8007420 <_strtod_l+0x5a8>)
 8007364:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007368:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800736c:	4652      	mov	r2, sl
 800736e:	465b      	mov	r3, fp
 8007370:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007374:	f7f9 f920 	bl	80005b8 <__aeabi_dmul>
 8007378:	4b2a      	ldr	r3, [pc, #168]	; (8007424 <_strtod_l+0x5ac>)
 800737a:	460a      	mov	r2, r1
 800737c:	400b      	ands	r3, r1
 800737e:	492a      	ldr	r1, [pc, #168]	; (8007428 <_strtod_l+0x5b0>)
 8007380:	428b      	cmp	r3, r1
 8007382:	4682      	mov	sl, r0
 8007384:	d8bc      	bhi.n	8007300 <_strtod_l+0x488>
 8007386:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800738a:	428b      	cmp	r3, r1
 800738c:	bf86      	itte	hi
 800738e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800742c <_strtod_l+0x5b4>
 8007392:	f04f 3aff 	movhi.w	sl, #4294967295
 8007396:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800739a:	2300      	movs	r3, #0
 800739c:	9304      	str	r3, [sp, #16]
 800739e:	e084      	b.n	80074aa <_strtod_l+0x632>
 80073a0:	f018 0f01 	tst.w	r8, #1
 80073a4:	d005      	beq.n	80073b2 <_strtod_l+0x53a>
 80073a6:	9b04      	ldr	r3, [sp, #16]
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	f7f9 f904 	bl	80005b8 <__aeabi_dmul>
 80073b0:	2301      	movs	r3, #1
 80073b2:	9a04      	ldr	r2, [sp, #16]
 80073b4:	3208      	adds	r2, #8
 80073b6:	f109 0901 	add.w	r9, r9, #1
 80073ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80073be:	9204      	str	r2, [sp, #16]
 80073c0:	e7c9      	b.n	8007356 <_strtod_l+0x4de>
 80073c2:	d0ea      	beq.n	800739a <_strtod_l+0x522>
 80073c4:	f1c8 0800 	rsb	r8, r8, #0
 80073c8:	f018 020f 	ands.w	r2, r8, #15
 80073cc:	d00a      	beq.n	80073e4 <_strtod_l+0x56c>
 80073ce:	4b13      	ldr	r3, [pc, #76]	; (800741c <_strtod_l+0x5a4>)
 80073d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073d4:	4650      	mov	r0, sl
 80073d6:	4659      	mov	r1, fp
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	f7f9 fa16 	bl	800080c <__aeabi_ddiv>
 80073e0:	4682      	mov	sl, r0
 80073e2:	468b      	mov	fp, r1
 80073e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80073e8:	d0d7      	beq.n	800739a <_strtod_l+0x522>
 80073ea:	f1b8 0f1f 	cmp.w	r8, #31
 80073ee:	dd1f      	ble.n	8007430 <_strtod_l+0x5b8>
 80073f0:	2500      	movs	r5, #0
 80073f2:	462e      	mov	r6, r5
 80073f4:	9507      	str	r5, [sp, #28]
 80073f6:	9505      	str	r5, [sp, #20]
 80073f8:	2322      	movs	r3, #34	; 0x22
 80073fa:	f04f 0a00 	mov.w	sl, #0
 80073fe:	f04f 0b00 	mov.w	fp, #0
 8007402:	6023      	str	r3, [r4, #0]
 8007404:	e786      	b.n	8007314 <_strtod_l+0x49c>
 8007406:	bf00      	nop
 8007408:	0800a762 	.word	0x0800a762
 800740c:	0800a7a4 	.word	0x0800a7a4
 8007410:	0800a75a 	.word	0x0800a75a
 8007414:	0800a8e4 	.word	0x0800a8e4
 8007418:	0800a73f 	.word	0x0800a73f
 800741c:	0800aad8 	.word	0x0800aad8
 8007420:	0800aab0 	.word	0x0800aab0
 8007424:	7ff00000 	.word	0x7ff00000
 8007428:	7ca00000 	.word	0x7ca00000
 800742c:	7fefffff 	.word	0x7fefffff
 8007430:	f018 0310 	ands.w	r3, r8, #16
 8007434:	bf18      	it	ne
 8007436:	236a      	movne	r3, #106	; 0x6a
 8007438:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80077e8 <_strtod_l+0x970>
 800743c:	9304      	str	r3, [sp, #16]
 800743e:	4650      	mov	r0, sl
 8007440:	4659      	mov	r1, fp
 8007442:	2300      	movs	r3, #0
 8007444:	f018 0f01 	tst.w	r8, #1
 8007448:	d004      	beq.n	8007454 <_strtod_l+0x5dc>
 800744a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800744e:	f7f9 f8b3 	bl	80005b8 <__aeabi_dmul>
 8007452:	2301      	movs	r3, #1
 8007454:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007458:	f109 0908 	add.w	r9, r9, #8
 800745c:	d1f2      	bne.n	8007444 <_strtod_l+0x5cc>
 800745e:	b10b      	cbz	r3, 8007464 <_strtod_l+0x5ec>
 8007460:	4682      	mov	sl, r0
 8007462:	468b      	mov	fp, r1
 8007464:	9b04      	ldr	r3, [sp, #16]
 8007466:	b1c3      	cbz	r3, 800749a <_strtod_l+0x622>
 8007468:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800746c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007470:	2b00      	cmp	r3, #0
 8007472:	4659      	mov	r1, fp
 8007474:	dd11      	ble.n	800749a <_strtod_l+0x622>
 8007476:	2b1f      	cmp	r3, #31
 8007478:	f340 8124 	ble.w	80076c4 <_strtod_l+0x84c>
 800747c:	2b34      	cmp	r3, #52	; 0x34
 800747e:	bfde      	ittt	le
 8007480:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007484:	f04f 33ff 	movle.w	r3, #4294967295
 8007488:	fa03 f202 	lslle.w	r2, r3, r2
 800748c:	f04f 0a00 	mov.w	sl, #0
 8007490:	bfcc      	ite	gt
 8007492:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007496:	ea02 0b01 	andle.w	fp, r2, r1
 800749a:	2200      	movs	r2, #0
 800749c:	2300      	movs	r3, #0
 800749e:	4650      	mov	r0, sl
 80074a0:	4659      	mov	r1, fp
 80074a2:	f7f9 faf1 	bl	8000a88 <__aeabi_dcmpeq>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d1a2      	bne.n	80073f0 <_strtod_l+0x578>
 80074aa:	9b07      	ldr	r3, [sp, #28]
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	9908      	ldr	r1, [sp, #32]
 80074b0:	462b      	mov	r3, r5
 80074b2:	463a      	mov	r2, r7
 80074b4:	4620      	mov	r0, r4
 80074b6:	f002 f92d 	bl	8009714 <__s2b>
 80074ba:	9007      	str	r0, [sp, #28]
 80074bc:	2800      	cmp	r0, #0
 80074be:	f43f af1f 	beq.w	8007300 <_strtod_l+0x488>
 80074c2:	9b05      	ldr	r3, [sp, #20]
 80074c4:	1b9e      	subs	r6, r3, r6
 80074c6:	9b06      	ldr	r3, [sp, #24]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bfb4      	ite	lt
 80074cc:	4633      	movlt	r3, r6
 80074ce:	2300      	movge	r3, #0
 80074d0:	930c      	str	r3, [sp, #48]	; 0x30
 80074d2:	9b06      	ldr	r3, [sp, #24]
 80074d4:	2500      	movs	r5, #0
 80074d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80074da:	9312      	str	r3, [sp, #72]	; 0x48
 80074dc:	462e      	mov	r6, r5
 80074de:	9b07      	ldr	r3, [sp, #28]
 80074e0:	4620      	mov	r0, r4
 80074e2:	6859      	ldr	r1, [r3, #4]
 80074e4:	f002 f86e 	bl	80095c4 <_Balloc>
 80074e8:	9005      	str	r0, [sp, #20]
 80074ea:	2800      	cmp	r0, #0
 80074ec:	f43f af0c 	beq.w	8007308 <_strtod_l+0x490>
 80074f0:	9b07      	ldr	r3, [sp, #28]
 80074f2:	691a      	ldr	r2, [r3, #16]
 80074f4:	3202      	adds	r2, #2
 80074f6:	f103 010c 	add.w	r1, r3, #12
 80074fa:	0092      	lsls	r2, r2, #2
 80074fc:	300c      	adds	r0, #12
 80074fe:	f002 f839 	bl	8009574 <memcpy>
 8007502:	ec4b ab10 	vmov	d0, sl, fp
 8007506:	aa1a      	add	r2, sp, #104	; 0x68
 8007508:	a919      	add	r1, sp, #100	; 0x64
 800750a:	4620      	mov	r0, r4
 800750c:	f002 fc48 	bl	8009da0 <__d2b>
 8007510:	ec4b ab18 	vmov	d8, sl, fp
 8007514:	9018      	str	r0, [sp, #96]	; 0x60
 8007516:	2800      	cmp	r0, #0
 8007518:	f43f aef6 	beq.w	8007308 <_strtod_l+0x490>
 800751c:	2101      	movs	r1, #1
 800751e:	4620      	mov	r0, r4
 8007520:	f002 f992 	bl	8009848 <__i2b>
 8007524:	4606      	mov	r6, r0
 8007526:	2800      	cmp	r0, #0
 8007528:	f43f aeee 	beq.w	8007308 <_strtod_l+0x490>
 800752c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800752e:	9904      	ldr	r1, [sp, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	bfab      	itete	ge
 8007534:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007536:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007538:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800753a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800753e:	bfac      	ite	ge
 8007540:	eb03 0902 	addge.w	r9, r3, r2
 8007544:	1ad7      	sublt	r7, r2, r3
 8007546:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007548:	eba3 0801 	sub.w	r8, r3, r1
 800754c:	4490      	add	r8, r2
 800754e:	4ba1      	ldr	r3, [pc, #644]	; (80077d4 <_strtod_l+0x95c>)
 8007550:	f108 38ff 	add.w	r8, r8, #4294967295
 8007554:	4598      	cmp	r8, r3
 8007556:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800755a:	f280 80c7 	bge.w	80076ec <_strtod_l+0x874>
 800755e:	eba3 0308 	sub.w	r3, r3, r8
 8007562:	2b1f      	cmp	r3, #31
 8007564:	eba2 0203 	sub.w	r2, r2, r3
 8007568:	f04f 0101 	mov.w	r1, #1
 800756c:	f300 80b1 	bgt.w	80076d2 <_strtod_l+0x85a>
 8007570:	fa01 f303 	lsl.w	r3, r1, r3
 8007574:	930d      	str	r3, [sp, #52]	; 0x34
 8007576:	2300      	movs	r3, #0
 8007578:	9308      	str	r3, [sp, #32]
 800757a:	eb09 0802 	add.w	r8, r9, r2
 800757e:	9b04      	ldr	r3, [sp, #16]
 8007580:	45c1      	cmp	r9, r8
 8007582:	4417      	add	r7, r2
 8007584:	441f      	add	r7, r3
 8007586:	464b      	mov	r3, r9
 8007588:	bfa8      	it	ge
 800758a:	4643      	movge	r3, r8
 800758c:	42bb      	cmp	r3, r7
 800758e:	bfa8      	it	ge
 8007590:	463b      	movge	r3, r7
 8007592:	2b00      	cmp	r3, #0
 8007594:	bfc2      	ittt	gt
 8007596:	eba8 0803 	subgt.w	r8, r8, r3
 800759a:	1aff      	subgt	r7, r7, r3
 800759c:	eba9 0903 	subgt.w	r9, r9, r3
 80075a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	dd17      	ble.n	80075d6 <_strtod_l+0x75e>
 80075a6:	4631      	mov	r1, r6
 80075a8:	461a      	mov	r2, r3
 80075aa:	4620      	mov	r0, r4
 80075ac:	f002 fa0c 	bl	80099c8 <__pow5mult>
 80075b0:	4606      	mov	r6, r0
 80075b2:	2800      	cmp	r0, #0
 80075b4:	f43f aea8 	beq.w	8007308 <_strtod_l+0x490>
 80075b8:	4601      	mov	r1, r0
 80075ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80075bc:	4620      	mov	r0, r4
 80075be:	f002 f959 	bl	8009874 <__multiply>
 80075c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80075c4:	2800      	cmp	r0, #0
 80075c6:	f43f ae9f 	beq.w	8007308 <_strtod_l+0x490>
 80075ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075cc:	4620      	mov	r0, r4
 80075ce:	f002 f839 	bl	8009644 <_Bfree>
 80075d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d4:	9318      	str	r3, [sp, #96]	; 0x60
 80075d6:	f1b8 0f00 	cmp.w	r8, #0
 80075da:	f300 808c 	bgt.w	80076f6 <_strtod_l+0x87e>
 80075de:	9b06      	ldr	r3, [sp, #24]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	dd08      	ble.n	80075f6 <_strtod_l+0x77e>
 80075e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075e6:	9905      	ldr	r1, [sp, #20]
 80075e8:	4620      	mov	r0, r4
 80075ea:	f002 f9ed 	bl	80099c8 <__pow5mult>
 80075ee:	9005      	str	r0, [sp, #20]
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f43f ae89 	beq.w	8007308 <_strtod_l+0x490>
 80075f6:	2f00      	cmp	r7, #0
 80075f8:	dd08      	ble.n	800760c <_strtod_l+0x794>
 80075fa:	9905      	ldr	r1, [sp, #20]
 80075fc:	463a      	mov	r2, r7
 80075fe:	4620      	mov	r0, r4
 8007600:	f002 fa3c 	bl	8009a7c <__lshift>
 8007604:	9005      	str	r0, [sp, #20]
 8007606:	2800      	cmp	r0, #0
 8007608:	f43f ae7e 	beq.w	8007308 <_strtod_l+0x490>
 800760c:	f1b9 0f00 	cmp.w	r9, #0
 8007610:	dd08      	ble.n	8007624 <_strtod_l+0x7ac>
 8007612:	4631      	mov	r1, r6
 8007614:	464a      	mov	r2, r9
 8007616:	4620      	mov	r0, r4
 8007618:	f002 fa30 	bl	8009a7c <__lshift>
 800761c:	4606      	mov	r6, r0
 800761e:	2800      	cmp	r0, #0
 8007620:	f43f ae72 	beq.w	8007308 <_strtod_l+0x490>
 8007624:	9a05      	ldr	r2, [sp, #20]
 8007626:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007628:	4620      	mov	r0, r4
 800762a:	f002 fab3 	bl	8009b94 <__mdiff>
 800762e:	4605      	mov	r5, r0
 8007630:	2800      	cmp	r0, #0
 8007632:	f43f ae69 	beq.w	8007308 <_strtod_l+0x490>
 8007636:	68c3      	ldr	r3, [r0, #12]
 8007638:	930b      	str	r3, [sp, #44]	; 0x2c
 800763a:	2300      	movs	r3, #0
 800763c:	60c3      	str	r3, [r0, #12]
 800763e:	4631      	mov	r1, r6
 8007640:	f002 fa8c 	bl	8009b5c <__mcmp>
 8007644:	2800      	cmp	r0, #0
 8007646:	da60      	bge.n	800770a <_strtod_l+0x892>
 8007648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800764a:	ea53 030a 	orrs.w	r3, r3, sl
 800764e:	f040 8082 	bne.w	8007756 <_strtod_l+0x8de>
 8007652:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007656:	2b00      	cmp	r3, #0
 8007658:	d17d      	bne.n	8007756 <_strtod_l+0x8de>
 800765a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800765e:	0d1b      	lsrs	r3, r3, #20
 8007660:	051b      	lsls	r3, r3, #20
 8007662:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007666:	d976      	bls.n	8007756 <_strtod_l+0x8de>
 8007668:	696b      	ldr	r3, [r5, #20]
 800766a:	b913      	cbnz	r3, 8007672 <_strtod_l+0x7fa>
 800766c:	692b      	ldr	r3, [r5, #16]
 800766e:	2b01      	cmp	r3, #1
 8007670:	dd71      	ble.n	8007756 <_strtod_l+0x8de>
 8007672:	4629      	mov	r1, r5
 8007674:	2201      	movs	r2, #1
 8007676:	4620      	mov	r0, r4
 8007678:	f002 fa00 	bl	8009a7c <__lshift>
 800767c:	4631      	mov	r1, r6
 800767e:	4605      	mov	r5, r0
 8007680:	f002 fa6c 	bl	8009b5c <__mcmp>
 8007684:	2800      	cmp	r0, #0
 8007686:	dd66      	ble.n	8007756 <_strtod_l+0x8de>
 8007688:	9904      	ldr	r1, [sp, #16]
 800768a:	4a53      	ldr	r2, [pc, #332]	; (80077d8 <_strtod_l+0x960>)
 800768c:	465b      	mov	r3, fp
 800768e:	2900      	cmp	r1, #0
 8007690:	f000 8081 	beq.w	8007796 <_strtod_l+0x91e>
 8007694:	ea02 010b 	and.w	r1, r2, fp
 8007698:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800769c:	dc7b      	bgt.n	8007796 <_strtod_l+0x91e>
 800769e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80076a2:	f77f aea9 	ble.w	80073f8 <_strtod_l+0x580>
 80076a6:	4b4d      	ldr	r3, [pc, #308]	; (80077dc <_strtod_l+0x964>)
 80076a8:	4650      	mov	r0, sl
 80076aa:	4659      	mov	r1, fp
 80076ac:	2200      	movs	r2, #0
 80076ae:	f7f8 ff83 	bl	80005b8 <__aeabi_dmul>
 80076b2:	460b      	mov	r3, r1
 80076b4:	4303      	orrs	r3, r0
 80076b6:	bf08      	it	eq
 80076b8:	2322      	moveq	r3, #34	; 0x22
 80076ba:	4682      	mov	sl, r0
 80076bc:	468b      	mov	fp, r1
 80076be:	bf08      	it	eq
 80076c0:	6023      	streq	r3, [r4, #0]
 80076c2:	e62b      	b.n	800731c <_strtod_l+0x4a4>
 80076c4:	f04f 32ff 	mov.w	r2, #4294967295
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	ea03 0a0a 	and.w	sl, r3, sl
 80076d0:	e6e3      	b.n	800749a <_strtod_l+0x622>
 80076d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80076d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80076da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80076de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80076e2:	fa01 f308 	lsl.w	r3, r1, r8
 80076e6:	9308      	str	r3, [sp, #32]
 80076e8:	910d      	str	r1, [sp, #52]	; 0x34
 80076ea:	e746      	b.n	800757a <_strtod_l+0x702>
 80076ec:	2300      	movs	r3, #0
 80076ee:	9308      	str	r3, [sp, #32]
 80076f0:	2301      	movs	r3, #1
 80076f2:	930d      	str	r3, [sp, #52]	; 0x34
 80076f4:	e741      	b.n	800757a <_strtod_l+0x702>
 80076f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076f8:	4642      	mov	r2, r8
 80076fa:	4620      	mov	r0, r4
 80076fc:	f002 f9be 	bl	8009a7c <__lshift>
 8007700:	9018      	str	r0, [sp, #96]	; 0x60
 8007702:	2800      	cmp	r0, #0
 8007704:	f47f af6b 	bne.w	80075de <_strtod_l+0x766>
 8007708:	e5fe      	b.n	8007308 <_strtod_l+0x490>
 800770a:	465f      	mov	r7, fp
 800770c:	d16e      	bne.n	80077ec <_strtod_l+0x974>
 800770e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007710:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007714:	b342      	cbz	r2, 8007768 <_strtod_l+0x8f0>
 8007716:	4a32      	ldr	r2, [pc, #200]	; (80077e0 <_strtod_l+0x968>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d128      	bne.n	800776e <_strtod_l+0x8f6>
 800771c:	9b04      	ldr	r3, [sp, #16]
 800771e:	4651      	mov	r1, sl
 8007720:	b1eb      	cbz	r3, 800775e <_strtod_l+0x8e6>
 8007722:	4b2d      	ldr	r3, [pc, #180]	; (80077d8 <_strtod_l+0x960>)
 8007724:	403b      	ands	r3, r7
 8007726:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800772a:	f04f 32ff 	mov.w	r2, #4294967295
 800772e:	d819      	bhi.n	8007764 <_strtod_l+0x8ec>
 8007730:	0d1b      	lsrs	r3, r3, #20
 8007732:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007736:	fa02 f303 	lsl.w	r3, r2, r3
 800773a:	4299      	cmp	r1, r3
 800773c:	d117      	bne.n	800776e <_strtod_l+0x8f6>
 800773e:	4b29      	ldr	r3, [pc, #164]	; (80077e4 <_strtod_l+0x96c>)
 8007740:	429f      	cmp	r7, r3
 8007742:	d102      	bne.n	800774a <_strtod_l+0x8d2>
 8007744:	3101      	adds	r1, #1
 8007746:	f43f addf 	beq.w	8007308 <_strtod_l+0x490>
 800774a:	4b23      	ldr	r3, [pc, #140]	; (80077d8 <_strtod_l+0x960>)
 800774c:	403b      	ands	r3, r7
 800774e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007752:	f04f 0a00 	mov.w	sl, #0
 8007756:	9b04      	ldr	r3, [sp, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1a4      	bne.n	80076a6 <_strtod_l+0x82e>
 800775c:	e5de      	b.n	800731c <_strtod_l+0x4a4>
 800775e:	f04f 33ff 	mov.w	r3, #4294967295
 8007762:	e7ea      	b.n	800773a <_strtod_l+0x8c2>
 8007764:	4613      	mov	r3, r2
 8007766:	e7e8      	b.n	800773a <_strtod_l+0x8c2>
 8007768:	ea53 030a 	orrs.w	r3, r3, sl
 800776c:	d08c      	beq.n	8007688 <_strtod_l+0x810>
 800776e:	9b08      	ldr	r3, [sp, #32]
 8007770:	b1db      	cbz	r3, 80077aa <_strtod_l+0x932>
 8007772:	423b      	tst	r3, r7
 8007774:	d0ef      	beq.n	8007756 <_strtod_l+0x8de>
 8007776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007778:	9a04      	ldr	r2, [sp, #16]
 800777a:	4650      	mov	r0, sl
 800777c:	4659      	mov	r1, fp
 800777e:	b1c3      	cbz	r3, 80077b2 <_strtod_l+0x93a>
 8007780:	f7ff fb5e 	bl	8006e40 <sulp>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	ec51 0b18 	vmov	r0, r1, d8
 800778c:	f7f8 fd5e 	bl	800024c <__adddf3>
 8007790:	4682      	mov	sl, r0
 8007792:	468b      	mov	fp, r1
 8007794:	e7df      	b.n	8007756 <_strtod_l+0x8de>
 8007796:	4013      	ands	r3, r2
 8007798:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800779c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80077a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80077a4:	f04f 3aff 	mov.w	sl, #4294967295
 80077a8:	e7d5      	b.n	8007756 <_strtod_l+0x8de>
 80077aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077ac:	ea13 0f0a 	tst.w	r3, sl
 80077b0:	e7e0      	b.n	8007774 <_strtod_l+0x8fc>
 80077b2:	f7ff fb45 	bl	8006e40 <sulp>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	ec51 0b18 	vmov	r0, r1, d8
 80077be:	f7f8 fd43 	bl	8000248 <__aeabi_dsub>
 80077c2:	2200      	movs	r2, #0
 80077c4:	2300      	movs	r3, #0
 80077c6:	4682      	mov	sl, r0
 80077c8:	468b      	mov	fp, r1
 80077ca:	f7f9 f95d 	bl	8000a88 <__aeabi_dcmpeq>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d0c1      	beq.n	8007756 <_strtod_l+0x8de>
 80077d2:	e611      	b.n	80073f8 <_strtod_l+0x580>
 80077d4:	fffffc02 	.word	0xfffffc02
 80077d8:	7ff00000 	.word	0x7ff00000
 80077dc:	39500000 	.word	0x39500000
 80077e0:	000fffff 	.word	0x000fffff
 80077e4:	7fefffff 	.word	0x7fefffff
 80077e8:	0800a7b8 	.word	0x0800a7b8
 80077ec:	4631      	mov	r1, r6
 80077ee:	4628      	mov	r0, r5
 80077f0:	f002 fb32 	bl	8009e58 <__ratio>
 80077f4:	ec59 8b10 	vmov	r8, r9, d0
 80077f8:	ee10 0a10 	vmov	r0, s0
 80077fc:	2200      	movs	r2, #0
 80077fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007802:	4649      	mov	r1, r9
 8007804:	f7f9 f954 	bl	8000ab0 <__aeabi_dcmple>
 8007808:	2800      	cmp	r0, #0
 800780a:	d07a      	beq.n	8007902 <_strtod_l+0xa8a>
 800780c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800780e:	2b00      	cmp	r3, #0
 8007810:	d04a      	beq.n	80078a8 <_strtod_l+0xa30>
 8007812:	4b95      	ldr	r3, [pc, #596]	; (8007a68 <_strtod_l+0xbf0>)
 8007814:	2200      	movs	r2, #0
 8007816:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800781a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007a68 <_strtod_l+0xbf0>
 800781e:	f04f 0800 	mov.w	r8, #0
 8007822:	4b92      	ldr	r3, [pc, #584]	; (8007a6c <_strtod_l+0xbf4>)
 8007824:	403b      	ands	r3, r7
 8007826:	930d      	str	r3, [sp, #52]	; 0x34
 8007828:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800782a:	4b91      	ldr	r3, [pc, #580]	; (8007a70 <_strtod_l+0xbf8>)
 800782c:	429a      	cmp	r2, r3
 800782e:	f040 80b0 	bne.w	8007992 <_strtod_l+0xb1a>
 8007832:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007836:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800783a:	ec4b ab10 	vmov	d0, sl, fp
 800783e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007842:	f002 fa31 	bl	8009ca8 <__ulp>
 8007846:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800784a:	ec53 2b10 	vmov	r2, r3, d0
 800784e:	f7f8 feb3 	bl	80005b8 <__aeabi_dmul>
 8007852:	4652      	mov	r2, sl
 8007854:	465b      	mov	r3, fp
 8007856:	f7f8 fcf9 	bl	800024c <__adddf3>
 800785a:	460b      	mov	r3, r1
 800785c:	4983      	ldr	r1, [pc, #524]	; (8007a6c <_strtod_l+0xbf4>)
 800785e:	4a85      	ldr	r2, [pc, #532]	; (8007a74 <_strtod_l+0xbfc>)
 8007860:	4019      	ands	r1, r3
 8007862:	4291      	cmp	r1, r2
 8007864:	4682      	mov	sl, r0
 8007866:	d960      	bls.n	800792a <_strtod_l+0xab2>
 8007868:	ee18 3a90 	vmov	r3, s17
 800786c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007870:	4293      	cmp	r3, r2
 8007872:	d104      	bne.n	800787e <_strtod_l+0xa06>
 8007874:	ee18 3a10 	vmov	r3, s16
 8007878:	3301      	adds	r3, #1
 800787a:	f43f ad45 	beq.w	8007308 <_strtod_l+0x490>
 800787e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007a80 <_strtod_l+0xc08>
 8007882:	f04f 3aff 	mov.w	sl, #4294967295
 8007886:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007888:	4620      	mov	r0, r4
 800788a:	f001 fedb 	bl	8009644 <_Bfree>
 800788e:	9905      	ldr	r1, [sp, #20]
 8007890:	4620      	mov	r0, r4
 8007892:	f001 fed7 	bl	8009644 <_Bfree>
 8007896:	4631      	mov	r1, r6
 8007898:	4620      	mov	r0, r4
 800789a:	f001 fed3 	bl	8009644 <_Bfree>
 800789e:	4629      	mov	r1, r5
 80078a0:	4620      	mov	r0, r4
 80078a2:	f001 fecf 	bl	8009644 <_Bfree>
 80078a6:	e61a      	b.n	80074de <_strtod_l+0x666>
 80078a8:	f1ba 0f00 	cmp.w	sl, #0
 80078ac:	d11b      	bne.n	80078e6 <_strtod_l+0xa6e>
 80078ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078b2:	b9f3      	cbnz	r3, 80078f2 <_strtod_l+0xa7a>
 80078b4:	4b6c      	ldr	r3, [pc, #432]	; (8007a68 <_strtod_l+0xbf0>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	4640      	mov	r0, r8
 80078ba:	4649      	mov	r1, r9
 80078bc:	f7f9 f8ee 	bl	8000a9c <__aeabi_dcmplt>
 80078c0:	b9d0      	cbnz	r0, 80078f8 <_strtod_l+0xa80>
 80078c2:	4640      	mov	r0, r8
 80078c4:	4649      	mov	r1, r9
 80078c6:	4b6c      	ldr	r3, [pc, #432]	; (8007a78 <_strtod_l+0xc00>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	f7f8 fe75 	bl	80005b8 <__aeabi_dmul>
 80078ce:	4680      	mov	r8, r0
 80078d0:	4689      	mov	r9, r1
 80078d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80078d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80078da:	9315      	str	r3, [sp, #84]	; 0x54
 80078dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80078e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80078e4:	e79d      	b.n	8007822 <_strtod_l+0x9aa>
 80078e6:	f1ba 0f01 	cmp.w	sl, #1
 80078ea:	d102      	bne.n	80078f2 <_strtod_l+0xa7a>
 80078ec:	2f00      	cmp	r7, #0
 80078ee:	f43f ad83 	beq.w	80073f8 <_strtod_l+0x580>
 80078f2:	4b62      	ldr	r3, [pc, #392]	; (8007a7c <_strtod_l+0xc04>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	e78e      	b.n	8007816 <_strtod_l+0x99e>
 80078f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007a78 <_strtod_l+0xc00>
 80078fc:	f04f 0800 	mov.w	r8, #0
 8007900:	e7e7      	b.n	80078d2 <_strtod_l+0xa5a>
 8007902:	4b5d      	ldr	r3, [pc, #372]	; (8007a78 <_strtod_l+0xc00>)
 8007904:	4640      	mov	r0, r8
 8007906:	4649      	mov	r1, r9
 8007908:	2200      	movs	r2, #0
 800790a:	f7f8 fe55 	bl	80005b8 <__aeabi_dmul>
 800790e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007910:	4680      	mov	r8, r0
 8007912:	4689      	mov	r9, r1
 8007914:	b933      	cbnz	r3, 8007924 <_strtod_l+0xaac>
 8007916:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800791a:	900e      	str	r0, [sp, #56]	; 0x38
 800791c:	930f      	str	r3, [sp, #60]	; 0x3c
 800791e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007922:	e7dd      	b.n	80078e0 <_strtod_l+0xa68>
 8007924:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007928:	e7f9      	b.n	800791e <_strtod_l+0xaa6>
 800792a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800792e:	9b04      	ldr	r3, [sp, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1a8      	bne.n	8007886 <_strtod_l+0xa0e>
 8007934:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007938:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800793a:	0d1b      	lsrs	r3, r3, #20
 800793c:	051b      	lsls	r3, r3, #20
 800793e:	429a      	cmp	r2, r3
 8007940:	d1a1      	bne.n	8007886 <_strtod_l+0xa0e>
 8007942:	4640      	mov	r0, r8
 8007944:	4649      	mov	r1, r9
 8007946:	f7f9 f997 	bl	8000c78 <__aeabi_d2lz>
 800794a:	f7f8 fe07 	bl	800055c <__aeabi_l2d>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4640      	mov	r0, r8
 8007954:	4649      	mov	r1, r9
 8007956:	f7f8 fc77 	bl	8000248 <__aeabi_dsub>
 800795a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800795c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007960:	ea43 030a 	orr.w	r3, r3, sl
 8007964:	4313      	orrs	r3, r2
 8007966:	4680      	mov	r8, r0
 8007968:	4689      	mov	r9, r1
 800796a:	d055      	beq.n	8007a18 <_strtod_l+0xba0>
 800796c:	a336      	add	r3, pc, #216	; (adr r3, 8007a48 <_strtod_l+0xbd0>)
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	f7f9 f893 	bl	8000a9c <__aeabi_dcmplt>
 8007976:	2800      	cmp	r0, #0
 8007978:	f47f acd0 	bne.w	800731c <_strtod_l+0x4a4>
 800797c:	a334      	add	r3, pc, #208	; (adr r3, 8007a50 <_strtod_l+0xbd8>)
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	4640      	mov	r0, r8
 8007984:	4649      	mov	r1, r9
 8007986:	f7f9 f8a7 	bl	8000ad8 <__aeabi_dcmpgt>
 800798a:	2800      	cmp	r0, #0
 800798c:	f43f af7b 	beq.w	8007886 <_strtod_l+0xa0e>
 8007990:	e4c4      	b.n	800731c <_strtod_l+0x4a4>
 8007992:	9b04      	ldr	r3, [sp, #16]
 8007994:	b333      	cbz	r3, 80079e4 <_strtod_l+0xb6c>
 8007996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007998:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800799c:	d822      	bhi.n	80079e4 <_strtod_l+0xb6c>
 800799e:	a32e      	add	r3, pc, #184	; (adr r3, 8007a58 <_strtod_l+0xbe0>)
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	4640      	mov	r0, r8
 80079a6:	4649      	mov	r1, r9
 80079a8:	f7f9 f882 	bl	8000ab0 <__aeabi_dcmple>
 80079ac:	b1a0      	cbz	r0, 80079d8 <_strtod_l+0xb60>
 80079ae:	4649      	mov	r1, r9
 80079b0:	4640      	mov	r0, r8
 80079b2:	f7f9 f8d9 	bl	8000b68 <__aeabi_d2uiz>
 80079b6:	2801      	cmp	r0, #1
 80079b8:	bf38      	it	cc
 80079ba:	2001      	movcc	r0, #1
 80079bc:	f7f8 fd82 	bl	80004c4 <__aeabi_ui2d>
 80079c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079c2:	4680      	mov	r8, r0
 80079c4:	4689      	mov	r9, r1
 80079c6:	bb23      	cbnz	r3, 8007a12 <_strtod_l+0xb9a>
 80079c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079cc:	9010      	str	r0, [sp, #64]	; 0x40
 80079ce:	9311      	str	r3, [sp, #68]	; 0x44
 80079d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80079d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80079e0:	1a9b      	subs	r3, r3, r2
 80079e2:	9309      	str	r3, [sp, #36]	; 0x24
 80079e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079e8:	eeb0 0a48 	vmov.f32	s0, s16
 80079ec:	eef0 0a68 	vmov.f32	s1, s17
 80079f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079f4:	f002 f958 	bl	8009ca8 <__ulp>
 80079f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079fc:	ec53 2b10 	vmov	r2, r3, d0
 8007a00:	f7f8 fdda 	bl	80005b8 <__aeabi_dmul>
 8007a04:	ec53 2b18 	vmov	r2, r3, d8
 8007a08:	f7f8 fc20 	bl	800024c <__adddf3>
 8007a0c:	4682      	mov	sl, r0
 8007a0e:	468b      	mov	fp, r1
 8007a10:	e78d      	b.n	800792e <_strtod_l+0xab6>
 8007a12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007a16:	e7db      	b.n	80079d0 <_strtod_l+0xb58>
 8007a18:	a311      	add	r3, pc, #68	; (adr r3, 8007a60 <_strtod_l+0xbe8>)
 8007a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1e:	f7f9 f83d 	bl	8000a9c <__aeabi_dcmplt>
 8007a22:	e7b2      	b.n	800798a <_strtod_l+0xb12>
 8007a24:	2300      	movs	r3, #0
 8007a26:	930a      	str	r3, [sp, #40]	; 0x28
 8007a28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	f7ff ba6b 	b.w	8006f08 <_strtod_l+0x90>
 8007a32:	2a65      	cmp	r2, #101	; 0x65
 8007a34:	f43f ab5f 	beq.w	80070f6 <_strtod_l+0x27e>
 8007a38:	2a45      	cmp	r2, #69	; 0x45
 8007a3a:	f43f ab5c 	beq.w	80070f6 <_strtod_l+0x27e>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f7ff bb94 	b.w	800716c <_strtod_l+0x2f4>
 8007a44:	f3af 8000 	nop.w
 8007a48:	94a03595 	.word	0x94a03595
 8007a4c:	3fdfffff 	.word	0x3fdfffff
 8007a50:	35afe535 	.word	0x35afe535
 8007a54:	3fe00000 	.word	0x3fe00000
 8007a58:	ffc00000 	.word	0xffc00000
 8007a5c:	41dfffff 	.word	0x41dfffff
 8007a60:	94a03595 	.word	0x94a03595
 8007a64:	3fcfffff 	.word	0x3fcfffff
 8007a68:	3ff00000 	.word	0x3ff00000
 8007a6c:	7ff00000 	.word	0x7ff00000
 8007a70:	7fe00000 	.word	0x7fe00000
 8007a74:	7c9fffff 	.word	0x7c9fffff
 8007a78:	3fe00000 	.word	0x3fe00000
 8007a7c:	bff00000 	.word	0xbff00000
 8007a80:	7fefffff 	.word	0x7fefffff

08007a84 <_strtod_r>:
 8007a84:	4b01      	ldr	r3, [pc, #4]	; (8007a8c <_strtod_r+0x8>)
 8007a86:	f7ff b9f7 	b.w	8006e78 <_strtod_l>
 8007a8a:	bf00      	nop
 8007a8c:	20000074 	.word	0x20000074

08007a90 <_strtol_l.constprop.0>:
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a96:	d001      	beq.n	8007a9c <_strtol_l.constprop.0+0xc>
 8007a98:	2b24      	cmp	r3, #36	; 0x24
 8007a9a:	d906      	bls.n	8007aaa <_strtol_l.constprop.0+0x1a>
 8007a9c:	f7fe f992 	bl	8005dc4 <__errno>
 8007aa0:	2316      	movs	r3, #22
 8007aa2:	6003      	str	r3, [r0, #0]
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aaa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007b90 <_strtol_l.constprop.0+0x100>
 8007aae:	460d      	mov	r5, r1
 8007ab0:	462e      	mov	r6, r5
 8007ab2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ab6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007aba:	f017 0708 	ands.w	r7, r7, #8
 8007abe:	d1f7      	bne.n	8007ab0 <_strtol_l.constprop.0+0x20>
 8007ac0:	2c2d      	cmp	r4, #45	; 0x2d
 8007ac2:	d132      	bne.n	8007b2a <_strtol_l.constprop.0+0x9a>
 8007ac4:	782c      	ldrb	r4, [r5, #0]
 8007ac6:	2701      	movs	r7, #1
 8007ac8:	1cb5      	adds	r5, r6, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d05b      	beq.n	8007b86 <_strtol_l.constprop.0+0xf6>
 8007ace:	2b10      	cmp	r3, #16
 8007ad0:	d109      	bne.n	8007ae6 <_strtol_l.constprop.0+0x56>
 8007ad2:	2c30      	cmp	r4, #48	; 0x30
 8007ad4:	d107      	bne.n	8007ae6 <_strtol_l.constprop.0+0x56>
 8007ad6:	782c      	ldrb	r4, [r5, #0]
 8007ad8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007adc:	2c58      	cmp	r4, #88	; 0x58
 8007ade:	d14d      	bne.n	8007b7c <_strtol_l.constprop.0+0xec>
 8007ae0:	786c      	ldrb	r4, [r5, #1]
 8007ae2:	2310      	movs	r3, #16
 8007ae4:	3502      	adds	r5, #2
 8007ae6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007aea:	f108 38ff 	add.w	r8, r8, #4294967295
 8007aee:	f04f 0c00 	mov.w	ip, #0
 8007af2:	fbb8 f9f3 	udiv	r9, r8, r3
 8007af6:	4666      	mov	r6, ip
 8007af8:	fb03 8a19 	mls	sl, r3, r9, r8
 8007afc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007b00:	f1be 0f09 	cmp.w	lr, #9
 8007b04:	d816      	bhi.n	8007b34 <_strtol_l.constprop.0+0xa4>
 8007b06:	4674      	mov	r4, lr
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	dd24      	ble.n	8007b56 <_strtol_l.constprop.0+0xc6>
 8007b0c:	f1bc 0f00 	cmp.w	ip, #0
 8007b10:	db1e      	blt.n	8007b50 <_strtol_l.constprop.0+0xc0>
 8007b12:	45b1      	cmp	r9, r6
 8007b14:	d31c      	bcc.n	8007b50 <_strtol_l.constprop.0+0xc0>
 8007b16:	d101      	bne.n	8007b1c <_strtol_l.constprop.0+0x8c>
 8007b18:	45a2      	cmp	sl, r4
 8007b1a:	db19      	blt.n	8007b50 <_strtol_l.constprop.0+0xc0>
 8007b1c:	fb06 4603 	mla	r6, r6, r3, r4
 8007b20:	f04f 0c01 	mov.w	ip, #1
 8007b24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b28:	e7e8      	b.n	8007afc <_strtol_l.constprop.0+0x6c>
 8007b2a:	2c2b      	cmp	r4, #43	; 0x2b
 8007b2c:	bf04      	itt	eq
 8007b2e:	782c      	ldrbeq	r4, [r5, #0]
 8007b30:	1cb5      	addeq	r5, r6, #2
 8007b32:	e7ca      	b.n	8007aca <_strtol_l.constprop.0+0x3a>
 8007b34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007b38:	f1be 0f19 	cmp.w	lr, #25
 8007b3c:	d801      	bhi.n	8007b42 <_strtol_l.constprop.0+0xb2>
 8007b3e:	3c37      	subs	r4, #55	; 0x37
 8007b40:	e7e2      	b.n	8007b08 <_strtol_l.constprop.0+0x78>
 8007b42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007b46:	f1be 0f19 	cmp.w	lr, #25
 8007b4a:	d804      	bhi.n	8007b56 <_strtol_l.constprop.0+0xc6>
 8007b4c:	3c57      	subs	r4, #87	; 0x57
 8007b4e:	e7db      	b.n	8007b08 <_strtol_l.constprop.0+0x78>
 8007b50:	f04f 3cff 	mov.w	ip, #4294967295
 8007b54:	e7e6      	b.n	8007b24 <_strtol_l.constprop.0+0x94>
 8007b56:	f1bc 0f00 	cmp.w	ip, #0
 8007b5a:	da05      	bge.n	8007b68 <_strtol_l.constprop.0+0xd8>
 8007b5c:	2322      	movs	r3, #34	; 0x22
 8007b5e:	6003      	str	r3, [r0, #0]
 8007b60:	4646      	mov	r6, r8
 8007b62:	b942      	cbnz	r2, 8007b76 <_strtol_l.constprop.0+0xe6>
 8007b64:	4630      	mov	r0, r6
 8007b66:	e79e      	b.n	8007aa6 <_strtol_l.constprop.0+0x16>
 8007b68:	b107      	cbz	r7, 8007b6c <_strtol_l.constprop.0+0xdc>
 8007b6a:	4276      	negs	r6, r6
 8007b6c:	2a00      	cmp	r2, #0
 8007b6e:	d0f9      	beq.n	8007b64 <_strtol_l.constprop.0+0xd4>
 8007b70:	f1bc 0f00 	cmp.w	ip, #0
 8007b74:	d000      	beq.n	8007b78 <_strtol_l.constprop.0+0xe8>
 8007b76:	1e69      	subs	r1, r5, #1
 8007b78:	6011      	str	r1, [r2, #0]
 8007b7a:	e7f3      	b.n	8007b64 <_strtol_l.constprop.0+0xd4>
 8007b7c:	2430      	movs	r4, #48	; 0x30
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1b1      	bne.n	8007ae6 <_strtol_l.constprop.0+0x56>
 8007b82:	2308      	movs	r3, #8
 8007b84:	e7af      	b.n	8007ae6 <_strtol_l.constprop.0+0x56>
 8007b86:	2c30      	cmp	r4, #48	; 0x30
 8007b88:	d0a5      	beq.n	8007ad6 <_strtol_l.constprop.0+0x46>
 8007b8a:	230a      	movs	r3, #10
 8007b8c:	e7ab      	b.n	8007ae6 <_strtol_l.constprop.0+0x56>
 8007b8e:	bf00      	nop
 8007b90:	0800a7e1 	.word	0x0800a7e1

08007b94 <_strtol_r>:
 8007b94:	f7ff bf7c 	b.w	8007a90 <_strtol_l.constprop.0>

08007b98 <__swbuf_r>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	460e      	mov	r6, r1
 8007b9c:	4614      	mov	r4, r2
 8007b9e:	4605      	mov	r5, r0
 8007ba0:	b118      	cbz	r0, 8007baa <__swbuf_r+0x12>
 8007ba2:	6983      	ldr	r3, [r0, #24]
 8007ba4:	b90b      	cbnz	r3, 8007baa <__swbuf_r+0x12>
 8007ba6:	f001 f853 	bl	8008c50 <__sinit>
 8007baa:	4b21      	ldr	r3, [pc, #132]	; (8007c30 <__swbuf_r+0x98>)
 8007bac:	429c      	cmp	r4, r3
 8007bae:	d12b      	bne.n	8007c08 <__swbuf_r+0x70>
 8007bb0:	686c      	ldr	r4, [r5, #4]
 8007bb2:	69a3      	ldr	r3, [r4, #24]
 8007bb4:	60a3      	str	r3, [r4, #8]
 8007bb6:	89a3      	ldrh	r3, [r4, #12]
 8007bb8:	071a      	lsls	r2, r3, #28
 8007bba:	d52f      	bpl.n	8007c1c <__swbuf_r+0x84>
 8007bbc:	6923      	ldr	r3, [r4, #16]
 8007bbe:	b36b      	cbz	r3, 8007c1c <__swbuf_r+0x84>
 8007bc0:	6923      	ldr	r3, [r4, #16]
 8007bc2:	6820      	ldr	r0, [r4, #0]
 8007bc4:	1ac0      	subs	r0, r0, r3
 8007bc6:	6963      	ldr	r3, [r4, #20]
 8007bc8:	b2f6      	uxtb	r6, r6
 8007bca:	4283      	cmp	r3, r0
 8007bcc:	4637      	mov	r7, r6
 8007bce:	dc04      	bgt.n	8007bda <__swbuf_r+0x42>
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	f000 ffa8 	bl	8008b28 <_fflush_r>
 8007bd8:	bb30      	cbnz	r0, 8007c28 <__swbuf_r+0x90>
 8007bda:	68a3      	ldr	r3, [r4, #8]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	60a3      	str	r3, [r4, #8]
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	6022      	str	r2, [r4, #0]
 8007be6:	701e      	strb	r6, [r3, #0]
 8007be8:	6963      	ldr	r3, [r4, #20]
 8007bea:	3001      	adds	r0, #1
 8007bec:	4283      	cmp	r3, r0
 8007bee:	d004      	beq.n	8007bfa <__swbuf_r+0x62>
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	07db      	lsls	r3, r3, #31
 8007bf4:	d506      	bpl.n	8007c04 <__swbuf_r+0x6c>
 8007bf6:	2e0a      	cmp	r6, #10
 8007bf8:	d104      	bne.n	8007c04 <__swbuf_r+0x6c>
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	f000 ff93 	bl	8008b28 <_fflush_r>
 8007c02:	b988      	cbnz	r0, 8007c28 <__swbuf_r+0x90>
 8007c04:	4638      	mov	r0, r7
 8007c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c08:	4b0a      	ldr	r3, [pc, #40]	; (8007c34 <__swbuf_r+0x9c>)
 8007c0a:	429c      	cmp	r4, r3
 8007c0c:	d101      	bne.n	8007c12 <__swbuf_r+0x7a>
 8007c0e:	68ac      	ldr	r4, [r5, #8]
 8007c10:	e7cf      	b.n	8007bb2 <__swbuf_r+0x1a>
 8007c12:	4b09      	ldr	r3, [pc, #36]	; (8007c38 <__swbuf_r+0xa0>)
 8007c14:	429c      	cmp	r4, r3
 8007c16:	bf08      	it	eq
 8007c18:	68ec      	ldreq	r4, [r5, #12]
 8007c1a:	e7ca      	b.n	8007bb2 <__swbuf_r+0x1a>
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f000 f80c 	bl	8007c3c <__swsetup_r>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d0cb      	beq.n	8007bc0 <__swbuf_r+0x28>
 8007c28:	f04f 37ff 	mov.w	r7, #4294967295
 8007c2c:	e7ea      	b.n	8007c04 <__swbuf_r+0x6c>
 8007c2e:	bf00      	nop
 8007c30:	0800a994 	.word	0x0800a994
 8007c34:	0800a9b4 	.word	0x0800a9b4
 8007c38:	0800a974 	.word	0x0800a974

08007c3c <__swsetup_r>:
 8007c3c:	4b32      	ldr	r3, [pc, #200]	; (8007d08 <__swsetup_r+0xcc>)
 8007c3e:	b570      	push	{r4, r5, r6, lr}
 8007c40:	681d      	ldr	r5, [r3, #0]
 8007c42:	4606      	mov	r6, r0
 8007c44:	460c      	mov	r4, r1
 8007c46:	b125      	cbz	r5, 8007c52 <__swsetup_r+0x16>
 8007c48:	69ab      	ldr	r3, [r5, #24]
 8007c4a:	b913      	cbnz	r3, 8007c52 <__swsetup_r+0x16>
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	f000 ffff 	bl	8008c50 <__sinit>
 8007c52:	4b2e      	ldr	r3, [pc, #184]	; (8007d0c <__swsetup_r+0xd0>)
 8007c54:	429c      	cmp	r4, r3
 8007c56:	d10f      	bne.n	8007c78 <__swsetup_r+0x3c>
 8007c58:	686c      	ldr	r4, [r5, #4]
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c60:	0719      	lsls	r1, r3, #28
 8007c62:	d42c      	bmi.n	8007cbe <__swsetup_r+0x82>
 8007c64:	06dd      	lsls	r5, r3, #27
 8007c66:	d411      	bmi.n	8007c8c <__swsetup_r+0x50>
 8007c68:	2309      	movs	r3, #9
 8007c6a:	6033      	str	r3, [r6, #0]
 8007c6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c70:	81a3      	strh	r3, [r4, #12]
 8007c72:	f04f 30ff 	mov.w	r0, #4294967295
 8007c76:	e03e      	b.n	8007cf6 <__swsetup_r+0xba>
 8007c78:	4b25      	ldr	r3, [pc, #148]	; (8007d10 <__swsetup_r+0xd4>)
 8007c7a:	429c      	cmp	r4, r3
 8007c7c:	d101      	bne.n	8007c82 <__swsetup_r+0x46>
 8007c7e:	68ac      	ldr	r4, [r5, #8]
 8007c80:	e7eb      	b.n	8007c5a <__swsetup_r+0x1e>
 8007c82:	4b24      	ldr	r3, [pc, #144]	; (8007d14 <__swsetup_r+0xd8>)
 8007c84:	429c      	cmp	r4, r3
 8007c86:	bf08      	it	eq
 8007c88:	68ec      	ldreq	r4, [r5, #12]
 8007c8a:	e7e6      	b.n	8007c5a <__swsetup_r+0x1e>
 8007c8c:	0758      	lsls	r0, r3, #29
 8007c8e:	d512      	bpl.n	8007cb6 <__swsetup_r+0x7a>
 8007c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c92:	b141      	cbz	r1, 8007ca6 <__swsetup_r+0x6a>
 8007c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c98:	4299      	cmp	r1, r3
 8007c9a:	d002      	beq.n	8007ca2 <__swsetup_r+0x66>
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f002 f969 	bl	8009f74 <_free_r>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	6363      	str	r3, [r4, #52]	; 0x34
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cac:	81a3      	strh	r3, [r4, #12]
 8007cae:	2300      	movs	r3, #0
 8007cb0:	6063      	str	r3, [r4, #4]
 8007cb2:	6923      	ldr	r3, [r4, #16]
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	f043 0308 	orr.w	r3, r3, #8
 8007cbc:	81a3      	strh	r3, [r4, #12]
 8007cbe:	6923      	ldr	r3, [r4, #16]
 8007cc0:	b94b      	cbnz	r3, 8007cd6 <__swsetup_r+0x9a>
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ccc:	d003      	beq.n	8007cd6 <__swsetup_r+0x9a>
 8007cce:	4621      	mov	r1, r4
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f001 fbf5 	bl	80094c0 <__smakebuf_r>
 8007cd6:	89a0      	ldrh	r0, [r4, #12]
 8007cd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cdc:	f010 0301 	ands.w	r3, r0, #1
 8007ce0:	d00a      	beq.n	8007cf8 <__swsetup_r+0xbc>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60a3      	str	r3, [r4, #8]
 8007ce6:	6963      	ldr	r3, [r4, #20]
 8007ce8:	425b      	negs	r3, r3
 8007cea:	61a3      	str	r3, [r4, #24]
 8007cec:	6923      	ldr	r3, [r4, #16]
 8007cee:	b943      	cbnz	r3, 8007d02 <__swsetup_r+0xc6>
 8007cf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cf4:	d1ba      	bne.n	8007c6c <__swsetup_r+0x30>
 8007cf6:	bd70      	pop	{r4, r5, r6, pc}
 8007cf8:	0781      	lsls	r1, r0, #30
 8007cfa:	bf58      	it	pl
 8007cfc:	6963      	ldrpl	r3, [r4, #20]
 8007cfe:	60a3      	str	r3, [r4, #8]
 8007d00:	e7f4      	b.n	8007cec <__swsetup_r+0xb0>
 8007d02:	2000      	movs	r0, #0
 8007d04:	e7f7      	b.n	8007cf6 <__swsetup_r+0xba>
 8007d06:	bf00      	nop
 8007d08:	2000000c 	.word	0x2000000c
 8007d0c:	0800a994 	.word	0x0800a994
 8007d10:	0800a9b4 	.word	0x0800a9b4
 8007d14:	0800a974 	.word	0x0800a974

08007d18 <abort>:
 8007d18:	b508      	push	{r3, lr}
 8007d1a:	2006      	movs	r0, #6
 8007d1c:	f002 fbd4 	bl	800a4c8 <raise>
 8007d20:	2001      	movs	r0, #1
 8007d22:	f7f9 fc7f 	bl	8001624 <_exit>

08007d26 <quorem>:
 8007d26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2a:	6903      	ldr	r3, [r0, #16]
 8007d2c:	690c      	ldr	r4, [r1, #16]
 8007d2e:	42a3      	cmp	r3, r4
 8007d30:	4607      	mov	r7, r0
 8007d32:	f2c0 8081 	blt.w	8007e38 <quorem+0x112>
 8007d36:	3c01      	subs	r4, #1
 8007d38:	f101 0814 	add.w	r8, r1, #20
 8007d3c:	f100 0514 	add.w	r5, r0, #20
 8007d40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d44:	9301      	str	r3, [sp, #4]
 8007d46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	429a      	cmp	r2, r3
 8007d52:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d56:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d5a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d5e:	d331      	bcc.n	8007dc4 <quorem+0x9e>
 8007d60:	f04f 0e00 	mov.w	lr, #0
 8007d64:	4640      	mov	r0, r8
 8007d66:	46ac      	mov	ip, r5
 8007d68:	46f2      	mov	sl, lr
 8007d6a:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d6e:	b293      	uxth	r3, r2
 8007d70:	fb06 e303 	mla	r3, r6, r3, lr
 8007d74:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	ebaa 0303 	sub.w	r3, sl, r3
 8007d7e:	f8dc a000 	ldr.w	sl, [ip]
 8007d82:	0c12      	lsrs	r2, r2, #16
 8007d84:	fa13 f38a 	uxtah	r3, r3, sl
 8007d88:	fb06 e202 	mla	r2, r6, r2, lr
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	9b00      	ldr	r3, [sp, #0]
 8007d90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d94:	b292      	uxth	r2, r2
 8007d96:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d9e:	f8bd 3000 	ldrh.w	r3, [sp]
 8007da2:	4581      	cmp	r9, r0
 8007da4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007da8:	f84c 3b04 	str.w	r3, [ip], #4
 8007dac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007db0:	d2db      	bcs.n	8007d6a <quorem+0x44>
 8007db2:	f855 300b 	ldr.w	r3, [r5, fp]
 8007db6:	b92b      	cbnz	r3, 8007dc4 <quorem+0x9e>
 8007db8:	9b01      	ldr	r3, [sp, #4]
 8007dba:	3b04      	subs	r3, #4
 8007dbc:	429d      	cmp	r5, r3
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	d32e      	bcc.n	8007e20 <quorem+0xfa>
 8007dc2:	613c      	str	r4, [r7, #16]
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	f001 fec9 	bl	8009b5c <__mcmp>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	db24      	blt.n	8007e18 <quorem+0xf2>
 8007dce:	3601      	adds	r6, #1
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	f04f 0c00 	mov.w	ip, #0
 8007dd6:	f858 2b04 	ldr.w	r2, [r8], #4
 8007dda:	f8d0 e000 	ldr.w	lr, [r0]
 8007dde:	b293      	uxth	r3, r2
 8007de0:	ebac 0303 	sub.w	r3, ip, r3
 8007de4:	0c12      	lsrs	r2, r2, #16
 8007de6:	fa13 f38e 	uxtah	r3, r3, lr
 8007dea:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007dee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007df8:	45c1      	cmp	r9, r8
 8007dfa:	f840 3b04 	str.w	r3, [r0], #4
 8007dfe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e02:	d2e8      	bcs.n	8007dd6 <quorem+0xb0>
 8007e04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e0c:	b922      	cbnz	r2, 8007e18 <quorem+0xf2>
 8007e0e:	3b04      	subs	r3, #4
 8007e10:	429d      	cmp	r5, r3
 8007e12:	461a      	mov	r2, r3
 8007e14:	d30a      	bcc.n	8007e2c <quorem+0x106>
 8007e16:	613c      	str	r4, [r7, #16]
 8007e18:	4630      	mov	r0, r6
 8007e1a:	b003      	add	sp, #12
 8007e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e20:	6812      	ldr	r2, [r2, #0]
 8007e22:	3b04      	subs	r3, #4
 8007e24:	2a00      	cmp	r2, #0
 8007e26:	d1cc      	bne.n	8007dc2 <quorem+0x9c>
 8007e28:	3c01      	subs	r4, #1
 8007e2a:	e7c7      	b.n	8007dbc <quorem+0x96>
 8007e2c:	6812      	ldr	r2, [r2, #0]
 8007e2e:	3b04      	subs	r3, #4
 8007e30:	2a00      	cmp	r2, #0
 8007e32:	d1f0      	bne.n	8007e16 <quorem+0xf0>
 8007e34:	3c01      	subs	r4, #1
 8007e36:	e7eb      	b.n	8007e10 <quorem+0xea>
 8007e38:	2000      	movs	r0, #0
 8007e3a:	e7ee      	b.n	8007e1a <quorem+0xf4>
 8007e3c:	0000      	movs	r0, r0
	...

08007e40 <_dtoa_r>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	ed2d 8b04 	vpush	{d8-d9}
 8007e48:	ec57 6b10 	vmov	r6, r7, d0
 8007e4c:	b093      	sub	sp, #76	; 0x4c
 8007e4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e54:	9106      	str	r1, [sp, #24]
 8007e56:	ee10 aa10 	vmov	sl, s0
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e5e:	930c      	str	r3, [sp, #48]	; 0x30
 8007e60:	46bb      	mov	fp, r7
 8007e62:	b975      	cbnz	r5, 8007e82 <_dtoa_r+0x42>
 8007e64:	2010      	movs	r0, #16
 8007e66:	f001 fb6b 	bl	8009540 <malloc>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	6260      	str	r0, [r4, #36]	; 0x24
 8007e6e:	b920      	cbnz	r0, 8007e7a <_dtoa_r+0x3a>
 8007e70:	4ba7      	ldr	r3, [pc, #668]	; (8008110 <_dtoa_r+0x2d0>)
 8007e72:	21ea      	movs	r1, #234	; 0xea
 8007e74:	48a7      	ldr	r0, [pc, #668]	; (8008114 <_dtoa_r+0x2d4>)
 8007e76:	f7fd ff87 	bl	8005d88 <__assert_func>
 8007e7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e7e:	6005      	str	r5, [r0, #0]
 8007e80:	60c5      	str	r5, [r0, #12]
 8007e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e84:	6819      	ldr	r1, [r3, #0]
 8007e86:	b151      	cbz	r1, 8007e9e <_dtoa_r+0x5e>
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	604a      	str	r2, [r1, #4]
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	4093      	lsls	r3, r2
 8007e90:	608b      	str	r3, [r1, #8]
 8007e92:	4620      	mov	r0, r4
 8007e94:	f001 fbd6 	bl	8009644 <_Bfree>
 8007e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	1e3b      	subs	r3, r7, #0
 8007ea0:	bfaa      	itet	ge
 8007ea2:	2300      	movge	r3, #0
 8007ea4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007ea8:	f8c8 3000 	strge.w	r3, [r8]
 8007eac:	4b9a      	ldr	r3, [pc, #616]	; (8008118 <_dtoa_r+0x2d8>)
 8007eae:	bfbc      	itt	lt
 8007eb0:	2201      	movlt	r2, #1
 8007eb2:	f8c8 2000 	strlt.w	r2, [r8]
 8007eb6:	ea33 030b 	bics.w	r3, r3, fp
 8007eba:	d11b      	bne.n	8007ef4 <_dtoa_r+0xb4>
 8007ebc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ebe:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ec2:	6013      	str	r3, [r2, #0]
 8007ec4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ec8:	4333      	orrs	r3, r6
 8007eca:	f000 8592 	beq.w	80089f2 <_dtoa_r+0xbb2>
 8007ece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ed0:	b963      	cbnz	r3, 8007eec <_dtoa_r+0xac>
 8007ed2:	4b92      	ldr	r3, [pc, #584]	; (800811c <_dtoa_r+0x2dc>)
 8007ed4:	e022      	b.n	8007f1c <_dtoa_r+0xdc>
 8007ed6:	4b92      	ldr	r3, [pc, #584]	; (8008120 <_dtoa_r+0x2e0>)
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	3308      	adds	r3, #8
 8007edc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ede:	6013      	str	r3, [r2, #0]
 8007ee0:	9801      	ldr	r0, [sp, #4]
 8007ee2:	b013      	add	sp, #76	; 0x4c
 8007ee4:	ecbd 8b04 	vpop	{d8-d9}
 8007ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eec:	4b8b      	ldr	r3, [pc, #556]	; (800811c <_dtoa_r+0x2dc>)
 8007eee:	9301      	str	r3, [sp, #4]
 8007ef0:	3303      	adds	r3, #3
 8007ef2:	e7f3      	b.n	8007edc <_dtoa_r+0x9c>
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	4650      	mov	r0, sl
 8007efa:	4659      	mov	r1, fp
 8007efc:	f7f8 fdc4 	bl	8000a88 <__aeabi_dcmpeq>
 8007f00:	ec4b ab19 	vmov	d9, sl, fp
 8007f04:	4680      	mov	r8, r0
 8007f06:	b158      	cbz	r0, 8007f20 <_dtoa_r+0xe0>
 8007f08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 856b 	beq.w	80089ec <_dtoa_r+0xbac>
 8007f16:	4883      	ldr	r0, [pc, #524]	; (8008124 <_dtoa_r+0x2e4>)
 8007f18:	6018      	str	r0, [r3, #0]
 8007f1a:	1e43      	subs	r3, r0, #1
 8007f1c:	9301      	str	r3, [sp, #4]
 8007f1e:	e7df      	b.n	8007ee0 <_dtoa_r+0xa0>
 8007f20:	ec4b ab10 	vmov	d0, sl, fp
 8007f24:	aa10      	add	r2, sp, #64	; 0x40
 8007f26:	a911      	add	r1, sp, #68	; 0x44
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f001 ff39 	bl	8009da0 <__d2b>
 8007f2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007f32:	ee08 0a10 	vmov	s16, r0
 8007f36:	2d00      	cmp	r5, #0
 8007f38:	f000 8084 	beq.w	8008044 <_dtoa_r+0x204>
 8007f3c:	ee19 3a90 	vmov	r3, s19
 8007f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007f48:	4656      	mov	r6, sl
 8007f4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007f4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007f56:	4b74      	ldr	r3, [pc, #464]	; (8008128 <_dtoa_r+0x2e8>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	4639      	mov	r1, r7
 8007f5e:	f7f8 f973 	bl	8000248 <__aeabi_dsub>
 8007f62:	a365      	add	r3, pc, #404	; (adr r3, 80080f8 <_dtoa_r+0x2b8>)
 8007f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f68:	f7f8 fb26 	bl	80005b8 <__aeabi_dmul>
 8007f6c:	a364      	add	r3, pc, #400	; (adr r3, 8008100 <_dtoa_r+0x2c0>)
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	f7f8 f96b 	bl	800024c <__adddf3>
 8007f76:	4606      	mov	r6, r0
 8007f78:	4628      	mov	r0, r5
 8007f7a:	460f      	mov	r7, r1
 8007f7c:	f7f8 fab2 	bl	80004e4 <__aeabi_i2d>
 8007f80:	a361      	add	r3, pc, #388	; (adr r3, 8008108 <_dtoa_r+0x2c8>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f7f8 fb17 	bl	80005b8 <__aeabi_dmul>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	4630      	mov	r0, r6
 8007f90:	4639      	mov	r1, r7
 8007f92:	f7f8 f95b 	bl	800024c <__adddf3>
 8007f96:	4606      	mov	r6, r0
 8007f98:	460f      	mov	r7, r1
 8007f9a:	f7f8 fdbd 	bl	8000b18 <__aeabi_d2iz>
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	9000      	str	r0, [sp, #0]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	4639      	mov	r1, r7
 8007fa8:	f7f8 fd78 	bl	8000a9c <__aeabi_dcmplt>
 8007fac:	b150      	cbz	r0, 8007fc4 <_dtoa_r+0x184>
 8007fae:	9800      	ldr	r0, [sp, #0]
 8007fb0:	f7f8 fa98 	bl	80004e4 <__aeabi_i2d>
 8007fb4:	4632      	mov	r2, r6
 8007fb6:	463b      	mov	r3, r7
 8007fb8:	f7f8 fd66 	bl	8000a88 <__aeabi_dcmpeq>
 8007fbc:	b910      	cbnz	r0, 8007fc4 <_dtoa_r+0x184>
 8007fbe:	9b00      	ldr	r3, [sp, #0]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	9b00      	ldr	r3, [sp, #0]
 8007fc6:	2b16      	cmp	r3, #22
 8007fc8:	d85a      	bhi.n	8008080 <_dtoa_r+0x240>
 8007fca:	9a00      	ldr	r2, [sp, #0]
 8007fcc:	4b57      	ldr	r3, [pc, #348]	; (800812c <_dtoa_r+0x2ec>)
 8007fce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd6:	ec51 0b19 	vmov	r0, r1, d9
 8007fda:	f7f8 fd5f 	bl	8000a9c <__aeabi_dcmplt>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d050      	beq.n	8008084 <_dtoa_r+0x244>
 8007fe2:	9b00      	ldr	r3, [sp, #0]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fee:	1b5d      	subs	r5, r3, r5
 8007ff0:	1e6b      	subs	r3, r5, #1
 8007ff2:	9305      	str	r3, [sp, #20]
 8007ff4:	bf45      	ittet	mi
 8007ff6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007ffa:	9304      	strmi	r3, [sp, #16]
 8007ffc:	2300      	movpl	r3, #0
 8007ffe:	2300      	movmi	r3, #0
 8008000:	bf4c      	ite	mi
 8008002:	9305      	strmi	r3, [sp, #20]
 8008004:	9304      	strpl	r3, [sp, #16]
 8008006:	9b00      	ldr	r3, [sp, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	db3d      	blt.n	8008088 <_dtoa_r+0x248>
 800800c:	9b05      	ldr	r3, [sp, #20]
 800800e:	9a00      	ldr	r2, [sp, #0]
 8008010:	920a      	str	r2, [sp, #40]	; 0x28
 8008012:	4413      	add	r3, r2
 8008014:	9305      	str	r3, [sp, #20]
 8008016:	2300      	movs	r3, #0
 8008018:	9307      	str	r3, [sp, #28]
 800801a:	9b06      	ldr	r3, [sp, #24]
 800801c:	2b09      	cmp	r3, #9
 800801e:	f200 8089 	bhi.w	8008134 <_dtoa_r+0x2f4>
 8008022:	2b05      	cmp	r3, #5
 8008024:	bfc4      	itt	gt
 8008026:	3b04      	subgt	r3, #4
 8008028:	9306      	strgt	r3, [sp, #24]
 800802a:	9b06      	ldr	r3, [sp, #24]
 800802c:	f1a3 0302 	sub.w	r3, r3, #2
 8008030:	bfcc      	ite	gt
 8008032:	2500      	movgt	r5, #0
 8008034:	2501      	movle	r5, #1
 8008036:	2b03      	cmp	r3, #3
 8008038:	f200 8087 	bhi.w	800814a <_dtoa_r+0x30a>
 800803c:	e8df f003 	tbb	[pc, r3]
 8008040:	59383a2d 	.word	0x59383a2d
 8008044:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008048:	441d      	add	r5, r3
 800804a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800804e:	2b20      	cmp	r3, #32
 8008050:	bfc1      	itttt	gt
 8008052:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008056:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800805a:	fa0b f303 	lslgt.w	r3, fp, r3
 800805e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008062:	bfda      	itte	le
 8008064:	f1c3 0320 	rsble	r3, r3, #32
 8008068:	fa06 f003 	lslle.w	r0, r6, r3
 800806c:	4318      	orrgt	r0, r3
 800806e:	f7f8 fa29 	bl	80004c4 <__aeabi_ui2d>
 8008072:	2301      	movs	r3, #1
 8008074:	4606      	mov	r6, r0
 8008076:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800807a:	3d01      	subs	r5, #1
 800807c:	930e      	str	r3, [sp, #56]	; 0x38
 800807e:	e76a      	b.n	8007f56 <_dtoa_r+0x116>
 8008080:	2301      	movs	r3, #1
 8008082:	e7b2      	b.n	8007fea <_dtoa_r+0x1aa>
 8008084:	900b      	str	r0, [sp, #44]	; 0x2c
 8008086:	e7b1      	b.n	8007fec <_dtoa_r+0x1ac>
 8008088:	9b04      	ldr	r3, [sp, #16]
 800808a:	9a00      	ldr	r2, [sp, #0]
 800808c:	1a9b      	subs	r3, r3, r2
 800808e:	9304      	str	r3, [sp, #16]
 8008090:	4253      	negs	r3, r2
 8008092:	9307      	str	r3, [sp, #28]
 8008094:	2300      	movs	r3, #0
 8008096:	930a      	str	r3, [sp, #40]	; 0x28
 8008098:	e7bf      	b.n	800801a <_dtoa_r+0x1da>
 800809a:	2300      	movs	r3, #0
 800809c:	9308      	str	r3, [sp, #32]
 800809e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	dc55      	bgt.n	8008150 <_dtoa_r+0x310>
 80080a4:	2301      	movs	r3, #1
 80080a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80080aa:	461a      	mov	r2, r3
 80080ac:	9209      	str	r2, [sp, #36]	; 0x24
 80080ae:	e00c      	b.n	80080ca <_dtoa_r+0x28a>
 80080b0:	2301      	movs	r3, #1
 80080b2:	e7f3      	b.n	800809c <_dtoa_r+0x25c>
 80080b4:	2300      	movs	r3, #0
 80080b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080b8:	9308      	str	r3, [sp, #32]
 80080ba:	9b00      	ldr	r3, [sp, #0]
 80080bc:	4413      	add	r3, r2
 80080be:	9302      	str	r3, [sp, #8]
 80080c0:	3301      	adds	r3, #1
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	9303      	str	r3, [sp, #12]
 80080c6:	bfb8      	it	lt
 80080c8:	2301      	movlt	r3, #1
 80080ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80080cc:	2200      	movs	r2, #0
 80080ce:	6042      	str	r2, [r0, #4]
 80080d0:	2204      	movs	r2, #4
 80080d2:	f102 0614 	add.w	r6, r2, #20
 80080d6:	429e      	cmp	r6, r3
 80080d8:	6841      	ldr	r1, [r0, #4]
 80080da:	d93d      	bls.n	8008158 <_dtoa_r+0x318>
 80080dc:	4620      	mov	r0, r4
 80080de:	f001 fa71 	bl	80095c4 <_Balloc>
 80080e2:	9001      	str	r0, [sp, #4]
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d13b      	bne.n	8008160 <_dtoa_r+0x320>
 80080e8:	4b11      	ldr	r3, [pc, #68]	; (8008130 <_dtoa_r+0x2f0>)
 80080ea:	4602      	mov	r2, r0
 80080ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080f0:	e6c0      	b.n	8007e74 <_dtoa_r+0x34>
 80080f2:	2301      	movs	r3, #1
 80080f4:	e7df      	b.n	80080b6 <_dtoa_r+0x276>
 80080f6:	bf00      	nop
 80080f8:	636f4361 	.word	0x636f4361
 80080fc:	3fd287a7 	.word	0x3fd287a7
 8008100:	8b60c8b3 	.word	0x8b60c8b3
 8008104:	3fc68a28 	.word	0x3fc68a28
 8008108:	509f79fb 	.word	0x509f79fb
 800810c:	3fd34413 	.word	0x3fd34413
 8008110:	0800a8ee 	.word	0x0800a8ee
 8008114:	0800a905 	.word	0x0800a905
 8008118:	7ff00000 	.word	0x7ff00000
 800811c:	0800a8ea 	.word	0x0800a8ea
 8008120:	0800a8e1 	.word	0x0800a8e1
 8008124:	0800a766 	.word	0x0800a766
 8008128:	3ff80000 	.word	0x3ff80000
 800812c:	0800aad8 	.word	0x0800aad8
 8008130:	0800a960 	.word	0x0800a960
 8008134:	2501      	movs	r5, #1
 8008136:	2300      	movs	r3, #0
 8008138:	9306      	str	r3, [sp, #24]
 800813a:	9508      	str	r5, [sp, #32]
 800813c:	f04f 33ff 	mov.w	r3, #4294967295
 8008140:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008144:	2200      	movs	r2, #0
 8008146:	2312      	movs	r3, #18
 8008148:	e7b0      	b.n	80080ac <_dtoa_r+0x26c>
 800814a:	2301      	movs	r3, #1
 800814c:	9308      	str	r3, [sp, #32]
 800814e:	e7f5      	b.n	800813c <_dtoa_r+0x2fc>
 8008150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008152:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008156:	e7b8      	b.n	80080ca <_dtoa_r+0x28a>
 8008158:	3101      	adds	r1, #1
 800815a:	6041      	str	r1, [r0, #4]
 800815c:	0052      	lsls	r2, r2, #1
 800815e:	e7b8      	b.n	80080d2 <_dtoa_r+0x292>
 8008160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008162:	9a01      	ldr	r2, [sp, #4]
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	9b03      	ldr	r3, [sp, #12]
 8008168:	2b0e      	cmp	r3, #14
 800816a:	f200 809d 	bhi.w	80082a8 <_dtoa_r+0x468>
 800816e:	2d00      	cmp	r5, #0
 8008170:	f000 809a 	beq.w	80082a8 <_dtoa_r+0x468>
 8008174:	9b00      	ldr	r3, [sp, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	dd32      	ble.n	80081e0 <_dtoa_r+0x3a0>
 800817a:	4ab7      	ldr	r2, [pc, #732]	; (8008458 <_dtoa_r+0x618>)
 800817c:	f003 030f 	and.w	r3, r3, #15
 8008180:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008184:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008188:	9b00      	ldr	r3, [sp, #0]
 800818a:	05d8      	lsls	r0, r3, #23
 800818c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008190:	d516      	bpl.n	80081c0 <_dtoa_r+0x380>
 8008192:	4bb2      	ldr	r3, [pc, #712]	; (800845c <_dtoa_r+0x61c>)
 8008194:	ec51 0b19 	vmov	r0, r1, d9
 8008198:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800819c:	f7f8 fb36 	bl	800080c <__aeabi_ddiv>
 80081a0:	f007 070f 	and.w	r7, r7, #15
 80081a4:	4682      	mov	sl, r0
 80081a6:	468b      	mov	fp, r1
 80081a8:	2503      	movs	r5, #3
 80081aa:	4eac      	ldr	r6, [pc, #688]	; (800845c <_dtoa_r+0x61c>)
 80081ac:	b957      	cbnz	r7, 80081c4 <_dtoa_r+0x384>
 80081ae:	4642      	mov	r2, r8
 80081b0:	464b      	mov	r3, r9
 80081b2:	4650      	mov	r0, sl
 80081b4:	4659      	mov	r1, fp
 80081b6:	f7f8 fb29 	bl	800080c <__aeabi_ddiv>
 80081ba:	4682      	mov	sl, r0
 80081bc:	468b      	mov	fp, r1
 80081be:	e028      	b.n	8008212 <_dtoa_r+0x3d2>
 80081c0:	2502      	movs	r5, #2
 80081c2:	e7f2      	b.n	80081aa <_dtoa_r+0x36a>
 80081c4:	07f9      	lsls	r1, r7, #31
 80081c6:	d508      	bpl.n	80081da <_dtoa_r+0x39a>
 80081c8:	4640      	mov	r0, r8
 80081ca:	4649      	mov	r1, r9
 80081cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081d0:	f7f8 f9f2 	bl	80005b8 <__aeabi_dmul>
 80081d4:	3501      	adds	r5, #1
 80081d6:	4680      	mov	r8, r0
 80081d8:	4689      	mov	r9, r1
 80081da:	107f      	asrs	r7, r7, #1
 80081dc:	3608      	adds	r6, #8
 80081de:	e7e5      	b.n	80081ac <_dtoa_r+0x36c>
 80081e0:	f000 809b 	beq.w	800831a <_dtoa_r+0x4da>
 80081e4:	9b00      	ldr	r3, [sp, #0]
 80081e6:	4f9d      	ldr	r7, [pc, #628]	; (800845c <_dtoa_r+0x61c>)
 80081e8:	425e      	negs	r6, r3
 80081ea:	4b9b      	ldr	r3, [pc, #620]	; (8008458 <_dtoa_r+0x618>)
 80081ec:	f006 020f 	and.w	r2, r6, #15
 80081f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	ec51 0b19 	vmov	r0, r1, d9
 80081fc:	f7f8 f9dc 	bl	80005b8 <__aeabi_dmul>
 8008200:	1136      	asrs	r6, r6, #4
 8008202:	4682      	mov	sl, r0
 8008204:	468b      	mov	fp, r1
 8008206:	2300      	movs	r3, #0
 8008208:	2502      	movs	r5, #2
 800820a:	2e00      	cmp	r6, #0
 800820c:	d17a      	bne.n	8008304 <_dtoa_r+0x4c4>
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1d3      	bne.n	80081ba <_dtoa_r+0x37a>
 8008212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 8082 	beq.w	800831e <_dtoa_r+0x4de>
 800821a:	4b91      	ldr	r3, [pc, #580]	; (8008460 <_dtoa_r+0x620>)
 800821c:	2200      	movs	r2, #0
 800821e:	4650      	mov	r0, sl
 8008220:	4659      	mov	r1, fp
 8008222:	f7f8 fc3b 	bl	8000a9c <__aeabi_dcmplt>
 8008226:	2800      	cmp	r0, #0
 8008228:	d079      	beq.n	800831e <_dtoa_r+0x4de>
 800822a:	9b03      	ldr	r3, [sp, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d076      	beq.n	800831e <_dtoa_r+0x4de>
 8008230:	9b02      	ldr	r3, [sp, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	dd36      	ble.n	80082a4 <_dtoa_r+0x464>
 8008236:	9b00      	ldr	r3, [sp, #0]
 8008238:	4650      	mov	r0, sl
 800823a:	4659      	mov	r1, fp
 800823c:	1e5f      	subs	r7, r3, #1
 800823e:	2200      	movs	r2, #0
 8008240:	4b88      	ldr	r3, [pc, #544]	; (8008464 <_dtoa_r+0x624>)
 8008242:	f7f8 f9b9 	bl	80005b8 <__aeabi_dmul>
 8008246:	9e02      	ldr	r6, [sp, #8]
 8008248:	4682      	mov	sl, r0
 800824a:	468b      	mov	fp, r1
 800824c:	3501      	adds	r5, #1
 800824e:	4628      	mov	r0, r5
 8008250:	f7f8 f948 	bl	80004e4 <__aeabi_i2d>
 8008254:	4652      	mov	r2, sl
 8008256:	465b      	mov	r3, fp
 8008258:	f7f8 f9ae 	bl	80005b8 <__aeabi_dmul>
 800825c:	4b82      	ldr	r3, [pc, #520]	; (8008468 <_dtoa_r+0x628>)
 800825e:	2200      	movs	r2, #0
 8008260:	f7f7 fff4 	bl	800024c <__adddf3>
 8008264:	46d0      	mov	r8, sl
 8008266:	46d9      	mov	r9, fp
 8008268:	4682      	mov	sl, r0
 800826a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800826e:	2e00      	cmp	r6, #0
 8008270:	d158      	bne.n	8008324 <_dtoa_r+0x4e4>
 8008272:	4b7e      	ldr	r3, [pc, #504]	; (800846c <_dtoa_r+0x62c>)
 8008274:	2200      	movs	r2, #0
 8008276:	4640      	mov	r0, r8
 8008278:	4649      	mov	r1, r9
 800827a:	f7f7 ffe5 	bl	8000248 <__aeabi_dsub>
 800827e:	4652      	mov	r2, sl
 8008280:	465b      	mov	r3, fp
 8008282:	4680      	mov	r8, r0
 8008284:	4689      	mov	r9, r1
 8008286:	f7f8 fc27 	bl	8000ad8 <__aeabi_dcmpgt>
 800828a:	2800      	cmp	r0, #0
 800828c:	f040 8295 	bne.w	80087ba <_dtoa_r+0x97a>
 8008290:	4652      	mov	r2, sl
 8008292:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008296:	4640      	mov	r0, r8
 8008298:	4649      	mov	r1, r9
 800829a:	f7f8 fbff 	bl	8000a9c <__aeabi_dcmplt>
 800829e:	2800      	cmp	r0, #0
 80082a0:	f040 8289 	bne.w	80087b6 <_dtoa_r+0x976>
 80082a4:	ec5b ab19 	vmov	sl, fp, d9
 80082a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f2c0 8148 	blt.w	8008540 <_dtoa_r+0x700>
 80082b0:	9a00      	ldr	r2, [sp, #0]
 80082b2:	2a0e      	cmp	r2, #14
 80082b4:	f300 8144 	bgt.w	8008540 <_dtoa_r+0x700>
 80082b8:	4b67      	ldr	r3, [pc, #412]	; (8008458 <_dtoa_r+0x618>)
 80082ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f280 80d5 	bge.w	8008474 <_dtoa_r+0x634>
 80082ca:	9b03      	ldr	r3, [sp, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f300 80d1 	bgt.w	8008474 <_dtoa_r+0x634>
 80082d2:	f040 826f 	bne.w	80087b4 <_dtoa_r+0x974>
 80082d6:	4b65      	ldr	r3, [pc, #404]	; (800846c <_dtoa_r+0x62c>)
 80082d8:	2200      	movs	r2, #0
 80082da:	4640      	mov	r0, r8
 80082dc:	4649      	mov	r1, r9
 80082de:	f7f8 f96b 	bl	80005b8 <__aeabi_dmul>
 80082e2:	4652      	mov	r2, sl
 80082e4:	465b      	mov	r3, fp
 80082e6:	f7f8 fbed 	bl	8000ac4 <__aeabi_dcmpge>
 80082ea:	9e03      	ldr	r6, [sp, #12]
 80082ec:	4637      	mov	r7, r6
 80082ee:	2800      	cmp	r0, #0
 80082f0:	f040 8245 	bne.w	800877e <_dtoa_r+0x93e>
 80082f4:	9d01      	ldr	r5, [sp, #4]
 80082f6:	2331      	movs	r3, #49	; 0x31
 80082f8:	f805 3b01 	strb.w	r3, [r5], #1
 80082fc:	9b00      	ldr	r3, [sp, #0]
 80082fe:	3301      	adds	r3, #1
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	e240      	b.n	8008786 <_dtoa_r+0x946>
 8008304:	07f2      	lsls	r2, r6, #31
 8008306:	d505      	bpl.n	8008314 <_dtoa_r+0x4d4>
 8008308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800830c:	f7f8 f954 	bl	80005b8 <__aeabi_dmul>
 8008310:	3501      	adds	r5, #1
 8008312:	2301      	movs	r3, #1
 8008314:	1076      	asrs	r6, r6, #1
 8008316:	3708      	adds	r7, #8
 8008318:	e777      	b.n	800820a <_dtoa_r+0x3ca>
 800831a:	2502      	movs	r5, #2
 800831c:	e779      	b.n	8008212 <_dtoa_r+0x3d2>
 800831e:	9f00      	ldr	r7, [sp, #0]
 8008320:	9e03      	ldr	r6, [sp, #12]
 8008322:	e794      	b.n	800824e <_dtoa_r+0x40e>
 8008324:	9901      	ldr	r1, [sp, #4]
 8008326:	4b4c      	ldr	r3, [pc, #304]	; (8008458 <_dtoa_r+0x618>)
 8008328:	4431      	add	r1, r6
 800832a:	910d      	str	r1, [sp, #52]	; 0x34
 800832c:	9908      	ldr	r1, [sp, #32]
 800832e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008332:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008336:	2900      	cmp	r1, #0
 8008338:	d043      	beq.n	80083c2 <_dtoa_r+0x582>
 800833a:	494d      	ldr	r1, [pc, #308]	; (8008470 <_dtoa_r+0x630>)
 800833c:	2000      	movs	r0, #0
 800833e:	f7f8 fa65 	bl	800080c <__aeabi_ddiv>
 8008342:	4652      	mov	r2, sl
 8008344:	465b      	mov	r3, fp
 8008346:	f7f7 ff7f 	bl	8000248 <__aeabi_dsub>
 800834a:	9d01      	ldr	r5, [sp, #4]
 800834c:	4682      	mov	sl, r0
 800834e:	468b      	mov	fp, r1
 8008350:	4649      	mov	r1, r9
 8008352:	4640      	mov	r0, r8
 8008354:	f7f8 fbe0 	bl	8000b18 <__aeabi_d2iz>
 8008358:	4606      	mov	r6, r0
 800835a:	f7f8 f8c3 	bl	80004e4 <__aeabi_i2d>
 800835e:	4602      	mov	r2, r0
 8008360:	460b      	mov	r3, r1
 8008362:	4640      	mov	r0, r8
 8008364:	4649      	mov	r1, r9
 8008366:	f7f7 ff6f 	bl	8000248 <__aeabi_dsub>
 800836a:	3630      	adds	r6, #48	; 0x30
 800836c:	f805 6b01 	strb.w	r6, [r5], #1
 8008370:	4652      	mov	r2, sl
 8008372:	465b      	mov	r3, fp
 8008374:	4680      	mov	r8, r0
 8008376:	4689      	mov	r9, r1
 8008378:	f7f8 fb90 	bl	8000a9c <__aeabi_dcmplt>
 800837c:	2800      	cmp	r0, #0
 800837e:	d163      	bne.n	8008448 <_dtoa_r+0x608>
 8008380:	4642      	mov	r2, r8
 8008382:	464b      	mov	r3, r9
 8008384:	4936      	ldr	r1, [pc, #216]	; (8008460 <_dtoa_r+0x620>)
 8008386:	2000      	movs	r0, #0
 8008388:	f7f7 ff5e 	bl	8000248 <__aeabi_dsub>
 800838c:	4652      	mov	r2, sl
 800838e:	465b      	mov	r3, fp
 8008390:	f7f8 fb84 	bl	8000a9c <__aeabi_dcmplt>
 8008394:	2800      	cmp	r0, #0
 8008396:	f040 80b5 	bne.w	8008504 <_dtoa_r+0x6c4>
 800839a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800839c:	429d      	cmp	r5, r3
 800839e:	d081      	beq.n	80082a4 <_dtoa_r+0x464>
 80083a0:	4b30      	ldr	r3, [pc, #192]	; (8008464 <_dtoa_r+0x624>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	4650      	mov	r0, sl
 80083a6:	4659      	mov	r1, fp
 80083a8:	f7f8 f906 	bl	80005b8 <__aeabi_dmul>
 80083ac:	4b2d      	ldr	r3, [pc, #180]	; (8008464 <_dtoa_r+0x624>)
 80083ae:	4682      	mov	sl, r0
 80083b0:	468b      	mov	fp, r1
 80083b2:	4640      	mov	r0, r8
 80083b4:	4649      	mov	r1, r9
 80083b6:	2200      	movs	r2, #0
 80083b8:	f7f8 f8fe 	bl	80005b8 <__aeabi_dmul>
 80083bc:	4680      	mov	r8, r0
 80083be:	4689      	mov	r9, r1
 80083c0:	e7c6      	b.n	8008350 <_dtoa_r+0x510>
 80083c2:	4650      	mov	r0, sl
 80083c4:	4659      	mov	r1, fp
 80083c6:	f7f8 f8f7 	bl	80005b8 <__aeabi_dmul>
 80083ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083cc:	9d01      	ldr	r5, [sp, #4]
 80083ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80083d0:	4682      	mov	sl, r0
 80083d2:	468b      	mov	fp, r1
 80083d4:	4649      	mov	r1, r9
 80083d6:	4640      	mov	r0, r8
 80083d8:	f7f8 fb9e 	bl	8000b18 <__aeabi_d2iz>
 80083dc:	4606      	mov	r6, r0
 80083de:	f7f8 f881 	bl	80004e4 <__aeabi_i2d>
 80083e2:	3630      	adds	r6, #48	; 0x30
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	4640      	mov	r0, r8
 80083ea:	4649      	mov	r1, r9
 80083ec:	f7f7 ff2c 	bl	8000248 <__aeabi_dsub>
 80083f0:	f805 6b01 	strb.w	r6, [r5], #1
 80083f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083f6:	429d      	cmp	r5, r3
 80083f8:	4680      	mov	r8, r0
 80083fa:	4689      	mov	r9, r1
 80083fc:	f04f 0200 	mov.w	r2, #0
 8008400:	d124      	bne.n	800844c <_dtoa_r+0x60c>
 8008402:	4b1b      	ldr	r3, [pc, #108]	; (8008470 <_dtoa_r+0x630>)
 8008404:	4650      	mov	r0, sl
 8008406:	4659      	mov	r1, fp
 8008408:	f7f7 ff20 	bl	800024c <__adddf3>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4640      	mov	r0, r8
 8008412:	4649      	mov	r1, r9
 8008414:	f7f8 fb60 	bl	8000ad8 <__aeabi_dcmpgt>
 8008418:	2800      	cmp	r0, #0
 800841a:	d173      	bne.n	8008504 <_dtoa_r+0x6c4>
 800841c:	4652      	mov	r2, sl
 800841e:	465b      	mov	r3, fp
 8008420:	4913      	ldr	r1, [pc, #76]	; (8008470 <_dtoa_r+0x630>)
 8008422:	2000      	movs	r0, #0
 8008424:	f7f7 ff10 	bl	8000248 <__aeabi_dsub>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4640      	mov	r0, r8
 800842e:	4649      	mov	r1, r9
 8008430:	f7f8 fb34 	bl	8000a9c <__aeabi_dcmplt>
 8008434:	2800      	cmp	r0, #0
 8008436:	f43f af35 	beq.w	80082a4 <_dtoa_r+0x464>
 800843a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800843c:	1e6b      	subs	r3, r5, #1
 800843e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008440:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008444:	2b30      	cmp	r3, #48	; 0x30
 8008446:	d0f8      	beq.n	800843a <_dtoa_r+0x5fa>
 8008448:	9700      	str	r7, [sp, #0]
 800844a:	e049      	b.n	80084e0 <_dtoa_r+0x6a0>
 800844c:	4b05      	ldr	r3, [pc, #20]	; (8008464 <_dtoa_r+0x624>)
 800844e:	f7f8 f8b3 	bl	80005b8 <__aeabi_dmul>
 8008452:	4680      	mov	r8, r0
 8008454:	4689      	mov	r9, r1
 8008456:	e7bd      	b.n	80083d4 <_dtoa_r+0x594>
 8008458:	0800aad8 	.word	0x0800aad8
 800845c:	0800aab0 	.word	0x0800aab0
 8008460:	3ff00000 	.word	0x3ff00000
 8008464:	40240000 	.word	0x40240000
 8008468:	401c0000 	.word	0x401c0000
 800846c:	40140000 	.word	0x40140000
 8008470:	3fe00000 	.word	0x3fe00000
 8008474:	9d01      	ldr	r5, [sp, #4]
 8008476:	4656      	mov	r6, sl
 8008478:	465f      	mov	r7, fp
 800847a:	4642      	mov	r2, r8
 800847c:	464b      	mov	r3, r9
 800847e:	4630      	mov	r0, r6
 8008480:	4639      	mov	r1, r7
 8008482:	f7f8 f9c3 	bl	800080c <__aeabi_ddiv>
 8008486:	f7f8 fb47 	bl	8000b18 <__aeabi_d2iz>
 800848a:	4682      	mov	sl, r0
 800848c:	f7f8 f82a 	bl	80004e4 <__aeabi_i2d>
 8008490:	4642      	mov	r2, r8
 8008492:	464b      	mov	r3, r9
 8008494:	f7f8 f890 	bl	80005b8 <__aeabi_dmul>
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	4630      	mov	r0, r6
 800849e:	4639      	mov	r1, r7
 80084a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80084a4:	f7f7 fed0 	bl	8000248 <__aeabi_dsub>
 80084a8:	f805 6b01 	strb.w	r6, [r5], #1
 80084ac:	9e01      	ldr	r6, [sp, #4]
 80084ae:	9f03      	ldr	r7, [sp, #12]
 80084b0:	1bae      	subs	r6, r5, r6
 80084b2:	42b7      	cmp	r7, r6
 80084b4:	4602      	mov	r2, r0
 80084b6:	460b      	mov	r3, r1
 80084b8:	d135      	bne.n	8008526 <_dtoa_r+0x6e6>
 80084ba:	f7f7 fec7 	bl	800024c <__adddf3>
 80084be:	4642      	mov	r2, r8
 80084c0:	464b      	mov	r3, r9
 80084c2:	4606      	mov	r6, r0
 80084c4:	460f      	mov	r7, r1
 80084c6:	f7f8 fb07 	bl	8000ad8 <__aeabi_dcmpgt>
 80084ca:	b9d0      	cbnz	r0, 8008502 <_dtoa_r+0x6c2>
 80084cc:	4642      	mov	r2, r8
 80084ce:	464b      	mov	r3, r9
 80084d0:	4630      	mov	r0, r6
 80084d2:	4639      	mov	r1, r7
 80084d4:	f7f8 fad8 	bl	8000a88 <__aeabi_dcmpeq>
 80084d8:	b110      	cbz	r0, 80084e0 <_dtoa_r+0x6a0>
 80084da:	f01a 0f01 	tst.w	sl, #1
 80084de:	d110      	bne.n	8008502 <_dtoa_r+0x6c2>
 80084e0:	4620      	mov	r0, r4
 80084e2:	ee18 1a10 	vmov	r1, s16
 80084e6:	f001 f8ad 	bl	8009644 <_Bfree>
 80084ea:	2300      	movs	r3, #0
 80084ec:	9800      	ldr	r0, [sp, #0]
 80084ee:	702b      	strb	r3, [r5, #0]
 80084f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084f2:	3001      	adds	r0, #1
 80084f4:	6018      	str	r0, [r3, #0]
 80084f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f43f acf1 	beq.w	8007ee0 <_dtoa_r+0xa0>
 80084fe:	601d      	str	r5, [r3, #0]
 8008500:	e4ee      	b.n	8007ee0 <_dtoa_r+0xa0>
 8008502:	9f00      	ldr	r7, [sp, #0]
 8008504:	462b      	mov	r3, r5
 8008506:	461d      	mov	r5, r3
 8008508:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800850c:	2a39      	cmp	r2, #57	; 0x39
 800850e:	d106      	bne.n	800851e <_dtoa_r+0x6de>
 8008510:	9a01      	ldr	r2, [sp, #4]
 8008512:	429a      	cmp	r2, r3
 8008514:	d1f7      	bne.n	8008506 <_dtoa_r+0x6c6>
 8008516:	9901      	ldr	r1, [sp, #4]
 8008518:	2230      	movs	r2, #48	; 0x30
 800851a:	3701      	adds	r7, #1
 800851c:	700a      	strb	r2, [r1, #0]
 800851e:	781a      	ldrb	r2, [r3, #0]
 8008520:	3201      	adds	r2, #1
 8008522:	701a      	strb	r2, [r3, #0]
 8008524:	e790      	b.n	8008448 <_dtoa_r+0x608>
 8008526:	4ba6      	ldr	r3, [pc, #664]	; (80087c0 <_dtoa_r+0x980>)
 8008528:	2200      	movs	r2, #0
 800852a:	f7f8 f845 	bl	80005b8 <__aeabi_dmul>
 800852e:	2200      	movs	r2, #0
 8008530:	2300      	movs	r3, #0
 8008532:	4606      	mov	r6, r0
 8008534:	460f      	mov	r7, r1
 8008536:	f7f8 faa7 	bl	8000a88 <__aeabi_dcmpeq>
 800853a:	2800      	cmp	r0, #0
 800853c:	d09d      	beq.n	800847a <_dtoa_r+0x63a>
 800853e:	e7cf      	b.n	80084e0 <_dtoa_r+0x6a0>
 8008540:	9a08      	ldr	r2, [sp, #32]
 8008542:	2a00      	cmp	r2, #0
 8008544:	f000 80d7 	beq.w	80086f6 <_dtoa_r+0x8b6>
 8008548:	9a06      	ldr	r2, [sp, #24]
 800854a:	2a01      	cmp	r2, #1
 800854c:	f300 80ba 	bgt.w	80086c4 <_dtoa_r+0x884>
 8008550:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008552:	2a00      	cmp	r2, #0
 8008554:	f000 80b2 	beq.w	80086bc <_dtoa_r+0x87c>
 8008558:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800855c:	9e07      	ldr	r6, [sp, #28]
 800855e:	9d04      	ldr	r5, [sp, #16]
 8008560:	9a04      	ldr	r2, [sp, #16]
 8008562:	441a      	add	r2, r3
 8008564:	9204      	str	r2, [sp, #16]
 8008566:	9a05      	ldr	r2, [sp, #20]
 8008568:	2101      	movs	r1, #1
 800856a:	441a      	add	r2, r3
 800856c:	4620      	mov	r0, r4
 800856e:	9205      	str	r2, [sp, #20]
 8008570:	f001 f96a 	bl	8009848 <__i2b>
 8008574:	4607      	mov	r7, r0
 8008576:	2d00      	cmp	r5, #0
 8008578:	dd0c      	ble.n	8008594 <_dtoa_r+0x754>
 800857a:	9b05      	ldr	r3, [sp, #20]
 800857c:	2b00      	cmp	r3, #0
 800857e:	dd09      	ble.n	8008594 <_dtoa_r+0x754>
 8008580:	42ab      	cmp	r3, r5
 8008582:	9a04      	ldr	r2, [sp, #16]
 8008584:	bfa8      	it	ge
 8008586:	462b      	movge	r3, r5
 8008588:	1ad2      	subs	r2, r2, r3
 800858a:	9204      	str	r2, [sp, #16]
 800858c:	9a05      	ldr	r2, [sp, #20]
 800858e:	1aed      	subs	r5, r5, r3
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	9305      	str	r3, [sp, #20]
 8008594:	9b07      	ldr	r3, [sp, #28]
 8008596:	b31b      	cbz	r3, 80085e0 <_dtoa_r+0x7a0>
 8008598:	9b08      	ldr	r3, [sp, #32]
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 80af 	beq.w	80086fe <_dtoa_r+0x8be>
 80085a0:	2e00      	cmp	r6, #0
 80085a2:	dd13      	ble.n	80085cc <_dtoa_r+0x78c>
 80085a4:	4639      	mov	r1, r7
 80085a6:	4632      	mov	r2, r6
 80085a8:	4620      	mov	r0, r4
 80085aa:	f001 fa0d 	bl	80099c8 <__pow5mult>
 80085ae:	ee18 2a10 	vmov	r2, s16
 80085b2:	4601      	mov	r1, r0
 80085b4:	4607      	mov	r7, r0
 80085b6:	4620      	mov	r0, r4
 80085b8:	f001 f95c 	bl	8009874 <__multiply>
 80085bc:	ee18 1a10 	vmov	r1, s16
 80085c0:	4680      	mov	r8, r0
 80085c2:	4620      	mov	r0, r4
 80085c4:	f001 f83e 	bl	8009644 <_Bfree>
 80085c8:	ee08 8a10 	vmov	s16, r8
 80085cc:	9b07      	ldr	r3, [sp, #28]
 80085ce:	1b9a      	subs	r2, r3, r6
 80085d0:	d006      	beq.n	80085e0 <_dtoa_r+0x7a0>
 80085d2:	ee18 1a10 	vmov	r1, s16
 80085d6:	4620      	mov	r0, r4
 80085d8:	f001 f9f6 	bl	80099c8 <__pow5mult>
 80085dc:	ee08 0a10 	vmov	s16, r0
 80085e0:	2101      	movs	r1, #1
 80085e2:	4620      	mov	r0, r4
 80085e4:	f001 f930 	bl	8009848 <__i2b>
 80085e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	4606      	mov	r6, r0
 80085ee:	f340 8088 	ble.w	8008702 <_dtoa_r+0x8c2>
 80085f2:	461a      	mov	r2, r3
 80085f4:	4601      	mov	r1, r0
 80085f6:	4620      	mov	r0, r4
 80085f8:	f001 f9e6 	bl	80099c8 <__pow5mult>
 80085fc:	9b06      	ldr	r3, [sp, #24]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	4606      	mov	r6, r0
 8008602:	f340 8081 	ble.w	8008708 <_dtoa_r+0x8c8>
 8008606:	f04f 0800 	mov.w	r8, #0
 800860a:	6933      	ldr	r3, [r6, #16]
 800860c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008610:	6918      	ldr	r0, [r3, #16]
 8008612:	f001 f8c9 	bl	80097a8 <__hi0bits>
 8008616:	f1c0 0020 	rsb	r0, r0, #32
 800861a:	9b05      	ldr	r3, [sp, #20]
 800861c:	4418      	add	r0, r3
 800861e:	f010 001f 	ands.w	r0, r0, #31
 8008622:	f000 8092 	beq.w	800874a <_dtoa_r+0x90a>
 8008626:	f1c0 0320 	rsb	r3, r0, #32
 800862a:	2b04      	cmp	r3, #4
 800862c:	f340 808a 	ble.w	8008744 <_dtoa_r+0x904>
 8008630:	f1c0 001c 	rsb	r0, r0, #28
 8008634:	9b04      	ldr	r3, [sp, #16]
 8008636:	4403      	add	r3, r0
 8008638:	9304      	str	r3, [sp, #16]
 800863a:	9b05      	ldr	r3, [sp, #20]
 800863c:	4403      	add	r3, r0
 800863e:	4405      	add	r5, r0
 8008640:	9305      	str	r3, [sp, #20]
 8008642:	9b04      	ldr	r3, [sp, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	dd07      	ble.n	8008658 <_dtoa_r+0x818>
 8008648:	ee18 1a10 	vmov	r1, s16
 800864c:	461a      	mov	r2, r3
 800864e:	4620      	mov	r0, r4
 8008650:	f001 fa14 	bl	8009a7c <__lshift>
 8008654:	ee08 0a10 	vmov	s16, r0
 8008658:	9b05      	ldr	r3, [sp, #20]
 800865a:	2b00      	cmp	r3, #0
 800865c:	dd05      	ble.n	800866a <_dtoa_r+0x82a>
 800865e:	4631      	mov	r1, r6
 8008660:	461a      	mov	r2, r3
 8008662:	4620      	mov	r0, r4
 8008664:	f001 fa0a 	bl	8009a7c <__lshift>
 8008668:	4606      	mov	r6, r0
 800866a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800866c:	2b00      	cmp	r3, #0
 800866e:	d06e      	beq.n	800874e <_dtoa_r+0x90e>
 8008670:	ee18 0a10 	vmov	r0, s16
 8008674:	4631      	mov	r1, r6
 8008676:	f001 fa71 	bl	8009b5c <__mcmp>
 800867a:	2800      	cmp	r0, #0
 800867c:	da67      	bge.n	800874e <_dtoa_r+0x90e>
 800867e:	9b00      	ldr	r3, [sp, #0]
 8008680:	3b01      	subs	r3, #1
 8008682:	ee18 1a10 	vmov	r1, s16
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	220a      	movs	r2, #10
 800868a:	2300      	movs	r3, #0
 800868c:	4620      	mov	r0, r4
 800868e:	f000 fffb 	bl	8009688 <__multadd>
 8008692:	9b08      	ldr	r3, [sp, #32]
 8008694:	ee08 0a10 	vmov	s16, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 81b1 	beq.w	8008a00 <_dtoa_r+0xbc0>
 800869e:	2300      	movs	r3, #0
 80086a0:	4639      	mov	r1, r7
 80086a2:	220a      	movs	r2, #10
 80086a4:	4620      	mov	r0, r4
 80086a6:	f000 ffef 	bl	8009688 <__multadd>
 80086aa:	9b02      	ldr	r3, [sp, #8]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	4607      	mov	r7, r0
 80086b0:	f300 808e 	bgt.w	80087d0 <_dtoa_r+0x990>
 80086b4:	9b06      	ldr	r3, [sp, #24]
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	dc51      	bgt.n	800875e <_dtoa_r+0x91e>
 80086ba:	e089      	b.n	80087d0 <_dtoa_r+0x990>
 80086bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086c2:	e74b      	b.n	800855c <_dtoa_r+0x71c>
 80086c4:	9b03      	ldr	r3, [sp, #12]
 80086c6:	1e5e      	subs	r6, r3, #1
 80086c8:	9b07      	ldr	r3, [sp, #28]
 80086ca:	42b3      	cmp	r3, r6
 80086cc:	bfbf      	itttt	lt
 80086ce:	9b07      	ldrlt	r3, [sp, #28]
 80086d0:	9607      	strlt	r6, [sp, #28]
 80086d2:	1af2      	sublt	r2, r6, r3
 80086d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80086d6:	bfb6      	itet	lt
 80086d8:	189b      	addlt	r3, r3, r2
 80086da:	1b9e      	subge	r6, r3, r6
 80086dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80086de:	9b03      	ldr	r3, [sp, #12]
 80086e0:	bfb8      	it	lt
 80086e2:	2600      	movlt	r6, #0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	bfb7      	itett	lt
 80086e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80086ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80086f0:	1a9d      	sublt	r5, r3, r2
 80086f2:	2300      	movlt	r3, #0
 80086f4:	e734      	b.n	8008560 <_dtoa_r+0x720>
 80086f6:	9e07      	ldr	r6, [sp, #28]
 80086f8:	9d04      	ldr	r5, [sp, #16]
 80086fa:	9f08      	ldr	r7, [sp, #32]
 80086fc:	e73b      	b.n	8008576 <_dtoa_r+0x736>
 80086fe:	9a07      	ldr	r2, [sp, #28]
 8008700:	e767      	b.n	80085d2 <_dtoa_r+0x792>
 8008702:	9b06      	ldr	r3, [sp, #24]
 8008704:	2b01      	cmp	r3, #1
 8008706:	dc18      	bgt.n	800873a <_dtoa_r+0x8fa>
 8008708:	f1ba 0f00 	cmp.w	sl, #0
 800870c:	d115      	bne.n	800873a <_dtoa_r+0x8fa>
 800870e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008712:	b993      	cbnz	r3, 800873a <_dtoa_r+0x8fa>
 8008714:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008718:	0d1b      	lsrs	r3, r3, #20
 800871a:	051b      	lsls	r3, r3, #20
 800871c:	b183      	cbz	r3, 8008740 <_dtoa_r+0x900>
 800871e:	9b04      	ldr	r3, [sp, #16]
 8008720:	3301      	adds	r3, #1
 8008722:	9304      	str	r3, [sp, #16]
 8008724:	9b05      	ldr	r3, [sp, #20]
 8008726:	3301      	adds	r3, #1
 8008728:	9305      	str	r3, [sp, #20]
 800872a:	f04f 0801 	mov.w	r8, #1
 800872e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008730:	2b00      	cmp	r3, #0
 8008732:	f47f af6a 	bne.w	800860a <_dtoa_r+0x7ca>
 8008736:	2001      	movs	r0, #1
 8008738:	e76f      	b.n	800861a <_dtoa_r+0x7da>
 800873a:	f04f 0800 	mov.w	r8, #0
 800873e:	e7f6      	b.n	800872e <_dtoa_r+0x8ee>
 8008740:	4698      	mov	r8, r3
 8008742:	e7f4      	b.n	800872e <_dtoa_r+0x8ee>
 8008744:	f43f af7d 	beq.w	8008642 <_dtoa_r+0x802>
 8008748:	4618      	mov	r0, r3
 800874a:	301c      	adds	r0, #28
 800874c:	e772      	b.n	8008634 <_dtoa_r+0x7f4>
 800874e:	9b03      	ldr	r3, [sp, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	dc37      	bgt.n	80087c4 <_dtoa_r+0x984>
 8008754:	9b06      	ldr	r3, [sp, #24]
 8008756:	2b02      	cmp	r3, #2
 8008758:	dd34      	ble.n	80087c4 <_dtoa_r+0x984>
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	9302      	str	r3, [sp, #8]
 800875e:	9b02      	ldr	r3, [sp, #8]
 8008760:	b96b      	cbnz	r3, 800877e <_dtoa_r+0x93e>
 8008762:	4631      	mov	r1, r6
 8008764:	2205      	movs	r2, #5
 8008766:	4620      	mov	r0, r4
 8008768:	f000 ff8e 	bl	8009688 <__multadd>
 800876c:	4601      	mov	r1, r0
 800876e:	4606      	mov	r6, r0
 8008770:	ee18 0a10 	vmov	r0, s16
 8008774:	f001 f9f2 	bl	8009b5c <__mcmp>
 8008778:	2800      	cmp	r0, #0
 800877a:	f73f adbb 	bgt.w	80082f4 <_dtoa_r+0x4b4>
 800877e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008780:	9d01      	ldr	r5, [sp, #4]
 8008782:	43db      	mvns	r3, r3
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	f04f 0800 	mov.w	r8, #0
 800878a:	4631      	mov	r1, r6
 800878c:	4620      	mov	r0, r4
 800878e:	f000 ff59 	bl	8009644 <_Bfree>
 8008792:	2f00      	cmp	r7, #0
 8008794:	f43f aea4 	beq.w	80084e0 <_dtoa_r+0x6a0>
 8008798:	f1b8 0f00 	cmp.w	r8, #0
 800879c:	d005      	beq.n	80087aa <_dtoa_r+0x96a>
 800879e:	45b8      	cmp	r8, r7
 80087a0:	d003      	beq.n	80087aa <_dtoa_r+0x96a>
 80087a2:	4641      	mov	r1, r8
 80087a4:	4620      	mov	r0, r4
 80087a6:	f000 ff4d 	bl	8009644 <_Bfree>
 80087aa:	4639      	mov	r1, r7
 80087ac:	4620      	mov	r0, r4
 80087ae:	f000 ff49 	bl	8009644 <_Bfree>
 80087b2:	e695      	b.n	80084e0 <_dtoa_r+0x6a0>
 80087b4:	2600      	movs	r6, #0
 80087b6:	4637      	mov	r7, r6
 80087b8:	e7e1      	b.n	800877e <_dtoa_r+0x93e>
 80087ba:	9700      	str	r7, [sp, #0]
 80087bc:	4637      	mov	r7, r6
 80087be:	e599      	b.n	80082f4 <_dtoa_r+0x4b4>
 80087c0:	40240000 	.word	0x40240000
 80087c4:	9b08      	ldr	r3, [sp, #32]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 80ca 	beq.w	8008960 <_dtoa_r+0xb20>
 80087cc:	9b03      	ldr	r3, [sp, #12]
 80087ce:	9302      	str	r3, [sp, #8]
 80087d0:	2d00      	cmp	r5, #0
 80087d2:	dd05      	ble.n	80087e0 <_dtoa_r+0x9a0>
 80087d4:	4639      	mov	r1, r7
 80087d6:	462a      	mov	r2, r5
 80087d8:	4620      	mov	r0, r4
 80087da:	f001 f94f 	bl	8009a7c <__lshift>
 80087de:	4607      	mov	r7, r0
 80087e0:	f1b8 0f00 	cmp.w	r8, #0
 80087e4:	d05b      	beq.n	800889e <_dtoa_r+0xa5e>
 80087e6:	6879      	ldr	r1, [r7, #4]
 80087e8:	4620      	mov	r0, r4
 80087ea:	f000 feeb 	bl	80095c4 <_Balloc>
 80087ee:	4605      	mov	r5, r0
 80087f0:	b928      	cbnz	r0, 80087fe <_dtoa_r+0x9be>
 80087f2:	4b87      	ldr	r3, [pc, #540]	; (8008a10 <_dtoa_r+0xbd0>)
 80087f4:	4602      	mov	r2, r0
 80087f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80087fa:	f7ff bb3b 	b.w	8007e74 <_dtoa_r+0x34>
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	3202      	adds	r2, #2
 8008802:	0092      	lsls	r2, r2, #2
 8008804:	f107 010c 	add.w	r1, r7, #12
 8008808:	300c      	adds	r0, #12
 800880a:	f000 feb3 	bl	8009574 <memcpy>
 800880e:	2201      	movs	r2, #1
 8008810:	4629      	mov	r1, r5
 8008812:	4620      	mov	r0, r4
 8008814:	f001 f932 	bl	8009a7c <__lshift>
 8008818:	9b01      	ldr	r3, [sp, #4]
 800881a:	f103 0901 	add.w	r9, r3, #1
 800881e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008822:	4413      	add	r3, r2
 8008824:	9305      	str	r3, [sp, #20]
 8008826:	f00a 0301 	and.w	r3, sl, #1
 800882a:	46b8      	mov	r8, r7
 800882c:	9304      	str	r3, [sp, #16]
 800882e:	4607      	mov	r7, r0
 8008830:	4631      	mov	r1, r6
 8008832:	ee18 0a10 	vmov	r0, s16
 8008836:	f7ff fa76 	bl	8007d26 <quorem>
 800883a:	4641      	mov	r1, r8
 800883c:	9002      	str	r0, [sp, #8]
 800883e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008842:	ee18 0a10 	vmov	r0, s16
 8008846:	f001 f989 	bl	8009b5c <__mcmp>
 800884a:	463a      	mov	r2, r7
 800884c:	9003      	str	r0, [sp, #12]
 800884e:	4631      	mov	r1, r6
 8008850:	4620      	mov	r0, r4
 8008852:	f001 f99f 	bl	8009b94 <__mdiff>
 8008856:	68c2      	ldr	r2, [r0, #12]
 8008858:	f109 3bff 	add.w	fp, r9, #4294967295
 800885c:	4605      	mov	r5, r0
 800885e:	bb02      	cbnz	r2, 80088a2 <_dtoa_r+0xa62>
 8008860:	4601      	mov	r1, r0
 8008862:	ee18 0a10 	vmov	r0, s16
 8008866:	f001 f979 	bl	8009b5c <__mcmp>
 800886a:	4602      	mov	r2, r0
 800886c:	4629      	mov	r1, r5
 800886e:	4620      	mov	r0, r4
 8008870:	9207      	str	r2, [sp, #28]
 8008872:	f000 fee7 	bl	8009644 <_Bfree>
 8008876:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800887a:	ea43 0102 	orr.w	r1, r3, r2
 800887e:	9b04      	ldr	r3, [sp, #16]
 8008880:	430b      	orrs	r3, r1
 8008882:	464d      	mov	r5, r9
 8008884:	d10f      	bne.n	80088a6 <_dtoa_r+0xa66>
 8008886:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800888a:	d02a      	beq.n	80088e2 <_dtoa_r+0xaa2>
 800888c:	9b03      	ldr	r3, [sp, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	dd02      	ble.n	8008898 <_dtoa_r+0xa58>
 8008892:	9b02      	ldr	r3, [sp, #8]
 8008894:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008898:	f88b a000 	strb.w	sl, [fp]
 800889c:	e775      	b.n	800878a <_dtoa_r+0x94a>
 800889e:	4638      	mov	r0, r7
 80088a0:	e7ba      	b.n	8008818 <_dtoa_r+0x9d8>
 80088a2:	2201      	movs	r2, #1
 80088a4:	e7e2      	b.n	800886c <_dtoa_r+0xa2c>
 80088a6:	9b03      	ldr	r3, [sp, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	db04      	blt.n	80088b6 <_dtoa_r+0xa76>
 80088ac:	9906      	ldr	r1, [sp, #24]
 80088ae:	430b      	orrs	r3, r1
 80088b0:	9904      	ldr	r1, [sp, #16]
 80088b2:	430b      	orrs	r3, r1
 80088b4:	d122      	bne.n	80088fc <_dtoa_r+0xabc>
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	ddee      	ble.n	8008898 <_dtoa_r+0xa58>
 80088ba:	ee18 1a10 	vmov	r1, s16
 80088be:	2201      	movs	r2, #1
 80088c0:	4620      	mov	r0, r4
 80088c2:	f001 f8db 	bl	8009a7c <__lshift>
 80088c6:	4631      	mov	r1, r6
 80088c8:	ee08 0a10 	vmov	s16, r0
 80088cc:	f001 f946 	bl	8009b5c <__mcmp>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	dc03      	bgt.n	80088dc <_dtoa_r+0xa9c>
 80088d4:	d1e0      	bne.n	8008898 <_dtoa_r+0xa58>
 80088d6:	f01a 0f01 	tst.w	sl, #1
 80088da:	d0dd      	beq.n	8008898 <_dtoa_r+0xa58>
 80088dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088e0:	d1d7      	bne.n	8008892 <_dtoa_r+0xa52>
 80088e2:	2339      	movs	r3, #57	; 0x39
 80088e4:	f88b 3000 	strb.w	r3, [fp]
 80088e8:	462b      	mov	r3, r5
 80088ea:	461d      	mov	r5, r3
 80088ec:	3b01      	subs	r3, #1
 80088ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80088f2:	2a39      	cmp	r2, #57	; 0x39
 80088f4:	d071      	beq.n	80089da <_dtoa_r+0xb9a>
 80088f6:	3201      	adds	r2, #1
 80088f8:	701a      	strb	r2, [r3, #0]
 80088fa:	e746      	b.n	800878a <_dtoa_r+0x94a>
 80088fc:	2a00      	cmp	r2, #0
 80088fe:	dd07      	ble.n	8008910 <_dtoa_r+0xad0>
 8008900:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008904:	d0ed      	beq.n	80088e2 <_dtoa_r+0xaa2>
 8008906:	f10a 0301 	add.w	r3, sl, #1
 800890a:	f88b 3000 	strb.w	r3, [fp]
 800890e:	e73c      	b.n	800878a <_dtoa_r+0x94a>
 8008910:	9b05      	ldr	r3, [sp, #20]
 8008912:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008916:	4599      	cmp	r9, r3
 8008918:	d047      	beq.n	80089aa <_dtoa_r+0xb6a>
 800891a:	ee18 1a10 	vmov	r1, s16
 800891e:	2300      	movs	r3, #0
 8008920:	220a      	movs	r2, #10
 8008922:	4620      	mov	r0, r4
 8008924:	f000 feb0 	bl	8009688 <__multadd>
 8008928:	45b8      	cmp	r8, r7
 800892a:	ee08 0a10 	vmov	s16, r0
 800892e:	f04f 0300 	mov.w	r3, #0
 8008932:	f04f 020a 	mov.w	r2, #10
 8008936:	4641      	mov	r1, r8
 8008938:	4620      	mov	r0, r4
 800893a:	d106      	bne.n	800894a <_dtoa_r+0xb0a>
 800893c:	f000 fea4 	bl	8009688 <__multadd>
 8008940:	4680      	mov	r8, r0
 8008942:	4607      	mov	r7, r0
 8008944:	f109 0901 	add.w	r9, r9, #1
 8008948:	e772      	b.n	8008830 <_dtoa_r+0x9f0>
 800894a:	f000 fe9d 	bl	8009688 <__multadd>
 800894e:	4639      	mov	r1, r7
 8008950:	4680      	mov	r8, r0
 8008952:	2300      	movs	r3, #0
 8008954:	220a      	movs	r2, #10
 8008956:	4620      	mov	r0, r4
 8008958:	f000 fe96 	bl	8009688 <__multadd>
 800895c:	4607      	mov	r7, r0
 800895e:	e7f1      	b.n	8008944 <_dtoa_r+0xb04>
 8008960:	9b03      	ldr	r3, [sp, #12]
 8008962:	9302      	str	r3, [sp, #8]
 8008964:	9d01      	ldr	r5, [sp, #4]
 8008966:	ee18 0a10 	vmov	r0, s16
 800896a:	4631      	mov	r1, r6
 800896c:	f7ff f9db 	bl	8007d26 <quorem>
 8008970:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008974:	9b01      	ldr	r3, [sp, #4]
 8008976:	f805 ab01 	strb.w	sl, [r5], #1
 800897a:	1aea      	subs	r2, r5, r3
 800897c:	9b02      	ldr	r3, [sp, #8]
 800897e:	4293      	cmp	r3, r2
 8008980:	dd09      	ble.n	8008996 <_dtoa_r+0xb56>
 8008982:	ee18 1a10 	vmov	r1, s16
 8008986:	2300      	movs	r3, #0
 8008988:	220a      	movs	r2, #10
 800898a:	4620      	mov	r0, r4
 800898c:	f000 fe7c 	bl	8009688 <__multadd>
 8008990:	ee08 0a10 	vmov	s16, r0
 8008994:	e7e7      	b.n	8008966 <_dtoa_r+0xb26>
 8008996:	9b02      	ldr	r3, [sp, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	bfc8      	it	gt
 800899c:	461d      	movgt	r5, r3
 800899e:	9b01      	ldr	r3, [sp, #4]
 80089a0:	bfd8      	it	le
 80089a2:	2501      	movle	r5, #1
 80089a4:	441d      	add	r5, r3
 80089a6:	f04f 0800 	mov.w	r8, #0
 80089aa:	ee18 1a10 	vmov	r1, s16
 80089ae:	2201      	movs	r2, #1
 80089b0:	4620      	mov	r0, r4
 80089b2:	f001 f863 	bl	8009a7c <__lshift>
 80089b6:	4631      	mov	r1, r6
 80089b8:	ee08 0a10 	vmov	s16, r0
 80089bc:	f001 f8ce 	bl	8009b5c <__mcmp>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	dc91      	bgt.n	80088e8 <_dtoa_r+0xaa8>
 80089c4:	d102      	bne.n	80089cc <_dtoa_r+0xb8c>
 80089c6:	f01a 0f01 	tst.w	sl, #1
 80089ca:	d18d      	bne.n	80088e8 <_dtoa_r+0xaa8>
 80089cc:	462b      	mov	r3, r5
 80089ce:	461d      	mov	r5, r3
 80089d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089d4:	2a30      	cmp	r2, #48	; 0x30
 80089d6:	d0fa      	beq.n	80089ce <_dtoa_r+0xb8e>
 80089d8:	e6d7      	b.n	800878a <_dtoa_r+0x94a>
 80089da:	9a01      	ldr	r2, [sp, #4]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d184      	bne.n	80088ea <_dtoa_r+0xaaa>
 80089e0:	9b00      	ldr	r3, [sp, #0]
 80089e2:	3301      	adds	r3, #1
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	2331      	movs	r3, #49	; 0x31
 80089e8:	7013      	strb	r3, [r2, #0]
 80089ea:	e6ce      	b.n	800878a <_dtoa_r+0x94a>
 80089ec:	4b09      	ldr	r3, [pc, #36]	; (8008a14 <_dtoa_r+0xbd4>)
 80089ee:	f7ff ba95 	b.w	8007f1c <_dtoa_r+0xdc>
 80089f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f47f aa6e 	bne.w	8007ed6 <_dtoa_r+0x96>
 80089fa:	4b07      	ldr	r3, [pc, #28]	; (8008a18 <_dtoa_r+0xbd8>)
 80089fc:	f7ff ba8e 	b.w	8007f1c <_dtoa_r+0xdc>
 8008a00:	9b02      	ldr	r3, [sp, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	dcae      	bgt.n	8008964 <_dtoa_r+0xb24>
 8008a06:	9b06      	ldr	r3, [sp, #24]
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	f73f aea8 	bgt.w	800875e <_dtoa_r+0x91e>
 8008a0e:	e7a9      	b.n	8008964 <_dtoa_r+0xb24>
 8008a10:	0800a960 	.word	0x0800a960
 8008a14:	0800a765 	.word	0x0800a765
 8008a18:	0800a8e1 	.word	0x0800a8e1

08008a1c <__sflush_r>:
 8008a1c:	898a      	ldrh	r2, [r1, #12]
 8008a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a22:	4605      	mov	r5, r0
 8008a24:	0710      	lsls	r0, r2, #28
 8008a26:	460c      	mov	r4, r1
 8008a28:	d458      	bmi.n	8008adc <__sflush_r+0xc0>
 8008a2a:	684b      	ldr	r3, [r1, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	dc05      	bgt.n	8008a3c <__sflush_r+0x20>
 8008a30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	dc02      	bgt.n	8008a3c <__sflush_r+0x20>
 8008a36:	2000      	movs	r0, #0
 8008a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a3e:	2e00      	cmp	r6, #0
 8008a40:	d0f9      	beq.n	8008a36 <__sflush_r+0x1a>
 8008a42:	2300      	movs	r3, #0
 8008a44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a48:	682f      	ldr	r7, [r5, #0]
 8008a4a:	602b      	str	r3, [r5, #0]
 8008a4c:	d032      	beq.n	8008ab4 <__sflush_r+0x98>
 8008a4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a50:	89a3      	ldrh	r3, [r4, #12]
 8008a52:	075a      	lsls	r2, r3, #29
 8008a54:	d505      	bpl.n	8008a62 <__sflush_r+0x46>
 8008a56:	6863      	ldr	r3, [r4, #4]
 8008a58:	1ac0      	subs	r0, r0, r3
 8008a5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a5c:	b10b      	cbz	r3, 8008a62 <__sflush_r+0x46>
 8008a5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a60:	1ac0      	subs	r0, r0, r3
 8008a62:	2300      	movs	r3, #0
 8008a64:	4602      	mov	r2, r0
 8008a66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a68:	6a21      	ldr	r1, [r4, #32]
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	47b0      	blx	r6
 8008a6e:	1c43      	adds	r3, r0, #1
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	d106      	bne.n	8008a82 <__sflush_r+0x66>
 8008a74:	6829      	ldr	r1, [r5, #0]
 8008a76:	291d      	cmp	r1, #29
 8008a78:	d82c      	bhi.n	8008ad4 <__sflush_r+0xb8>
 8008a7a:	4a2a      	ldr	r2, [pc, #168]	; (8008b24 <__sflush_r+0x108>)
 8008a7c:	40ca      	lsrs	r2, r1
 8008a7e:	07d6      	lsls	r6, r2, #31
 8008a80:	d528      	bpl.n	8008ad4 <__sflush_r+0xb8>
 8008a82:	2200      	movs	r2, #0
 8008a84:	6062      	str	r2, [r4, #4]
 8008a86:	04d9      	lsls	r1, r3, #19
 8008a88:	6922      	ldr	r2, [r4, #16]
 8008a8a:	6022      	str	r2, [r4, #0]
 8008a8c:	d504      	bpl.n	8008a98 <__sflush_r+0x7c>
 8008a8e:	1c42      	adds	r2, r0, #1
 8008a90:	d101      	bne.n	8008a96 <__sflush_r+0x7a>
 8008a92:	682b      	ldr	r3, [r5, #0]
 8008a94:	b903      	cbnz	r3, 8008a98 <__sflush_r+0x7c>
 8008a96:	6560      	str	r0, [r4, #84]	; 0x54
 8008a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a9a:	602f      	str	r7, [r5, #0]
 8008a9c:	2900      	cmp	r1, #0
 8008a9e:	d0ca      	beq.n	8008a36 <__sflush_r+0x1a>
 8008aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aa4:	4299      	cmp	r1, r3
 8008aa6:	d002      	beq.n	8008aae <__sflush_r+0x92>
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	f001 fa63 	bl	8009f74 <_free_r>
 8008aae:	2000      	movs	r0, #0
 8008ab0:	6360      	str	r0, [r4, #52]	; 0x34
 8008ab2:	e7c1      	b.n	8008a38 <__sflush_r+0x1c>
 8008ab4:	6a21      	ldr	r1, [r4, #32]
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	4628      	mov	r0, r5
 8008aba:	47b0      	blx	r6
 8008abc:	1c41      	adds	r1, r0, #1
 8008abe:	d1c7      	bne.n	8008a50 <__sflush_r+0x34>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0c4      	beq.n	8008a50 <__sflush_r+0x34>
 8008ac6:	2b1d      	cmp	r3, #29
 8008ac8:	d001      	beq.n	8008ace <__sflush_r+0xb2>
 8008aca:	2b16      	cmp	r3, #22
 8008acc:	d101      	bne.n	8008ad2 <__sflush_r+0xb6>
 8008ace:	602f      	str	r7, [r5, #0]
 8008ad0:	e7b1      	b.n	8008a36 <__sflush_r+0x1a>
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ad8:	81a3      	strh	r3, [r4, #12]
 8008ada:	e7ad      	b.n	8008a38 <__sflush_r+0x1c>
 8008adc:	690f      	ldr	r7, [r1, #16]
 8008ade:	2f00      	cmp	r7, #0
 8008ae0:	d0a9      	beq.n	8008a36 <__sflush_r+0x1a>
 8008ae2:	0793      	lsls	r3, r2, #30
 8008ae4:	680e      	ldr	r6, [r1, #0]
 8008ae6:	bf08      	it	eq
 8008ae8:	694b      	ldreq	r3, [r1, #20]
 8008aea:	600f      	str	r7, [r1, #0]
 8008aec:	bf18      	it	ne
 8008aee:	2300      	movne	r3, #0
 8008af0:	eba6 0807 	sub.w	r8, r6, r7
 8008af4:	608b      	str	r3, [r1, #8]
 8008af6:	f1b8 0f00 	cmp.w	r8, #0
 8008afa:	dd9c      	ble.n	8008a36 <__sflush_r+0x1a>
 8008afc:	6a21      	ldr	r1, [r4, #32]
 8008afe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b00:	4643      	mov	r3, r8
 8008b02:	463a      	mov	r2, r7
 8008b04:	4628      	mov	r0, r5
 8008b06:	47b0      	blx	r6
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	dc06      	bgt.n	8008b1a <__sflush_r+0xfe>
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b12:	81a3      	strh	r3, [r4, #12]
 8008b14:	f04f 30ff 	mov.w	r0, #4294967295
 8008b18:	e78e      	b.n	8008a38 <__sflush_r+0x1c>
 8008b1a:	4407      	add	r7, r0
 8008b1c:	eba8 0800 	sub.w	r8, r8, r0
 8008b20:	e7e9      	b.n	8008af6 <__sflush_r+0xda>
 8008b22:	bf00      	nop
 8008b24:	20400001 	.word	0x20400001

08008b28 <_fflush_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	690b      	ldr	r3, [r1, #16]
 8008b2c:	4605      	mov	r5, r0
 8008b2e:	460c      	mov	r4, r1
 8008b30:	b913      	cbnz	r3, 8008b38 <_fflush_r+0x10>
 8008b32:	2500      	movs	r5, #0
 8008b34:	4628      	mov	r0, r5
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
 8008b38:	b118      	cbz	r0, 8008b42 <_fflush_r+0x1a>
 8008b3a:	6983      	ldr	r3, [r0, #24]
 8008b3c:	b90b      	cbnz	r3, 8008b42 <_fflush_r+0x1a>
 8008b3e:	f000 f887 	bl	8008c50 <__sinit>
 8008b42:	4b14      	ldr	r3, [pc, #80]	; (8008b94 <_fflush_r+0x6c>)
 8008b44:	429c      	cmp	r4, r3
 8008b46:	d11b      	bne.n	8008b80 <_fflush_r+0x58>
 8008b48:	686c      	ldr	r4, [r5, #4]
 8008b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d0ef      	beq.n	8008b32 <_fflush_r+0xa>
 8008b52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b54:	07d0      	lsls	r0, r2, #31
 8008b56:	d404      	bmi.n	8008b62 <_fflush_r+0x3a>
 8008b58:	0599      	lsls	r1, r3, #22
 8008b5a:	d402      	bmi.n	8008b62 <_fflush_r+0x3a>
 8008b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b5e:	f000 fc88 	bl	8009472 <__retarget_lock_acquire_recursive>
 8008b62:	4628      	mov	r0, r5
 8008b64:	4621      	mov	r1, r4
 8008b66:	f7ff ff59 	bl	8008a1c <__sflush_r>
 8008b6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b6c:	07da      	lsls	r2, r3, #31
 8008b6e:	4605      	mov	r5, r0
 8008b70:	d4e0      	bmi.n	8008b34 <_fflush_r+0xc>
 8008b72:	89a3      	ldrh	r3, [r4, #12]
 8008b74:	059b      	lsls	r3, r3, #22
 8008b76:	d4dd      	bmi.n	8008b34 <_fflush_r+0xc>
 8008b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b7a:	f000 fc7b 	bl	8009474 <__retarget_lock_release_recursive>
 8008b7e:	e7d9      	b.n	8008b34 <_fflush_r+0xc>
 8008b80:	4b05      	ldr	r3, [pc, #20]	; (8008b98 <_fflush_r+0x70>)
 8008b82:	429c      	cmp	r4, r3
 8008b84:	d101      	bne.n	8008b8a <_fflush_r+0x62>
 8008b86:	68ac      	ldr	r4, [r5, #8]
 8008b88:	e7df      	b.n	8008b4a <_fflush_r+0x22>
 8008b8a:	4b04      	ldr	r3, [pc, #16]	; (8008b9c <_fflush_r+0x74>)
 8008b8c:	429c      	cmp	r4, r3
 8008b8e:	bf08      	it	eq
 8008b90:	68ec      	ldreq	r4, [r5, #12]
 8008b92:	e7da      	b.n	8008b4a <_fflush_r+0x22>
 8008b94:	0800a994 	.word	0x0800a994
 8008b98:	0800a9b4 	.word	0x0800a9b4
 8008b9c:	0800a974 	.word	0x0800a974

08008ba0 <std>:
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	b510      	push	{r4, lr}
 8008ba4:	4604      	mov	r4, r0
 8008ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8008baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bae:	6083      	str	r3, [r0, #8]
 8008bb0:	8181      	strh	r1, [r0, #12]
 8008bb2:	6643      	str	r3, [r0, #100]	; 0x64
 8008bb4:	81c2      	strh	r2, [r0, #14]
 8008bb6:	6183      	str	r3, [r0, #24]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	2208      	movs	r2, #8
 8008bbc:	305c      	adds	r0, #92	; 0x5c
 8008bbe:	f7fd f93d 	bl	8005e3c <memset>
 8008bc2:	4b05      	ldr	r3, [pc, #20]	; (8008bd8 <std+0x38>)
 8008bc4:	6263      	str	r3, [r4, #36]	; 0x24
 8008bc6:	4b05      	ldr	r3, [pc, #20]	; (8008bdc <std+0x3c>)
 8008bc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bca:	4b05      	ldr	r3, [pc, #20]	; (8008be0 <std+0x40>)
 8008bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bce:	4b05      	ldr	r3, [pc, #20]	; (8008be4 <std+0x44>)
 8008bd0:	6224      	str	r4, [r4, #32]
 8008bd2:	6323      	str	r3, [r4, #48]	; 0x30
 8008bd4:	bd10      	pop	{r4, pc}
 8008bd6:	bf00      	nop
 8008bd8:	0800a501 	.word	0x0800a501
 8008bdc:	0800a523 	.word	0x0800a523
 8008be0:	0800a55b 	.word	0x0800a55b
 8008be4:	0800a57f 	.word	0x0800a57f

08008be8 <_cleanup_r>:
 8008be8:	4901      	ldr	r1, [pc, #4]	; (8008bf0 <_cleanup_r+0x8>)
 8008bea:	f000 b8af 	b.w	8008d4c <_fwalk_reent>
 8008bee:	bf00      	nop
 8008bf0:	08008b29 	.word	0x08008b29

08008bf4 <__sfmoreglue>:
 8008bf4:	b570      	push	{r4, r5, r6, lr}
 8008bf6:	2268      	movs	r2, #104	; 0x68
 8008bf8:	1e4d      	subs	r5, r1, #1
 8008bfa:	4355      	muls	r5, r2
 8008bfc:	460e      	mov	r6, r1
 8008bfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c02:	f001 fa23 	bl	800a04c <_malloc_r>
 8008c06:	4604      	mov	r4, r0
 8008c08:	b140      	cbz	r0, 8008c1c <__sfmoreglue+0x28>
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	e9c0 1600 	strd	r1, r6, [r0]
 8008c10:	300c      	adds	r0, #12
 8008c12:	60a0      	str	r0, [r4, #8]
 8008c14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c18:	f7fd f910 	bl	8005e3c <memset>
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}

08008c20 <__sfp_lock_acquire>:
 8008c20:	4801      	ldr	r0, [pc, #4]	; (8008c28 <__sfp_lock_acquire+0x8>)
 8008c22:	f000 bc26 	b.w	8009472 <__retarget_lock_acquire_recursive>
 8008c26:	bf00      	nop
 8008c28:	2000232d 	.word	0x2000232d

08008c2c <__sfp_lock_release>:
 8008c2c:	4801      	ldr	r0, [pc, #4]	; (8008c34 <__sfp_lock_release+0x8>)
 8008c2e:	f000 bc21 	b.w	8009474 <__retarget_lock_release_recursive>
 8008c32:	bf00      	nop
 8008c34:	2000232d 	.word	0x2000232d

08008c38 <__sinit_lock_acquire>:
 8008c38:	4801      	ldr	r0, [pc, #4]	; (8008c40 <__sinit_lock_acquire+0x8>)
 8008c3a:	f000 bc1a 	b.w	8009472 <__retarget_lock_acquire_recursive>
 8008c3e:	bf00      	nop
 8008c40:	2000232e 	.word	0x2000232e

08008c44 <__sinit_lock_release>:
 8008c44:	4801      	ldr	r0, [pc, #4]	; (8008c4c <__sinit_lock_release+0x8>)
 8008c46:	f000 bc15 	b.w	8009474 <__retarget_lock_release_recursive>
 8008c4a:	bf00      	nop
 8008c4c:	2000232e 	.word	0x2000232e

08008c50 <__sinit>:
 8008c50:	b510      	push	{r4, lr}
 8008c52:	4604      	mov	r4, r0
 8008c54:	f7ff fff0 	bl	8008c38 <__sinit_lock_acquire>
 8008c58:	69a3      	ldr	r3, [r4, #24]
 8008c5a:	b11b      	cbz	r3, 8008c64 <__sinit+0x14>
 8008c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c60:	f7ff bff0 	b.w	8008c44 <__sinit_lock_release>
 8008c64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c68:	6523      	str	r3, [r4, #80]	; 0x50
 8008c6a:	4b13      	ldr	r3, [pc, #76]	; (8008cb8 <__sinit+0x68>)
 8008c6c:	4a13      	ldr	r2, [pc, #76]	; (8008cbc <__sinit+0x6c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c72:	42a3      	cmp	r3, r4
 8008c74:	bf04      	itt	eq
 8008c76:	2301      	moveq	r3, #1
 8008c78:	61a3      	streq	r3, [r4, #24]
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f000 f820 	bl	8008cc0 <__sfp>
 8008c80:	6060      	str	r0, [r4, #4]
 8008c82:	4620      	mov	r0, r4
 8008c84:	f000 f81c 	bl	8008cc0 <__sfp>
 8008c88:	60a0      	str	r0, [r4, #8]
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f000 f818 	bl	8008cc0 <__sfp>
 8008c90:	2200      	movs	r2, #0
 8008c92:	60e0      	str	r0, [r4, #12]
 8008c94:	2104      	movs	r1, #4
 8008c96:	6860      	ldr	r0, [r4, #4]
 8008c98:	f7ff ff82 	bl	8008ba0 <std>
 8008c9c:	68a0      	ldr	r0, [r4, #8]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	2109      	movs	r1, #9
 8008ca2:	f7ff ff7d 	bl	8008ba0 <std>
 8008ca6:	68e0      	ldr	r0, [r4, #12]
 8008ca8:	2202      	movs	r2, #2
 8008caa:	2112      	movs	r1, #18
 8008cac:	f7ff ff78 	bl	8008ba0 <std>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	61a3      	str	r3, [r4, #24]
 8008cb4:	e7d2      	b.n	8008c5c <__sinit+0xc>
 8008cb6:	bf00      	nop
 8008cb8:	0800a740 	.word	0x0800a740
 8008cbc:	08008be9 	.word	0x08008be9

08008cc0 <__sfp>:
 8008cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc2:	4607      	mov	r7, r0
 8008cc4:	f7ff ffac 	bl	8008c20 <__sfp_lock_acquire>
 8008cc8:	4b1e      	ldr	r3, [pc, #120]	; (8008d44 <__sfp+0x84>)
 8008cca:	681e      	ldr	r6, [r3, #0]
 8008ccc:	69b3      	ldr	r3, [r6, #24]
 8008cce:	b913      	cbnz	r3, 8008cd6 <__sfp+0x16>
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	f7ff ffbd 	bl	8008c50 <__sinit>
 8008cd6:	3648      	adds	r6, #72	; 0x48
 8008cd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	d503      	bpl.n	8008ce8 <__sfp+0x28>
 8008ce0:	6833      	ldr	r3, [r6, #0]
 8008ce2:	b30b      	cbz	r3, 8008d28 <__sfp+0x68>
 8008ce4:	6836      	ldr	r6, [r6, #0]
 8008ce6:	e7f7      	b.n	8008cd8 <__sfp+0x18>
 8008ce8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cec:	b9d5      	cbnz	r5, 8008d24 <__sfp+0x64>
 8008cee:	4b16      	ldr	r3, [pc, #88]	; (8008d48 <__sfp+0x88>)
 8008cf0:	60e3      	str	r3, [r4, #12]
 8008cf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cf6:	6665      	str	r5, [r4, #100]	; 0x64
 8008cf8:	f000 fbba 	bl	8009470 <__retarget_lock_init_recursive>
 8008cfc:	f7ff ff96 	bl	8008c2c <__sfp_lock_release>
 8008d00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d08:	6025      	str	r5, [r4, #0]
 8008d0a:	61a5      	str	r5, [r4, #24]
 8008d0c:	2208      	movs	r2, #8
 8008d0e:	4629      	mov	r1, r5
 8008d10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d14:	f7fd f892 	bl	8005e3c <memset>
 8008d18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d20:	4620      	mov	r0, r4
 8008d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d24:	3468      	adds	r4, #104	; 0x68
 8008d26:	e7d9      	b.n	8008cdc <__sfp+0x1c>
 8008d28:	2104      	movs	r1, #4
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	f7ff ff62 	bl	8008bf4 <__sfmoreglue>
 8008d30:	4604      	mov	r4, r0
 8008d32:	6030      	str	r0, [r6, #0]
 8008d34:	2800      	cmp	r0, #0
 8008d36:	d1d5      	bne.n	8008ce4 <__sfp+0x24>
 8008d38:	f7ff ff78 	bl	8008c2c <__sfp_lock_release>
 8008d3c:	230c      	movs	r3, #12
 8008d3e:	603b      	str	r3, [r7, #0]
 8008d40:	e7ee      	b.n	8008d20 <__sfp+0x60>
 8008d42:	bf00      	nop
 8008d44:	0800a740 	.word	0x0800a740
 8008d48:	ffff0001 	.word	0xffff0001

08008d4c <_fwalk_reent>:
 8008d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d50:	4606      	mov	r6, r0
 8008d52:	4688      	mov	r8, r1
 8008d54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d58:	2700      	movs	r7, #0
 8008d5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d5e:	f1b9 0901 	subs.w	r9, r9, #1
 8008d62:	d505      	bpl.n	8008d70 <_fwalk_reent+0x24>
 8008d64:	6824      	ldr	r4, [r4, #0]
 8008d66:	2c00      	cmp	r4, #0
 8008d68:	d1f7      	bne.n	8008d5a <_fwalk_reent+0xe>
 8008d6a:	4638      	mov	r0, r7
 8008d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d70:	89ab      	ldrh	r3, [r5, #12]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d907      	bls.n	8008d86 <_fwalk_reent+0x3a>
 8008d76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	d003      	beq.n	8008d86 <_fwalk_reent+0x3a>
 8008d7e:	4629      	mov	r1, r5
 8008d80:	4630      	mov	r0, r6
 8008d82:	47c0      	blx	r8
 8008d84:	4307      	orrs	r7, r0
 8008d86:	3568      	adds	r5, #104	; 0x68
 8008d88:	e7e9      	b.n	8008d5e <_fwalk_reent+0x12>

08008d8a <rshift>:
 8008d8a:	6903      	ldr	r3, [r0, #16]
 8008d8c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d94:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d98:	f100 0414 	add.w	r4, r0, #20
 8008d9c:	dd45      	ble.n	8008e2a <rshift+0xa0>
 8008d9e:	f011 011f 	ands.w	r1, r1, #31
 8008da2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008da6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008daa:	d10c      	bne.n	8008dc6 <rshift+0x3c>
 8008dac:	f100 0710 	add.w	r7, r0, #16
 8008db0:	4629      	mov	r1, r5
 8008db2:	42b1      	cmp	r1, r6
 8008db4:	d334      	bcc.n	8008e20 <rshift+0x96>
 8008db6:	1a9b      	subs	r3, r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	1eea      	subs	r2, r5, #3
 8008dbc:	4296      	cmp	r6, r2
 8008dbe:	bf38      	it	cc
 8008dc0:	2300      	movcc	r3, #0
 8008dc2:	4423      	add	r3, r4
 8008dc4:	e015      	b.n	8008df2 <rshift+0x68>
 8008dc6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008dca:	f1c1 0820 	rsb	r8, r1, #32
 8008dce:	40cf      	lsrs	r7, r1
 8008dd0:	f105 0e04 	add.w	lr, r5, #4
 8008dd4:	46a1      	mov	r9, r4
 8008dd6:	4576      	cmp	r6, lr
 8008dd8:	46f4      	mov	ip, lr
 8008dda:	d815      	bhi.n	8008e08 <rshift+0x7e>
 8008ddc:	1a9a      	subs	r2, r3, r2
 8008dde:	0092      	lsls	r2, r2, #2
 8008de0:	3a04      	subs	r2, #4
 8008de2:	3501      	adds	r5, #1
 8008de4:	42ae      	cmp	r6, r5
 8008de6:	bf38      	it	cc
 8008de8:	2200      	movcc	r2, #0
 8008dea:	18a3      	adds	r3, r4, r2
 8008dec:	50a7      	str	r7, [r4, r2]
 8008dee:	b107      	cbz	r7, 8008df2 <rshift+0x68>
 8008df0:	3304      	adds	r3, #4
 8008df2:	1b1a      	subs	r2, r3, r4
 8008df4:	42a3      	cmp	r3, r4
 8008df6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008dfa:	bf08      	it	eq
 8008dfc:	2300      	moveq	r3, #0
 8008dfe:	6102      	str	r2, [r0, #16]
 8008e00:	bf08      	it	eq
 8008e02:	6143      	streq	r3, [r0, #20]
 8008e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e08:	f8dc c000 	ldr.w	ip, [ip]
 8008e0c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e10:	ea4c 0707 	orr.w	r7, ip, r7
 8008e14:	f849 7b04 	str.w	r7, [r9], #4
 8008e18:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e1c:	40cf      	lsrs	r7, r1
 8008e1e:	e7da      	b.n	8008dd6 <rshift+0x4c>
 8008e20:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e24:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e28:	e7c3      	b.n	8008db2 <rshift+0x28>
 8008e2a:	4623      	mov	r3, r4
 8008e2c:	e7e1      	b.n	8008df2 <rshift+0x68>

08008e2e <__hexdig_fun>:
 8008e2e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008e32:	2b09      	cmp	r3, #9
 8008e34:	d802      	bhi.n	8008e3c <__hexdig_fun+0xe>
 8008e36:	3820      	subs	r0, #32
 8008e38:	b2c0      	uxtb	r0, r0
 8008e3a:	4770      	bx	lr
 8008e3c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008e40:	2b05      	cmp	r3, #5
 8008e42:	d801      	bhi.n	8008e48 <__hexdig_fun+0x1a>
 8008e44:	3847      	subs	r0, #71	; 0x47
 8008e46:	e7f7      	b.n	8008e38 <__hexdig_fun+0xa>
 8008e48:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008e4c:	2b05      	cmp	r3, #5
 8008e4e:	d801      	bhi.n	8008e54 <__hexdig_fun+0x26>
 8008e50:	3827      	subs	r0, #39	; 0x27
 8008e52:	e7f1      	b.n	8008e38 <__hexdig_fun+0xa>
 8008e54:	2000      	movs	r0, #0
 8008e56:	4770      	bx	lr

08008e58 <__gethex>:
 8008e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5c:	ed2d 8b02 	vpush	{d8}
 8008e60:	b089      	sub	sp, #36	; 0x24
 8008e62:	ee08 0a10 	vmov	s16, r0
 8008e66:	9304      	str	r3, [sp, #16]
 8008e68:	4bb4      	ldr	r3, [pc, #720]	; (800913c <__gethex+0x2e4>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	9301      	str	r3, [sp, #4]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	468b      	mov	fp, r1
 8008e72:	4690      	mov	r8, r2
 8008e74:	f7f7 f98c 	bl	8000190 <strlen>
 8008e78:	9b01      	ldr	r3, [sp, #4]
 8008e7a:	f8db 2000 	ldr.w	r2, [fp]
 8008e7e:	4403      	add	r3, r0
 8008e80:	4682      	mov	sl, r0
 8008e82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008e86:	9305      	str	r3, [sp, #20]
 8008e88:	1c93      	adds	r3, r2, #2
 8008e8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008e8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008e92:	32fe      	adds	r2, #254	; 0xfe
 8008e94:	18d1      	adds	r1, r2, r3
 8008e96:	461f      	mov	r7, r3
 8008e98:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e9c:	9100      	str	r1, [sp, #0]
 8008e9e:	2830      	cmp	r0, #48	; 0x30
 8008ea0:	d0f8      	beq.n	8008e94 <__gethex+0x3c>
 8008ea2:	f7ff ffc4 	bl	8008e2e <__hexdig_fun>
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d13a      	bne.n	8008f22 <__gethex+0xca>
 8008eac:	9901      	ldr	r1, [sp, #4]
 8008eae:	4652      	mov	r2, sl
 8008eb0:	4638      	mov	r0, r7
 8008eb2:	f001 fb68 	bl	800a586 <strncmp>
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d168      	bne.n	8008f8e <__gethex+0x136>
 8008ebc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008ec0:	eb07 060a 	add.w	r6, r7, sl
 8008ec4:	f7ff ffb3 	bl	8008e2e <__hexdig_fun>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d062      	beq.n	8008f92 <__gethex+0x13a>
 8008ecc:	4633      	mov	r3, r6
 8008ece:	7818      	ldrb	r0, [r3, #0]
 8008ed0:	2830      	cmp	r0, #48	; 0x30
 8008ed2:	461f      	mov	r7, r3
 8008ed4:	f103 0301 	add.w	r3, r3, #1
 8008ed8:	d0f9      	beq.n	8008ece <__gethex+0x76>
 8008eda:	f7ff ffa8 	bl	8008e2e <__hexdig_fun>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	fab0 f480 	clz	r4, r0
 8008ee4:	0964      	lsrs	r4, r4, #5
 8008ee6:	4635      	mov	r5, r6
 8008ee8:	9300      	str	r3, [sp, #0]
 8008eea:	463a      	mov	r2, r7
 8008eec:	4616      	mov	r6, r2
 8008eee:	3201      	adds	r2, #1
 8008ef0:	7830      	ldrb	r0, [r6, #0]
 8008ef2:	f7ff ff9c 	bl	8008e2e <__hexdig_fun>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d1f8      	bne.n	8008eec <__gethex+0x94>
 8008efa:	9901      	ldr	r1, [sp, #4]
 8008efc:	4652      	mov	r2, sl
 8008efe:	4630      	mov	r0, r6
 8008f00:	f001 fb41 	bl	800a586 <strncmp>
 8008f04:	b980      	cbnz	r0, 8008f28 <__gethex+0xd0>
 8008f06:	b94d      	cbnz	r5, 8008f1c <__gethex+0xc4>
 8008f08:	eb06 050a 	add.w	r5, r6, sl
 8008f0c:	462a      	mov	r2, r5
 8008f0e:	4616      	mov	r6, r2
 8008f10:	3201      	adds	r2, #1
 8008f12:	7830      	ldrb	r0, [r6, #0]
 8008f14:	f7ff ff8b 	bl	8008e2e <__hexdig_fun>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d1f8      	bne.n	8008f0e <__gethex+0xb6>
 8008f1c:	1bad      	subs	r5, r5, r6
 8008f1e:	00ad      	lsls	r5, r5, #2
 8008f20:	e004      	b.n	8008f2c <__gethex+0xd4>
 8008f22:	2400      	movs	r4, #0
 8008f24:	4625      	mov	r5, r4
 8008f26:	e7e0      	b.n	8008eea <__gethex+0x92>
 8008f28:	2d00      	cmp	r5, #0
 8008f2a:	d1f7      	bne.n	8008f1c <__gethex+0xc4>
 8008f2c:	7833      	ldrb	r3, [r6, #0]
 8008f2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f32:	2b50      	cmp	r3, #80	; 0x50
 8008f34:	d13b      	bne.n	8008fae <__gethex+0x156>
 8008f36:	7873      	ldrb	r3, [r6, #1]
 8008f38:	2b2b      	cmp	r3, #43	; 0x2b
 8008f3a:	d02c      	beq.n	8008f96 <__gethex+0x13e>
 8008f3c:	2b2d      	cmp	r3, #45	; 0x2d
 8008f3e:	d02e      	beq.n	8008f9e <__gethex+0x146>
 8008f40:	1c71      	adds	r1, r6, #1
 8008f42:	f04f 0900 	mov.w	r9, #0
 8008f46:	7808      	ldrb	r0, [r1, #0]
 8008f48:	f7ff ff71 	bl	8008e2e <__hexdig_fun>
 8008f4c:	1e43      	subs	r3, r0, #1
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b18      	cmp	r3, #24
 8008f52:	d82c      	bhi.n	8008fae <__gethex+0x156>
 8008f54:	f1a0 0210 	sub.w	r2, r0, #16
 8008f58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f5c:	f7ff ff67 	bl	8008e2e <__hexdig_fun>
 8008f60:	1e43      	subs	r3, r0, #1
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b18      	cmp	r3, #24
 8008f66:	d91d      	bls.n	8008fa4 <__gethex+0x14c>
 8008f68:	f1b9 0f00 	cmp.w	r9, #0
 8008f6c:	d000      	beq.n	8008f70 <__gethex+0x118>
 8008f6e:	4252      	negs	r2, r2
 8008f70:	4415      	add	r5, r2
 8008f72:	f8cb 1000 	str.w	r1, [fp]
 8008f76:	b1e4      	cbz	r4, 8008fb2 <__gethex+0x15a>
 8008f78:	9b00      	ldr	r3, [sp, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	bf14      	ite	ne
 8008f7e:	2700      	movne	r7, #0
 8008f80:	2706      	moveq	r7, #6
 8008f82:	4638      	mov	r0, r7
 8008f84:	b009      	add	sp, #36	; 0x24
 8008f86:	ecbd 8b02 	vpop	{d8}
 8008f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8e:	463e      	mov	r6, r7
 8008f90:	4625      	mov	r5, r4
 8008f92:	2401      	movs	r4, #1
 8008f94:	e7ca      	b.n	8008f2c <__gethex+0xd4>
 8008f96:	f04f 0900 	mov.w	r9, #0
 8008f9a:	1cb1      	adds	r1, r6, #2
 8008f9c:	e7d3      	b.n	8008f46 <__gethex+0xee>
 8008f9e:	f04f 0901 	mov.w	r9, #1
 8008fa2:	e7fa      	b.n	8008f9a <__gethex+0x142>
 8008fa4:	230a      	movs	r3, #10
 8008fa6:	fb03 0202 	mla	r2, r3, r2, r0
 8008faa:	3a10      	subs	r2, #16
 8008fac:	e7d4      	b.n	8008f58 <__gethex+0x100>
 8008fae:	4631      	mov	r1, r6
 8008fb0:	e7df      	b.n	8008f72 <__gethex+0x11a>
 8008fb2:	1bf3      	subs	r3, r6, r7
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	2b07      	cmp	r3, #7
 8008fba:	dc0b      	bgt.n	8008fd4 <__gethex+0x17c>
 8008fbc:	ee18 0a10 	vmov	r0, s16
 8008fc0:	f000 fb00 	bl	80095c4 <_Balloc>
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	b940      	cbnz	r0, 8008fda <__gethex+0x182>
 8008fc8:	4b5d      	ldr	r3, [pc, #372]	; (8009140 <__gethex+0x2e8>)
 8008fca:	4602      	mov	r2, r0
 8008fcc:	21de      	movs	r1, #222	; 0xde
 8008fce:	485d      	ldr	r0, [pc, #372]	; (8009144 <__gethex+0x2ec>)
 8008fd0:	f7fc feda 	bl	8005d88 <__assert_func>
 8008fd4:	3101      	adds	r1, #1
 8008fd6:	105b      	asrs	r3, r3, #1
 8008fd8:	e7ee      	b.n	8008fb8 <__gethex+0x160>
 8008fda:	f100 0914 	add.w	r9, r0, #20
 8008fde:	f04f 0b00 	mov.w	fp, #0
 8008fe2:	f1ca 0301 	rsb	r3, sl, #1
 8008fe6:	f8cd 9008 	str.w	r9, [sp, #8]
 8008fea:	f8cd b000 	str.w	fp, [sp]
 8008fee:	9306      	str	r3, [sp, #24]
 8008ff0:	42b7      	cmp	r7, r6
 8008ff2:	d340      	bcc.n	8009076 <__gethex+0x21e>
 8008ff4:	9802      	ldr	r0, [sp, #8]
 8008ff6:	9b00      	ldr	r3, [sp, #0]
 8008ff8:	f840 3b04 	str.w	r3, [r0], #4
 8008ffc:	eba0 0009 	sub.w	r0, r0, r9
 8009000:	1080      	asrs	r0, r0, #2
 8009002:	0146      	lsls	r6, r0, #5
 8009004:	6120      	str	r0, [r4, #16]
 8009006:	4618      	mov	r0, r3
 8009008:	f000 fbce 	bl	80097a8 <__hi0bits>
 800900c:	1a30      	subs	r0, r6, r0
 800900e:	f8d8 6000 	ldr.w	r6, [r8]
 8009012:	42b0      	cmp	r0, r6
 8009014:	dd63      	ble.n	80090de <__gethex+0x286>
 8009016:	1b87      	subs	r7, r0, r6
 8009018:	4639      	mov	r1, r7
 800901a:	4620      	mov	r0, r4
 800901c:	f000 ff72 	bl	8009f04 <__any_on>
 8009020:	4682      	mov	sl, r0
 8009022:	b1a8      	cbz	r0, 8009050 <__gethex+0x1f8>
 8009024:	1e7b      	subs	r3, r7, #1
 8009026:	1159      	asrs	r1, r3, #5
 8009028:	f003 021f 	and.w	r2, r3, #31
 800902c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009030:	f04f 0a01 	mov.w	sl, #1
 8009034:	fa0a f202 	lsl.w	r2, sl, r2
 8009038:	420a      	tst	r2, r1
 800903a:	d009      	beq.n	8009050 <__gethex+0x1f8>
 800903c:	4553      	cmp	r3, sl
 800903e:	dd05      	ble.n	800904c <__gethex+0x1f4>
 8009040:	1eb9      	subs	r1, r7, #2
 8009042:	4620      	mov	r0, r4
 8009044:	f000 ff5e 	bl	8009f04 <__any_on>
 8009048:	2800      	cmp	r0, #0
 800904a:	d145      	bne.n	80090d8 <__gethex+0x280>
 800904c:	f04f 0a02 	mov.w	sl, #2
 8009050:	4639      	mov	r1, r7
 8009052:	4620      	mov	r0, r4
 8009054:	f7ff fe99 	bl	8008d8a <rshift>
 8009058:	443d      	add	r5, r7
 800905a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800905e:	42ab      	cmp	r3, r5
 8009060:	da4c      	bge.n	80090fc <__gethex+0x2a4>
 8009062:	ee18 0a10 	vmov	r0, s16
 8009066:	4621      	mov	r1, r4
 8009068:	f000 faec 	bl	8009644 <_Bfree>
 800906c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800906e:	2300      	movs	r3, #0
 8009070:	6013      	str	r3, [r2, #0]
 8009072:	27a3      	movs	r7, #163	; 0xa3
 8009074:	e785      	b.n	8008f82 <__gethex+0x12a>
 8009076:	1e73      	subs	r3, r6, #1
 8009078:	9a05      	ldr	r2, [sp, #20]
 800907a:	9303      	str	r3, [sp, #12]
 800907c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009080:	4293      	cmp	r3, r2
 8009082:	d019      	beq.n	80090b8 <__gethex+0x260>
 8009084:	f1bb 0f20 	cmp.w	fp, #32
 8009088:	d107      	bne.n	800909a <__gethex+0x242>
 800908a:	9b02      	ldr	r3, [sp, #8]
 800908c:	9a00      	ldr	r2, [sp, #0]
 800908e:	f843 2b04 	str.w	r2, [r3], #4
 8009092:	9302      	str	r3, [sp, #8]
 8009094:	2300      	movs	r3, #0
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	469b      	mov	fp, r3
 800909a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800909e:	f7ff fec6 	bl	8008e2e <__hexdig_fun>
 80090a2:	9b00      	ldr	r3, [sp, #0]
 80090a4:	f000 000f 	and.w	r0, r0, #15
 80090a8:	fa00 f00b 	lsl.w	r0, r0, fp
 80090ac:	4303      	orrs	r3, r0
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	f10b 0b04 	add.w	fp, fp, #4
 80090b4:	9b03      	ldr	r3, [sp, #12]
 80090b6:	e00d      	b.n	80090d4 <__gethex+0x27c>
 80090b8:	9b03      	ldr	r3, [sp, #12]
 80090ba:	9a06      	ldr	r2, [sp, #24]
 80090bc:	4413      	add	r3, r2
 80090be:	42bb      	cmp	r3, r7
 80090c0:	d3e0      	bcc.n	8009084 <__gethex+0x22c>
 80090c2:	4618      	mov	r0, r3
 80090c4:	9901      	ldr	r1, [sp, #4]
 80090c6:	9307      	str	r3, [sp, #28]
 80090c8:	4652      	mov	r2, sl
 80090ca:	f001 fa5c 	bl	800a586 <strncmp>
 80090ce:	9b07      	ldr	r3, [sp, #28]
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d1d7      	bne.n	8009084 <__gethex+0x22c>
 80090d4:	461e      	mov	r6, r3
 80090d6:	e78b      	b.n	8008ff0 <__gethex+0x198>
 80090d8:	f04f 0a03 	mov.w	sl, #3
 80090dc:	e7b8      	b.n	8009050 <__gethex+0x1f8>
 80090de:	da0a      	bge.n	80090f6 <__gethex+0x29e>
 80090e0:	1a37      	subs	r7, r6, r0
 80090e2:	4621      	mov	r1, r4
 80090e4:	ee18 0a10 	vmov	r0, s16
 80090e8:	463a      	mov	r2, r7
 80090ea:	f000 fcc7 	bl	8009a7c <__lshift>
 80090ee:	1bed      	subs	r5, r5, r7
 80090f0:	4604      	mov	r4, r0
 80090f2:	f100 0914 	add.w	r9, r0, #20
 80090f6:	f04f 0a00 	mov.w	sl, #0
 80090fa:	e7ae      	b.n	800905a <__gethex+0x202>
 80090fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009100:	42a8      	cmp	r0, r5
 8009102:	dd72      	ble.n	80091ea <__gethex+0x392>
 8009104:	1b45      	subs	r5, r0, r5
 8009106:	42ae      	cmp	r6, r5
 8009108:	dc36      	bgt.n	8009178 <__gethex+0x320>
 800910a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800910e:	2b02      	cmp	r3, #2
 8009110:	d02a      	beq.n	8009168 <__gethex+0x310>
 8009112:	2b03      	cmp	r3, #3
 8009114:	d02c      	beq.n	8009170 <__gethex+0x318>
 8009116:	2b01      	cmp	r3, #1
 8009118:	d11c      	bne.n	8009154 <__gethex+0x2fc>
 800911a:	42ae      	cmp	r6, r5
 800911c:	d11a      	bne.n	8009154 <__gethex+0x2fc>
 800911e:	2e01      	cmp	r6, #1
 8009120:	d112      	bne.n	8009148 <__gethex+0x2f0>
 8009122:	9a04      	ldr	r2, [sp, #16]
 8009124:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009128:	6013      	str	r3, [r2, #0]
 800912a:	2301      	movs	r3, #1
 800912c:	6123      	str	r3, [r4, #16]
 800912e:	f8c9 3000 	str.w	r3, [r9]
 8009132:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009134:	2762      	movs	r7, #98	; 0x62
 8009136:	601c      	str	r4, [r3, #0]
 8009138:	e723      	b.n	8008f82 <__gethex+0x12a>
 800913a:	bf00      	nop
 800913c:	0800aa3c 	.word	0x0800aa3c
 8009140:	0800a960 	.word	0x0800a960
 8009144:	0800a9d4 	.word	0x0800a9d4
 8009148:	1e71      	subs	r1, r6, #1
 800914a:	4620      	mov	r0, r4
 800914c:	f000 feda 	bl	8009f04 <__any_on>
 8009150:	2800      	cmp	r0, #0
 8009152:	d1e6      	bne.n	8009122 <__gethex+0x2ca>
 8009154:	ee18 0a10 	vmov	r0, s16
 8009158:	4621      	mov	r1, r4
 800915a:	f000 fa73 	bl	8009644 <_Bfree>
 800915e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009160:	2300      	movs	r3, #0
 8009162:	6013      	str	r3, [r2, #0]
 8009164:	2750      	movs	r7, #80	; 0x50
 8009166:	e70c      	b.n	8008f82 <__gethex+0x12a>
 8009168:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1f2      	bne.n	8009154 <__gethex+0x2fc>
 800916e:	e7d8      	b.n	8009122 <__gethex+0x2ca>
 8009170:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1d5      	bne.n	8009122 <__gethex+0x2ca>
 8009176:	e7ed      	b.n	8009154 <__gethex+0x2fc>
 8009178:	1e6f      	subs	r7, r5, #1
 800917a:	f1ba 0f00 	cmp.w	sl, #0
 800917e:	d131      	bne.n	80091e4 <__gethex+0x38c>
 8009180:	b127      	cbz	r7, 800918c <__gethex+0x334>
 8009182:	4639      	mov	r1, r7
 8009184:	4620      	mov	r0, r4
 8009186:	f000 febd 	bl	8009f04 <__any_on>
 800918a:	4682      	mov	sl, r0
 800918c:	117b      	asrs	r3, r7, #5
 800918e:	2101      	movs	r1, #1
 8009190:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009194:	f007 071f 	and.w	r7, r7, #31
 8009198:	fa01 f707 	lsl.w	r7, r1, r7
 800919c:	421f      	tst	r7, r3
 800919e:	4629      	mov	r1, r5
 80091a0:	4620      	mov	r0, r4
 80091a2:	bf18      	it	ne
 80091a4:	f04a 0a02 	orrne.w	sl, sl, #2
 80091a8:	1b76      	subs	r6, r6, r5
 80091aa:	f7ff fdee 	bl	8008d8a <rshift>
 80091ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80091b2:	2702      	movs	r7, #2
 80091b4:	f1ba 0f00 	cmp.w	sl, #0
 80091b8:	d048      	beq.n	800924c <__gethex+0x3f4>
 80091ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d015      	beq.n	80091ee <__gethex+0x396>
 80091c2:	2b03      	cmp	r3, #3
 80091c4:	d017      	beq.n	80091f6 <__gethex+0x39e>
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d109      	bne.n	80091de <__gethex+0x386>
 80091ca:	f01a 0f02 	tst.w	sl, #2
 80091ce:	d006      	beq.n	80091de <__gethex+0x386>
 80091d0:	f8d9 0000 	ldr.w	r0, [r9]
 80091d4:	ea4a 0a00 	orr.w	sl, sl, r0
 80091d8:	f01a 0f01 	tst.w	sl, #1
 80091dc:	d10e      	bne.n	80091fc <__gethex+0x3a4>
 80091de:	f047 0710 	orr.w	r7, r7, #16
 80091e2:	e033      	b.n	800924c <__gethex+0x3f4>
 80091e4:	f04f 0a01 	mov.w	sl, #1
 80091e8:	e7d0      	b.n	800918c <__gethex+0x334>
 80091ea:	2701      	movs	r7, #1
 80091ec:	e7e2      	b.n	80091b4 <__gethex+0x35c>
 80091ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091f0:	f1c3 0301 	rsb	r3, r3, #1
 80091f4:	9315      	str	r3, [sp, #84]	; 0x54
 80091f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d0f0      	beq.n	80091de <__gethex+0x386>
 80091fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009200:	f104 0314 	add.w	r3, r4, #20
 8009204:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009208:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800920c:	f04f 0c00 	mov.w	ip, #0
 8009210:	4618      	mov	r0, r3
 8009212:	f853 2b04 	ldr.w	r2, [r3], #4
 8009216:	f1b2 3fff 	cmp.w	r2, #4294967295
 800921a:	d01c      	beq.n	8009256 <__gethex+0x3fe>
 800921c:	3201      	adds	r2, #1
 800921e:	6002      	str	r2, [r0, #0]
 8009220:	2f02      	cmp	r7, #2
 8009222:	f104 0314 	add.w	r3, r4, #20
 8009226:	d13f      	bne.n	80092a8 <__gethex+0x450>
 8009228:	f8d8 2000 	ldr.w	r2, [r8]
 800922c:	3a01      	subs	r2, #1
 800922e:	42b2      	cmp	r2, r6
 8009230:	d10a      	bne.n	8009248 <__gethex+0x3f0>
 8009232:	1171      	asrs	r1, r6, #5
 8009234:	2201      	movs	r2, #1
 8009236:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800923a:	f006 061f 	and.w	r6, r6, #31
 800923e:	fa02 f606 	lsl.w	r6, r2, r6
 8009242:	421e      	tst	r6, r3
 8009244:	bf18      	it	ne
 8009246:	4617      	movne	r7, r2
 8009248:	f047 0720 	orr.w	r7, r7, #32
 800924c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800924e:	601c      	str	r4, [r3, #0]
 8009250:	9b04      	ldr	r3, [sp, #16]
 8009252:	601d      	str	r5, [r3, #0]
 8009254:	e695      	b.n	8008f82 <__gethex+0x12a>
 8009256:	4299      	cmp	r1, r3
 8009258:	f843 cc04 	str.w	ip, [r3, #-4]
 800925c:	d8d8      	bhi.n	8009210 <__gethex+0x3b8>
 800925e:	68a3      	ldr	r3, [r4, #8]
 8009260:	459b      	cmp	fp, r3
 8009262:	db19      	blt.n	8009298 <__gethex+0x440>
 8009264:	6861      	ldr	r1, [r4, #4]
 8009266:	ee18 0a10 	vmov	r0, s16
 800926a:	3101      	adds	r1, #1
 800926c:	f000 f9aa 	bl	80095c4 <_Balloc>
 8009270:	4681      	mov	r9, r0
 8009272:	b918      	cbnz	r0, 800927c <__gethex+0x424>
 8009274:	4b1a      	ldr	r3, [pc, #104]	; (80092e0 <__gethex+0x488>)
 8009276:	4602      	mov	r2, r0
 8009278:	2184      	movs	r1, #132	; 0x84
 800927a:	e6a8      	b.n	8008fce <__gethex+0x176>
 800927c:	6922      	ldr	r2, [r4, #16]
 800927e:	3202      	adds	r2, #2
 8009280:	f104 010c 	add.w	r1, r4, #12
 8009284:	0092      	lsls	r2, r2, #2
 8009286:	300c      	adds	r0, #12
 8009288:	f000 f974 	bl	8009574 <memcpy>
 800928c:	4621      	mov	r1, r4
 800928e:	ee18 0a10 	vmov	r0, s16
 8009292:	f000 f9d7 	bl	8009644 <_Bfree>
 8009296:	464c      	mov	r4, r9
 8009298:	6923      	ldr	r3, [r4, #16]
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092a0:	6122      	str	r2, [r4, #16]
 80092a2:	2201      	movs	r2, #1
 80092a4:	615a      	str	r2, [r3, #20]
 80092a6:	e7bb      	b.n	8009220 <__gethex+0x3c8>
 80092a8:	6922      	ldr	r2, [r4, #16]
 80092aa:	455a      	cmp	r2, fp
 80092ac:	dd0b      	ble.n	80092c6 <__gethex+0x46e>
 80092ae:	2101      	movs	r1, #1
 80092b0:	4620      	mov	r0, r4
 80092b2:	f7ff fd6a 	bl	8008d8a <rshift>
 80092b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80092ba:	3501      	adds	r5, #1
 80092bc:	42ab      	cmp	r3, r5
 80092be:	f6ff aed0 	blt.w	8009062 <__gethex+0x20a>
 80092c2:	2701      	movs	r7, #1
 80092c4:	e7c0      	b.n	8009248 <__gethex+0x3f0>
 80092c6:	f016 061f 	ands.w	r6, r6, #31
 80092ca:	d0fa      	beq.n	80092c2 <__gethex+0x46a>
 80092cc:	4453      	add	r3, sl
 80092ce:	f1c6 0620 	rsb	r6, r6, #32
 80092d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80092d6:	f000 fa67 	bl	80097a8 <__hi0bits>
 80092da:	42b0      	cmp	r0, r6
 80092dc:	dbe7      	blt.n	80092ae <__gethex+0x456>
 80092de:	e7f0      	b.n	80092c2 <__gethex+0x46a>
 80092e0:	0800a960 	.word	0x0800a960

080092e4 <L_shift>:
 80092e4:	f1c2 0208 	rsb	r2, r2, #8
 80092e8:	0092      	lsls	r2, r2, #2
 80092ea:	b570      	push	{r4, r5, r6, lr}
 80092ec:	f1c2 0620 	rsb	r6, r2, #32
 80092f0:	6843      	ldr	r3, [r0, #4]
 80092f2:	6804      	ldr	r4, [r0, #0]
 80092f4:	fa03 f506 	lsl.w	r5, r3, r6
 80092f8:	432c      	orrs	r4, r5
 80092fa:	40d3      	lsrs	r3, r2
 80092fc:	6004      	str	r4, [r0, #0]
 80092fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8009302:	4288      	cmp	r0, r1
 8009304:	d3f4      	bcc.n	80092f0 <L_shift+0xc>
 8009306:	bd70      	pop	{r4, r5, r6, pc}

08009308 <__match>:
 8009308:	b530      	push	{r4, r5, lr}
 800930a:	6803      	ldr	r3, [r0, #0]
 800930c:	3301      	adds	r3, #1
 800930e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009312:	b914      	cbnz	r4, 800931a <__match+0x12>
 8009314:	6003      	str	r3, [r0, #0]
 8009316:	2001      	movs	r0, #1
 8009318:	bd30      	pop	{r4, r5, pc}
 800931a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800931e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009322:	2d19      	cmp	r5, #25
 8009324:	bf98      	it	ls
 8009326:	3220      	addls	r2, #32
 8009328:	42a2      	cmp	r2, r4
 800932a:	d0f0      	beq.n	800930e <__match+0x6>
 800932c:	2000      	movs	r0, #0
 800932e:	e7f3      	b.n	8009318 <__match+0x10>

08009330 <__hexnan>:
 8009330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009334:	680b      	ldr	r3, [r1, #0]
 8009336:	115e      	asrs	r6, r3, #5
 8009338:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800933c:	f013 031f 	ands.w	r3, r3, #31
 8009340:	b087      	sub	sp, #28
 8009342:	bf18      	it	ne
 8009344:	3604      	addne	r6, #4
 8009346:	2500      	movs	r5, #0
 8009348:	1f37      	subs	r7, r6, #4
 800934a:	4690      	mov	r8, r2
 800934c:	6802      	ldr	r2, [r0, #0]
 800934e:	9301      	str	r3, [sp, #4]
 8009350:	4682      	mov	sl, r0
 8009352:	f846 5c04 	str.w	r5, [r6, #-4]
 8009356:	46b9      	mov	r9, r7
 8009358:	463c      	mov	r4, r7
 800935a:	9502      	str	r5, [sp, #8]
 800935c:	46ab      	mov	fp, r5
 800935e:	7851      	ldrb	r1, [r2, #1]
 8009360:	1c53      	adds	r3, r2, #1
 8009362:	9303      	str	r3, [sp, #12]
 8009364:	b341      	cbz	r1, 80093b8 <__hexnan+0x88>
 8009366:	4608      	mov	r0, r1
 8009368:	9205      	str	r2, [sp, #20]
 800936a:	9104      	str	r1, [sp, #16]
 800936c:	f7ff fd5f 	bl	8008e2e <__hexdig_fun>
 8009370:	2800      	cmp	r0, #0
 8009372:	d14f      	bne.n	8009414 <__hexnan+0xe4>
 8009374:	9904      	ldr	r1, [sp, #16]
 8009376:	9a05      	ldr	r2, [sp, #20]
 8009378:	2920      	cmp	r1, #32
 800937a:	d818      	bhi.n	80093ae <__hexnan+0x7e>
 800937c:	9b02      	ldr	r3, [sp, #8]
 800937e:	459b      	cmp	fp, r3
 8009380:	dd13      	ble.n	80093aa <__hexnan+0x7a>
 8009382:	454c      	cmp	r4, r9
 8009384:	d206      	bcs.n	8009394 <__hexnan+0x64>
 8009386:	2d07      	cmp	r5, #7
 8009388:	dc04      	bgt.n	8009394 <__hexnan+0x64>
 800938a:	462a      	mov	r2, r5
 800938c:	4649      	mov	r1, r9
 800938e:	4620      	mov	r0, r4
 8009390:	f7ff ffa8 	bl	80092e4 <L_shift>
 8009394:	4544      	cmp	r4, r8
 8009396:	d950      	bls.n	800943a <__hexnan+0x10a>
 8009398:	2300      	movs	r3, #0
 800939a:	f1a4 0904 	sub.w	r9, r4, #4
 800939e:	f844 3c04 	str.w	r3, [r4, #-4]
 80093a2:	f8cd b008 	str.w	fp, [sp, #8]
 80093a6:	464c      	mov	r4, r9
 80093a8:	461d      	mov	r5, r3
 80093aa:	9a03      	ldr	r2, [sp, #12]
 80093ac:	e7d7      	b.n	800935e <__hexnan+0x2e>
 80093ae:	2929      	cmp	r1, #41	; 0x29
 80093b0:	d156      	bne.n	8009460 <__hexnan+0x130>
 80093b2:	3202      	adds	r2, #2
 80093b4:	f8ca 2000 	str.w	r2, [sl]
 80093b8:	f1bb 0f00 	cmp.w	fp, #0
 80093bc:	d050      	beq.n	8009460 <__hexnan+0x130>
 80093be:	454c      	cmp	r4, r9
 80093c0:	d206      	bcs.n	80093d0 <__hexnan+0xa0>
 80093c2:	2d07      	cmp	r5, #7
 80093c4:	dc04      	bgt.n	80093d0 <__hexnan+0xa0>
 80093c6:	462a      	mov	r2, r5
 80093c8:	4649      	mov	r1, r9
 80093ca:	4620      	mov	r0, r4
 80093cc:	f7ff ff8a 	bl	80092e4 <L_shift>
 80093d0:	4544      	cmp	r4, r8
 80093d2:	d934      	bls.n	800943e <__hexnan+0x10e>
 80093d4:	f1a8 0204 	sub.w	r2, r8, #4
 80093d8:	4623      	mov	r3, r4
 80093da:	f853 1b04 	ldr.w	r1, [r3], #4
 80093de:	f842 1f04 	str.w	r1, [r2, #4]!
 80093e2:	429f      	cmp	r7, r3
 80093e4:	d2f9      	bcs.n	80093da <__hexnan+0xaa>
 80093e6:	1b3b      	subs	r3, r7, r4
 80093e8:	f023 0303 	bic.w	r3, r3, #3
 80093ec:	3304      	adds	r3, #4
 80093ee:	3401      	adds	r4, #1
 80093f0:	3e03      	subs	r6, #3
 80093f2:	42b4      	cmp	r4, r6
 80093f4:	bf88      	it	hi
 80093f6:	2304      	movhi	r3, #4
 80093f8:	4443      	add	r3, r8
 80093fa:	2200      	movs	r2, #0
 80093fc:	f843 2b04 	str.w	r2, [r3], #4
 8009400:	429f      	cmp	r7, r3
 8009402:	d2fb      	bcs.n	80093fc <__hexnan+0xcc>
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	b91b      	cbnz	r3, 8009410 <__hexnan+0xe0>
 8009408:	4547      	cmp	r7, r8
 800940a:	d127      	bne.n	800945c <__hexnan+0x12c>
 800940c:	2301      	movs	r3, #1
 800940e:	603b      	str	r3, [r7, #0]
 8009410:	2005      	movs	r0, #5
 8009412:	e026      	b.n	8009462 <__hexnan+0x132>
 8009414:	3501      	adds	r5, #1
 8009416:	2d08      	cmp	r5, #8
 8009418:	f10b 0b01 	add.w	fp, fp, #1
 800941c:	dd06      	ble.n	800942c <__hexnan+0xfc>
 800941e:	4544      	cmp	r4, r8
 8009420:	d9c3      	bls.n	80093aa <__hexnan+0x7a>
 8009422:	2300      	movs	r3, #0
 8009424:	f844 3c04 	str.w	r3, [r4, #-4]
 8009428:	2501      	movs	r5, #1
 800942a:	3c04      	subs	r4, #4
 800942c:	6822      	ldr	r2, [r4, #0]
 800942e:	f000 000f 	and.w	r0, r0, #15
 8009432:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009436:	6022      	str	r2, [r4, #0]
 8009438:	e7b7      	b.n	80093aa <__hexnan+0x7a>
 800943a:	2508      	movs	r5, #8
 800943c:	e7b5      	b.n	80093aa <__hexnan+0x7a>
 800943e:	9b01      	ldr	r3, [sp, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d0df      	beq.n	8009404 <__hexnan+0xd4>
 8009444:	f04f 32ff 	mov.w	r2, #4294967295
 8009448:	f1c3 0320 	rsb	r3, r3, #32
 800944c:	fa22 f303 	lsr.w	r3, r2, r3
 8009450:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009454:	401a      	ands	r2, r3
 8009456:	f846 2c04 	str.w	r2, [r6, #-4]
 800945a:	e7d3      	b.n	8009404 <__hexnan+0xd4>
 800945c:	3f04      	subs	r7, #4
 800945e:	e7d1      	b.n	8009404 <__hexnan+0xd4>
 8009460:	2004      	movs	r0, #4
 8009462:	b007      	add	sp, #28
 8009464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009468 <_localeconv_r>:
 8009468:	4800      	ldr	r0, [pc, #0]	; (800946c <_localeconv_r+0x4>)
 800946a:	4770      	bx	lr
 800946c:	20000164 	.word	0x20000164

08009470 <__retarget_lock_init_recursive>:
 8009470:	4770      	bx	lr

08009472 <__retarget_lock_acquire_recursive>:
 8009472:	4770      	bx	lr

08009474 <__retarget_lock_release_recursive>:
 8009474:	4770      	bx	lr

08009476 <__swhatbuf_r>:
 8009476:	b570      	push	{r4, r5, r6, lr}
 8009478:	460e      	mov	r6, r1
 800947a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800947e:	2900      	cmp	r1, #0
 8009480:	b096      	sub	sp, #88	; 0x58
 8009482:	4614      	mov	r4, r2
 8009484:	461d      	mov	r5, r3
 8009486:	da08      	bge.n	800949a <__swhatbuf_r+0x24>
 8009488:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	602a      	str	r2, [r5, #0]
 8009490:	061a      	lsls	r2, r3, #24
 8009492:	d410      	bmi.n	80094b6 <__swhatbuf_r+0x40>
 8009494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009498:	e00e      	b.n	80094b8 <__swhatbuf_r+0x42>
 800949a:	466a      	mov	r2, sp
 800949c:	f001 f8b6 	bl	800a60c <_fstat_r>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	dbf1      	blt.n	8009488 <__swhatbuf_r+0x12>
 80094a4:	9a01      	ldr	r2, [sp, #4]
 80094a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094ae:	425a      	negs	r2, r3
 80094b0:	415a      	adcs	r2, r3
 80094b2:	602a      	str	r2, [r5, #0]
 80094b4:	e7ee      	b.n	8009494 <__swhatbuf_r+0x1e>
 80094b6:	2340      	movs	r3, #64	; 0x40
 80094b8:	2000      	movs	r0, #0
 80094ba:	6023      	str	r3, [r4, #0]
 80094bc:	b016      	add	sp, #88	; 0x58
 80094be:	bd70      	pop	{r4, r5, r6, pc}

080094c0 <__smakebuf_r>:
 80094c0:	898b      	ldrh	r3, [r1, #12]
 80094c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094c4:	079d      	lsls	r5, r3, #30
 80094c6:	4606      	mov	r6, r0
 80094c8:	460c      	mov	r4, r1
 80094ca:	d507      	bpl.n	80094dc <__smakebuf_r+0x1c>
 80094cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	6123      	str	r3, [r4, #16]
 80094d4:	2301      	movs	r3, #1
 80094d6:	6163      	str	r3, [r4, #20]
 80094d8:	b002      	add	sp, #8
 80094da:	bd70      	pop	{r4, r5, r6, pc}
 80094dc:	ab01      	add	r3, sp, #4
 80094de:	466a      	mov	r2, sp
 80094e0:	f7ff ffc9 	bl	8009476 <__swhatbuf_r>
 80094e4:	9900      	ldr	r1, [sp, #0]
 80094e6:	4605      	mov	r5, r0
 80094e8:	4630      	mov	r0, r6
 80094ea:	f000 fdaf 	bl	800a04c <_malloc_r>
 80094ee:	b948      	cbnz	r0, 8009504 <__smakebuf_r+0x44>
 80094f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094f4:	059a      	lsls	r2, r3, #22
 80094f6:	d4ef      	bmi.n	80094d8 <__smakebuf_r+0x18>
 80094f8:	f023 0303 	bic.w	r3, r3, #3
 80094fc:	f043 0302 	orr.w	r3, r3, #2
 8009500:	81a3      	strh	r3, [r4, #12]
 8009502:	e7e3      	b.n	80094cc <__smakebuf_r+0xc>
 8009504:	4b0d      	ldr	r3, [pc, #52]	; (800953c <__smakebuf_r+0x7c>)
 8009506:	62b3      	str	r3, [r6, #40]	; 0x28
 8009508:	89a3      	ldrh	r3, [r4, #12]
 800950a:	6020      	str	r0, [r4, #0]
 800950c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009510:	81a3      	strh	r3, [r4, #12]
 8009512:	9b00      	ldr	r3, [sp, #0]
 8009514:	6163      	str	r3, [r4, #20]
 8009516:	9b01      	ldr	r3, [sp, #4]
 8009518:	6120      	str	r0, [r4, #16]
 800951a:	b15b      	cbz	r3, 8009534 <__smakebuf_r+0x74>
 800951c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009520:	4630      	mov	r0, r6
 8009522:	f001 f885 	bl	800a630 <_isatty_r>
 8009526:	b128      	cbz	r0, 8009534 <__smakebuf_r+0x74>
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	f023 0303 	bic.w	r3, r3, #3
 800952e:	f043 0301 	orr.w	r3, r3, #1
 8009532:	81a3      	strh	r3, [r4, #12]
 8009534:	89a0      	ldrh	r0, [r4, #12]
 8009536:	4305      	orrs	r5, r0
 8009538:	81a5      	strh	r5, [r4, #12]
 800953a:	e7cd      	b.n	80094d8 <__smakebuf_r+0x18>
 800953c:	08008be9 	.word	0x08008be9

08009540 <malloc>:
 8009540:	4b02      	ldr	r3, [pc, #8]	; (800954c <malloc+0xc>)
 8009542:	4601      	mov	r1, r0
 8009544:	6818      	ldr	r0, [r3, #0]
 8009546:	f000 bd81 	b.w	800a04c <_malloc_r>
 800954a:	bf00      	nop
 800954c:	2000000c 	.word	0x2000000c

08009550 <__ascii_mbtowc>:
 8009550:	b082      	sub	sp, #8
 8009552:	b901      	cbnz	r1, 8009556 <__ascii_mbtowc+0x6>
 8009554:	a901      	add	r1, sp, #4
 8009556:	b142      	cbz	r2, 800956a <__ascii_mbtowc+0x1a>
 8009558:	b14b      	cbz	r3, 800956e <__ascii_mbtowc+0x1e>
 800955a:	7813      	ldrb	r3, [r2, #0]
 800955c:	600b      	str	r3, [r1, #0]
 800955e:	7812      	ldrb	r2, [r2, #0]
 8009560:	1e10      	subs	r0, r2, #0
 8009562:	bf18      	it	ne
 8009564:	2001      	movne	r0, #1
 8009566:	b002      	add	sp, #8
 8009568:	4770      	bx	lr
 800956a:	4610      	mov	r0, r2
 800956c:	e7fb      	b.n	8009566 <__ascii_mbtowc+0x16>
 800956e:	f06f 0001 	mvn.w	r0, #1
 8009572:	e7f8      	b.n	8009566 <__ascii_mbtowc+0x16>

08009574 <memcpy>:
 8009574:	440a      	add	r2, r1
 8009576:	4291      	cmp	r1, r2
 8009578:	f100 33ff 	add.w	r3, r0, #4294967295
 800957c:	d100      	bne.n	8009580 <memcpy+0xc>
 800957e:	4770      	bx	lr
 8009580:	b510      	push	{r4, lr}
 8009582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009586:	f803 4f01 	strb.w	r4, [r3, #1]!
 800958a:	4291      	cmp	r1, r2
 800958c:	d1f9      	bne.n	8009582 <memcpy+0xe>
 800958e:	bd10      	pop	{r4, pc}

08009590 <memmove>:
 8009590:	4288      	cmp	r0, r1
 8009592:	b510      	push	{r4, lr}
 8009594:	eb01 0402 	add.w	r4, r1, r2
 8009598:	d902      	bls.n	80095a0 <memmove+0x10>
 800959a:	4284      	cmp	r4, r0
 800959c:	4623      	mov	r3, r4
 800959e:	d807      	bhi.n	80095b0 <memmove+0x20>
 80095a0:	1e43      	subs	r3, r0, #1
 80095a2:	42a1      	cmp	r1, r4
 80095a4:	d008      	beq.n	80095b8 <memmove+0x28>
 80095a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095ae:	e7f8      	b.n	80095a2 <memmove+0x12>
 80095b0:	4402      	add	r2, r0
 80095b2:	4601      	mov	r1, r0
 80095b4:	428a      	cmp	r2, r1
 80095b6:	d100      	bne.n	80095ba <memmove+0x2a>
 80095b8:	bd10      	pop	{r4, pc}
 80095ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095c2:	e7f7      	b.n	80095b4 <memmove+0x24>

080095c4 <_Balloc>:
 80095c4:	b570      	push	{r4, r5, r6, lr}
 80095c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095c8:	4604      	mov	r4, r0
 80095ca:	460d      	mov	r5, r1
 80095cc:	b976      	cbnz	r6, 80095ec <_Balloc+0x28>
 80095ce:	2010      	movs	r0, #16
 80095d0:	f7ff ffb6 	bl	8009540 <malloc>
 80095d4:	4602      	mov	r2, r0
 80095d6:	6260      	str	r0, [r4, #36]	; 0x24
 80095d8:	b920      	cbnz	r0, 80095e4 <_Balloc+0x20>
 80095da:	4b18      	ldr	r3, [pc, #96]	; (800963c <_Balloc+0x78>)
 80095dc:	4818      	ldr	r0, [pc, #96]	; (8009640 <_Balloc+0x7c>)
 80095de:	2166      	movs	r1, #102	; 0x66
 80095e0:	f7fc fbd2 	bl	8005d88 <__assert_func>
 80095e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095e8:	6006      	str	r6, [r0, #0]
 80095ea:	60c6      	str	r6, [r0, #12]
 80095ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80095ee:	68f3      	ldr	r3, [r6, #12]
 80095f0:	b183      	cbz	r3, 8009614 <_Balloc+0x50>
 80095f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095fa:	b9b8      	cbnz	r0, 800962c <_Balloc+0x68>
 80095fc:	2101      	movs	r1, #1
 80095fe:	fa01 f605 	lsl.w	r6, r1, r5
 8009602:	1d72      	adds	r2, r6, #5
 8009604:	0092      	lsls	r2, r2, #2
 8009606:	4620      	mov	r0, r4
 8009608:	f000 fc9d 	bl	8009f46 <_calloc_r>
 800960c:	b160      	cbz	r0, 8009628 <_Balloc+0x64>
 800960e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009612:	e00e      	b.n	8009632 <_Balloc+0x6e>
 8009614:	2221      	movs	r2, #33	; 0x21
 8009616:	2104      	movs	r1, #4
 8009618:	4620      	mov	r0, r4
 800961a:	f000 fc94 	bl	8009f46 <_calloc_r>
 800961e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009620:	60f0      	str	r0, [r6, #12]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1e4      	bne.n	80095f2 <_Balloc+0x2e>
 8009628:	2000      	movs	r0, #0
 800962a:	bd70      	pop	{r4, r5, r6, pc}
 800962c:	6802      	ldr	r2, [r0, #0]
 800962e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009632:	2300      	movs	r3, #0
 8009634:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009638:	e7f7      	b.n	800962a <_Balloc+0x66>
 800963a:	bf00      	nop
 800963c:	0800a8ee 	.word	0x0800a8ee
 8009640:	0800aa50 	.word	0x0800aa50

08009644 <_Bfree>:
 8009644:	b570      	push	{r4, r5, r6, lr}
 8009646:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009648:	4605      	mov	r5, r0
 800964a:	460c      	mov	r4, r1
 800964c:	b976      	cbnz	r6, 800966c <_Bfree+0x28>
 800964e:	2010      	movs	r0, #16
 8009650:	f7ff ff76 	bl	8009540 <malloc>
 8009654:	4602      	mov	r2, r0
 8009656:	6268      	str	r0, [r5, #36]	; 0x24
 8009658:	b920      	cbnz	r0, 8009664 <_Bfree+0x20>
 800965a:	4b09      	ldr	r3, [pc, #36]	; (8009680 <_Bfree+0x3c>)
 800965c:	4809      	ldr	r0, [pc, #36]	; (8009684 <_Bfree+0x40>)
 800965e:	218a      	movs	r1, #138	; 0x8a
 8009660:	f7fc fb92 	bl	8005d88 <__assert_func>
 8009664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009668:	6006      	str	r6, [r0, #0]
 800966a:	60c6      	str	r6, [r0, #12]
 800966c:	b13c      	cbz	r4, 800967e <_Bfree+0x3a>
 800966e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009670:	6862      	ldr	r2, [r4, #4]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009678:	6021      	str	r1, [r4, #0]
 800967a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800967e:	bd70      	pop	{r4, r5, r6, pc}
 8009680:	0800a8ee 	.word	0x0800a8ee
 8009684:	0800aa50 	.word	0x0800aa50

08009688 <__multadd>:
 8009688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800968c:	690d      	ldr	r5, [r1, #16]
 800968e:	4607      	mov	r7, r0
 8009690:	460c      	mov	r4, r1
 8009692:	461e      	mov	r6, r3
 8009694:	f101 0c14 	add.w	ip, r1, #20
 8009698:	2000      	movs	r0, #0
 800969a:	f8dc 3000 	ldr.w	r3, [ip]
 800969e:	b299      	uxth	r1, r3
 80096a0:	fb02 6101 	mla	r1, r2, r1, r6
 80096a4:	0c1e      	lsrs	r6, r3, #16
 80096a6:	0c0b      	lsrs	r3, r1, #16
 80096a8:	fb02 3306 	mla	r3, r2, r6, r3
 80096ac:	b289      	uxth	r1, r1
 80096ae:	3001      	adds	r0, #1
 80096b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096b4:	4285      	cmp	r5, r0
 80096b6:	f84c 1b04 	str.w	r1, [ip], #4
 80096ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096be:	dcec      	bgt.n	800969a <__multadd+0x12>
 80096c0:	b30e      	cbz	r6, 8009706 <__multadd+0x7e>
 80096c2:	68a3      	ldr	r3, [r4, #8]
 80096c4:	42ab      	cmp	r3, r5
 80096c6:	dc19      	bgt.n	80096fc <__multadd+0x74>
 80096c8:	6861      	ldr	r1, [r4, #4]
 80096ca:	4638      	mov	r0, r7
 80096cc:	3101      	adds	r1, #1
 80096ce:	f7ff ff79 	bl	80095c4 <_Balloc>
 80096d2:	4680      	mov	r8, r0
 80096d4:	b928      	cbnz	r0, 80096e2 <__multadd+0x5a>
 80096d6:	4602      	mov	r2, r0
 80096d8:	4b0c      	ldr	r3, [pc, #48]	; (800970c <__multadd+0x84>)
 80096da:	480d      	ldr	r0, [pc, #52]	; (8009710 <__multadd+0x88>)
 80096dc:	21b5      	movs	r1, #181	; 0xb5
 80096de:	f7fc fb53 	bl	8005d88 <__assert_func>
 80096e2:	6922      	ldr	r2, [r4, #16]
 80096e4:	3202      	adds	r2, #2
 80096e6:	f104 010c 	add.w	r1, r4, #12
 80096ea:	0092      	lsls	r2, r2, #2
 80096ec:	300c      	adds	r0, #12
 80096ee:	f7ff ff41 	bl	8009574 <memcpy>
 80096f2:	4621      	mov	r1, r4
 80096f4:	4638      	mov	r0, r7
 80096f6:	f7ff ffa5 	bl	8009644 <_Bfree>
 80096fa:	4644      	mov	r4, r8
 80096fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009700:	3501      	adds	r5, #1
 8009702:	615e      	str	r6, [r3, #20]
 8009704:	6125      	str	r5, [r4, #16]
 8009706:	4620      	mov	r0, r4
 8009708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800970c:	0800a960 	.word	0x0800a960
 8009710:	0800aa50 	.word	0x0800aa50

08009714 <__s2b>:
 8009714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009718:	460c      	mov	r4, r1
 800971a:	4615      	mov	r5, r2
 800971c:	461f      	mov	r7, r3
 800971e:	2209      	movs	r2, #9
 8009720:	3308      	adds	r3, #8
 8009722:	4606      	mov	r6, r0
 8009724:	fb93 f3f2 	sdiv	r3, r3, r2
 8009728:	2100      	movs	r1, #0
 800972a:	2201      	movs	r2, #1
 800972c:	429a      	cmp	r2, r3
 800972e:	db09      	blt.n	8009744 <__s2b+0x30>
 8009730:	4630      	mov	r0, r6
 8009732:	f7ff ff47 	bl	80095c4 <_Balloc>
 8009736:	b940      	cbnz	r0, 800974a <__s2b+0x36>
 8009738:	4602      	mov	r2, r0
 800973a:	4b19      	ldr	r3, [pc, #100]	; (80097a0 <__s2b+0x8c>)
 800973c:	4819      	ldr	r0, [pc, #100]	; (80097a4 <__s2b+0x90>)
 800973e:	21ce      	movs	r1, #206	; 0xce
 8009740:	f7fc fb22 	bl	8005d88 <__assert_func>
 8009744:	0052      	lsls	r2, r2, #1
 8009746:	3101      	adds	r1, #1
 8009748:	e7f0      	b.n	800972c <__s2b+0x18>
 800974a:	9b08      	ldr	r3, [sp, #32]
 800974c:	6143      	str	r3, [r0, #20]
 800974e:	2d09      	cmp	r5, #9
 8009750:	f04f 0301 	mov.w	r3, #1
 8009754:	6103      	str	r3, [r0, #16]
 8009756:	dd16      	ble.n	8009786 <__s2b+0x72>
 8009758:	f104 0909 	add.w	r9, r4, #9
 800975c:	46c8      	mov	r8, r9
 800975e:	442c      	add	r4, r5
 8009760:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009764:	4601      	mov	r1, r0
 8009766:	3b30      	subs	r3, #48	; 0x30
 8009768:	220a      	movs	r2, #10
 800976a:	4630      	mov	r0, r6
 800976c:	f7ff ff8c 	bl	8009688 <__multadd>
 8009770:	45a0      	cmp	r8, r4
 8009772:	d1f5      	bne.n	8009760 <__s2b+0x4c>
 8009774:	f1a5 0408 	sub.w	r4, r5, #8
 8009778:	444c      	add	r4, r9
 800977a:	1b2d      	subs	r5, r5, r4
 800977c:	1963      	adds	r3, r4, r5
 800977e:	42bb      	cmp	r3, r7
 8009780:	db04      	blt.n	800978c <__s2b+0x78>
 8009782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009786:	340a      	adds	r4, #10
 8009788:	2509      	movs	r5, #9
 800978a:	e7f6      	b.n	800977a <__s2b+0x66>
 800978c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009790:	4601      	mov	r1, r0
 8009792:	3b30      	subs	r3, #48	; 0x30
 8009794:	220a      	movs	r2, #10
 8009796:	4630      	mov	r0, r6
 8009798:	f7ff ff76 	bl	8009688 <__multadd>
 800979c:	e7ee      	b.n	800977c <__s2b+0x68>
 800979e:	bf00      	nop
 80097a0:	0800a960 	.word	0x0800a960
 80097a4:	0800aa50 	.word	0x0800aa50

080097a8 <__hi0bits>:
 80097a8:	0c03      	lsrs	r3, r0, #16
 80097aa:	041b      	lsls	r3, r3, #16
 80097ac:	b9d3      	cbnz	r3, 80097e4 <__hi0bits+0x3c>
 80097ae:	0400      	lsls	r0, r0, #16
 80097b0:	2310      	movs	r3, #16
 80097b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097b6:	bf04      	itt	eq
 80097b8:	0200      	lsleq	r0, r0, #8
 80097ba:	3308      	addeq	r3, #8
 80097bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097c0:	bf04      	itt	eq
 80097c2:	0100      	lsleq	r0, r0, #4
 80097c4:	3304      	addeq	r3, #4
 80097c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097ca:	bf04      	itt	eq
 80097cc:	0080      	lsleq	r0, r0, #2
 80097ce:	3302      	addeq	r3, #2
 80097d0:	2800      	cmp	r0, #0
 80097d2:	db05      	blt.n	80097e0 <__hi0bits+0x38>
 80097d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097d8:	f103 0301 	add.w	r3, r3, #1
 80097dc:	bf08      	it	eq
 80097de:	2320      	moveq	r3, #32
 80097e0:	4618      	mov	r0, r3
 80097e2:	4770      	bx	lr
 80097e4:	2300      	movs	r3, #0
 80097e6:	e7e4      	b.n	80097b2 <__hi0bits+0xa>

080097e8 <__lo0bits>:
 80097e8:	6803      	ldr	r3, [r0, #0]
 80097ea:	f013 0207 	ands.w	r2, r3, #7
 80097ee:	4601      	mov	r1, r0
 80097f0:	d00b      	beq.n	800980a <__lo0bits+0x22>
 80097f2:	07da      	lsls	r2, r3, #31
 80097f4:	d423      	bmi.n	800983e <__lo0bits+0x56>
 80097f6:	0798      	lsls	r0, r3, #30
 80097f8:	bf49      	itett	mi
 80097fa:	085b      	lsrmi	r3, r3, #1
 80097fc:	089b      	lsrpl	r3, r3, #2
 80097fe:	2001      	movmi	r0, #1
 8009800:	600b      	strmi	r3, [r1, #0]
 8009802:	bf5c      	itt	pl
 8009804:	600b      	strpl	r3, [r1, #0]
 8009806:	2002      	movpl	r0, #2
 8009808:	4770      	bx	lr
 800980a:	b298      	uxth	r0, r3
 800980c:	b9a8      	cbnz	r0, 800983a <__lo0bits+0x52>
 800980e:	0c1b      	lsrs	r3, r3, #16
 8009810:	2010      	movs	r0, #16
 8009812:	b2da      	uxtb	r2, r3
 8009814:	b90a      	cbnz	r2, 800981a <__lo0bits+0x32>
 8009816:	3008      	adds	r0, #8
 8009818:	0a1b      	lsrs	r3, r3, #8
 800981a:	071a      	lsls	r2, r3, #28
 800981c:	bf04      	itt	eq
 800981e:	091b      	lsreq	r3, r3, #4
 8009820:	3004      	addeq	r0, #4
 8009822:	079a      	lsls	r2, r3, #30
 8009824:	bf04      	itt	eq
 8009826:	089b      	lsreq	r3, r3, #2
 8009828:	3002      	addeq	r0, #2
 800982a:	07da      	lsls	r2, r3, #31
 800982c:	d403      	bmi.n	8009836 <__lo0bits+0x4e>
 800982e:	085b      	lsrs	r3, r3, #1
 8009830:	f100 0001 	add.w	r0, r0, #1
 8009834:	d005      	beq.n	8009842 <__lo0bits+0x5a>
 8009836:	600b      	str	r3, [r1, #0]
 8009838:	4770      	bx	lr
 800983a:	4610      	mov	r0, r2
 800983c:	e7e9      	b.n	8009812 <__lo0bits+0x2a>
 800983e:	2000      	movs	r0, #0
 8009840:	4770      	bx	lr
 8009842:	2020      	movs	r0, #32
 8009844:	4770      	bx	lr
	...

08009848 <__i2b>:
 8009848:	b510      	push	{r4, lr}
 800984a:	460c      	mov	r4, r1
 800984c:	2101      	movs	r1, #1
 800984e:	f7ff feb9 	bl	80095c4 <_Balloc>
 8009852:	4602      	mov	r2, r0
 8009854:	b928      	cbnz	r0, 8009862 <__i2b+0x1a>
 8009856:	4b05      	ldr	r3, [pc, #20]	; (800986c <__i2b+0x24>)
 8009858:	4805      	ldr	r0, [pc, #20]	; (8009870 <__i2b+0x28>)
 800985a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800985e:	f7fc fa93 	bl	8005d88 <__assert_func>
 8009862:	2301      	movs	r3, #1
 8009864:	6144      	str	r4, [r0, #20]
 8009866:	6103      	str	r3, [r0, #16]
 8009868:	bd10      	pop	{r4, pc}
 800986a:	bf00      	nop
 800986c:	0800a960 	.word	0x0800a960
 8009870:	0800aa50 	.word	0x0800aa50

08009874 <__multiply>:
 8009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	4691      	mov	r9, r2
 800987a:	690a      	ldr	r2, [r1, #16]
 800987c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009880:	429a      	cmp	r2, r3
 8009882:	bfb8      	it	lt
 8009884:	460b      	movlt	r3, r1
 8009886:	460c      	mov	r4, r1
 8009888:	bfbc      	itt	lt
 800988a:	464c      	movlt	r4, r9
 800988c:	4699      	movlt	r9, r3
 800988e:	6927      	ldr	r7, [r4, #16]
 8009890:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009894:	68a3      	ldr	r3, [r4, #8]
 8009896:	6861      	ldr	r1, [r4, #4]
 8009898:	eb07 060a 	add.w	r6, r7, sl
 800989c:	42b3      	cmp	r3, r6
 800989e:	b085      	sub	sp, #20
 80098a0:	bfb8      	it	lt
 80098a2:	3101      	addlt	r1, #1
 80098a4:	f7ff fe8e 	bl	80095c4 <_Balloc>
 80098a8:	b930      	cbnz	r0, 80098b8 <__multiply+0x44>
 80098aa:	4602      	mov	r2, r0
 80098ac:	4b44      	ldr	r3, [pc, #272]	; (80099c0 <__multiply+0x14c>)
 80098ae:	4845      	ldr	r0, [pc, #276]	; (80099c4 <__multiply+0x150>)
 80098b0:	f240 115d 	movw	r1, #349	; 0x15d
 80098b4:	f7fc fa68 	bl	8005d88 <__assert_func>
 80098b8:	f100 0514 	add.w	r5, r0, #20
 80098bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098c0:	462b      	mov	r3, r5
 80098c2:	2200      	movs	r2, #0
 80098c4:	4543      	cmp	r3, r8
 80098c6:	d321      	bcc.n	800990c <__multiply+0x98>
 80098c8:	f104 0314 	add.w	r3, r4, #20
 80098cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098d0:	f109 0314 	add.w	r3, r9, #20
 80098d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098d8:	9202      	str	r2, [sp, #8]
 80098da:	1b3a      	subs	r2, r7, r4
 80098dc:	3a15      	subs	r2, #21
 80098de:	f022 0203 	bic.w	r2, r2, #3
 80098e2:	3204      	adds	r2, #4
 80098e4:	f104 0115 	add.w	r1, r4, #21
 80098e8:	428f      	cmp	r7, r1
 80098ea:	bf38      	it	cc
 80098ec:	2204      	movcc	r2, #4
 80098ee:	9201      	str	r2, [sp, #4]
 80098f0:	9a02      	ldr	r2, [sp, #8]
 80098f2:	9303      	str	r3, [sp, #12]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d80c      	bhi.n	8009912 <__multiply+0x9e>
 80098f8:	2e00      	cmp	r6, #0
 80098fa:	dd03      	ble.n	8009904 <__multiply+0x90>
 80098fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009900:	2b00      	cmp	r3, #0
 8009902:	d05a      	beq.n	80099ba <__multiply+0x146>
 8009904:	6106      	str	r6, [r0, #16]
 8009906:	b005      	add	sp, #20
 8009908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990c:	f843 2b04 	str.w	r2, [r3], #4
 8009910:	e7d8      	b.n	80098c4 <__multiply+0x50>
 8009912:	f8b3 a000 	ldrh.w	sl, [r3]
 8009916:	f1ba 0f00 	cmp.w	sl, #0
 800991a:	d024      	beq.n	8009966 <__multiply+0xf2>
 800991c:	f104 0e14 	add.w	lr, r4, #20
 8009920:	46a9      	mov	r9, r5
 8009922:	f04f 0c00 	mov.w	ip, #0
 8009926:	f85e 2b04 	ldr.w	r2, [lr], #4
 800992a:	f8d9 1000 	ldr.w	r1, [r9]
 800992e:	fa1f fb82 	uxth.w	fp, r2
 8009932:	b289      	uxth	r1, r1
 8009934:	fb0a 110b 	mla	r1, sl, fp, r1
 8009938:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800993c:	f8d9 2000 	ldr.w	r2, [r9]
 8009940:	4461      	add	r1, ip
 8009942:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009946:	fb0a c20b 	mla	r2, sl, fp, ip
 800994a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800994e:	b289      	uxth	r1, r1
 8009950:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009954:	4577      	cmp	r7, lr
 8009956:	f849 1b04 	str.w	r1, [r9], #4
 800995a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800995e:	d8e2      	bhi.n	8009926 <__multiply+0xb2>
 8009960:	9a01      	ldr	r2, [sp, #4]
 8009962:	f845 c002 	str.w	ip, [r5, r2]
 8009966:	9a03      	ldr	r2, [sp, #12]
 8009968:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800996c:	3304      	adds	r3, #4
 800996e:	f1b9 0f00 	cmp.w	r9, #0
 8009972:	d020      	beq.n	80099b6 <__multiply+0x142>
 8009974:	6829      	ldr	r1, [r5, #0]
 8009976:	f104 0c14 	add.w	ip, r4, #20
 800997a:	46ae      	mov	lr, r5
 800997c:	f04f 0a00 	mov.w	sl, #0
 8009980:	f8bc b000 	ldrh.w	fp, [ip]
 8009984:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009988:	fb09 220b 	mla	r2, r9, fp, r2
 800998c:	4492      	add	sl, r2
 800998e:	b289      	uxth	r1, r1
 8009990:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009994:	f84e 1b04 	str.w	r1, [lr], #4
 8009998:	f85c 2b04 	ldr.w	r2, [ip], #4
 800999c:	f8be 1000 	ldrh.w	r1, [lr]
 80099a0:	0c12      	lsrs	r2, r2, #16
 80099a2:	fb09 1102 	mla	r1, r9, r2, r1
 80099a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80099aa:	4567      	cmp	r7, ip
 80099ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099b0:	d8e6      	bhi.n	8009980 <__multiply+0x10c>
 80099b2:	9a01      	ldr	r2, [sp, #4]
 80099b4:	50a9      	str	r1, [r5, r2]
 80099b6:	3504      	adds	r5, #4
 80099b8:	e79a      	b.n	80098f0 <__multiply+0x7c>
 80099ba:	3e01      	subs	r6, #1
 80099bc:	e79c      	b.n	80098f8 <__multiply+0x84>
 80099be:	bf00      	nop
 80099c0:	0800a960 	.word	0x0800a960
 80099c4:	0800aa50 	.word	0x0800aa50

080099c8 <__pow5mult>:
 80099c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099cc:	4615      	mov	r5, r2
 80099ce:	f012 0203 	ands.w	r2, r2, #3
 80099d2:	4606      	mov	r6, r0
 80099d4:	460f      	mov	r7, r1
 80099d6:	d007      	beq.n	80099e8 <__pow5mult+0x20>
 80099d8:	4c25      	ldr	r4, [pc, #148]	; (8009a70 <__pow5mult+0xa8>)
 80099da:	3a01      	subs	r2, #1
 80099dc:	2300      	movs	r3, #0
 80099de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099e2:	f7ff fe51 	bl	8009688 <__multadd>
 80099e6:	4607      	mov	r7, r0
 80099e8:	10ad      	asrs	r5, r5, #2
 80099ea:	d03d      	beq.n	8009a68 <__pow5mult+0xa0>
 80099ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099ee:	b97c      	cbnz	r4, 8009a10 <__pow5mult+0x48>
 80099f0:	2010      	movs	r0, #16
 80099f2:	f7ff fda5 	bl	8009540 <malloc>
 80099f6:	4602      	mov	r2, r0
 80099f8:	6270      	str	r0, [r6, #36]	; 0x24
 80099fa:	b928      	cbnz	r0, 8009a08 <__pow5mult+0x40>
 80099fc:	4b1d      	ldr	r3, [pc, #116]	; (8009a74 <__pow5mult+0xac>)
 80099fe:	481e      	ldr	r0, [pc, #120]	; (8009a78 <__pow5mult+0xb0>)
 8009a00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a04:	f7fc f9c0 	bl	8005d88 <__assert_func>
 8009a08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a0c:	6004      	str	r4, [r0, #0]
 8009a0e:	60c4      	str	r4, [r0, #12]
 8009a10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a18:	b94c      	cbnz	r4, 8009a2e <__pow5mult+0x66>
 8009a1a:	f240 2171 	movw	r1, #625	; 0x271
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f7ff ff12 	bl	8009848 <__i2b>
 8009a24:	2300      	movs	r3, #0
 8009a26:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	6003      	str	r3, [r0, #0]
 8009a2e:	f04f 0900 	mov.w	r9, #0
 8009a32:	07eb      	lsls	r3, r5, #31
 8009a34:	d50a      	bpl.n	8009a4c <__pow5mult+0x84>
 8009a36:	4639      	mov	r1, r7
 8009a38:	4622      	mov	r2, r4
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f7ff ff1a 	bl	8009874 <__multiply>
 8009a40:	4639      	mov	r1, r7
 8009a42:	4680      	mov	r8, r0
 8009a44:	4630      	mov	r0, r6
 8009a46:	f7ff fdfd 	bl	8009644 <_Bfree>
 8009a4a:	4647      	mov	r7, r8
 8009a4c:	106d      	asrs	r5, r5, #1
 8009a4e:	d00b      	beq.n	8009a68 <__pow5mult+0xa0>
 8009a50:	6820      	ldr	r0, [r4, #0]
 8009a52:	b938      	cbnz	r0, 8009a64 <__pow5mult+0x9c>
 8009a54:	4622      	mov	r2, r4
 8009a56:	4621      	mov	r1, r4
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f7ff ff0b 	bl	8009874 <__multiply>
 8009a5e:	6020      	str	r0, [r4, #0]
 8009a60:	f8c0 9000 	str.w	r9, [r0]
 8009a64:	4604      	mov	r4, r0
 8009a66:	e7e4      	b.n	8009a32 <__pow5mult+0x6a>
 8009a68:	4638      	mov	r0, r7
 8009a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a6e:	bf00      	nop
 8009a70:	0800aba0 	.word	0x0800aba0
 8009a74:	0800a8ee 	.word	0x0800a8ee
 8009a78:	0800aa50 	.word	0x0800aa50

08009a7c <__lshift>:
 8009a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a80:	460c      	mov	r4, r1
 8009a82:	6849      	ldr	r1, [r1, #4]
 8009a84:	6923      	ldr	r3, [r4, #16]
 8009a86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a8a:	68a3      	ldr	r3, [r4, #8]
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	4691      	mov	r9, r2
 8009a90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a94:	f108 0601 	add.w	r6, r8, #1
 8009a98:	42b3      	cmp	r3, r6
 8009a9a:	db0b      	blt.n	8009ab4 <__lshift+0x38>
 8009a9c:	4638      	mov	r0, r7
 8009a9e:	f7ff fd91 	bl	80095c4 <_Balloc>
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	b948      	cbnz	r0, 8009aba <__lshift+0x3e>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	4b2a      	ldr	r3, [pc, #168]	; (8009b54 <__lshift+0xd8>)
 8009aaa:	482b      	ldr	r0, [pc, #172]	; (8009b58 <__lshift+0xdc>)
 8009aac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ab0:	f7fc f96a 	bl	8005d88 <__assert_func>
 8009ab4:	3101      	adds	r1, #1
 8009ab6:	005b      	lsls	r3, r3, #1
 8009ab8:	e7ee      	b.n	8009a98 <__lshift+0x1c>
 8009aba:	2300      	movs	r3, #0
 8009abc:	f100 0114 	add.w	r1, r0, #20
 8009ac0:	f100 0210 	add.w	r2, r0, #16
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	4553      	cmp	r3, sl
 8009ac8:	db37      	blt.n	8009b3a <__lshift+0xbe>
 8009aca:	6920      	ldr	r0, [r4, #16]
 8009acc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ad0:	f104 0314 	add.w	r3, r4, #20
 8009ad4:	f019 091f 	ands.w	r9, r9, #31
 8009ad8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009adc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ae0:	d02f      	beq.n	8009b42 <__lshift+0xc6>
 8009ae2:	f1c9 0e20 	rsb	lr, r9, #32
 8009ae6:	468a      	mov	sl, r1
 8009ae8:	f04f 0c00 	mov.w	ip, #0
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	fa02 f209 	lsl.w	r2, r2, r9
 8009af2:	ea42 020c 	orr.w	r2, r2, ip
 8009af6:	f84a 2b04 	str.w	r2, [sl], #4
 8009afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009afe:	4298      	cmp	r0, r3
 8009b00:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009b04:	d8f2      	bhi.n	8009aec <__lshift+0x70>
 8009b06:	1b03      	subs	r3, r0, r4
 8009b08:	3b15      	subs	r3, #21
 8009b0a:	f023 0303 	bic.w	r3, r3, #3
 8009b0e:	3304      	adds	r3, #4
 8009b10:	f104 0215 	add.w	r2, r4, #21
 8009b14:	4290      	cmp	r0, r2
 8009b16:	bf38      	it	cc
 8009b18:	2304      	movcc	r3, #4
 8009b1a:	f841 c003 	str.w	ip, [r1, r3]
 8009b1e:	f1bc 0f00 	cmp.w	ip, #0
 8009b22:	d001      	beq.n	8009b28 <__lshift+0xac>
 8009b24:	f108 0602 	add.w	r6, r8, #2
 8009b28:	3e01      	subs	r6, #1
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	612e      	str	r6, [r5, #16]
 8009b2e:	4621      	mov	r1, r4
 8009b30:	f7ff fd88 	bl	8009644 <_Bfree>
 8009b34:	4628      	mov	r0, r5
 8009b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b3e:	3301      	adds	r3, #1
 8009b40:	e7c1      	b.n	8009ac6 <__lshift+0x4a>
 8009b42:	3904      	subs	r1, #4
 8009b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b48:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b4c:	4298      	cmp	r0, r3
 8009b4e:	d8f9      	bhi.n	8009b44 <__lshift+0xc8>
 8009b50:	e7ea      	b.n	8009b28 <__lshift+0xac>
 8009b52:	bf00      	nop
 8009b54:	0800a960 	.word	0x0800a960
 8009b58:	0800aa50 	.word	0x0800aa50

08009b5c <__mcmp>:
 8009b5c:	b530      	push	{r4, r5, lr}
 8009b5e:	6902      	ldr	r2, [r0, #16]
 8009b60:	690c      	ldr	r4, [r1, #16]
 8009b62:	1b12      	subs	r2, r2, r4
 8009b64:	d10e      	bne.n	8009b84 <__mcmp+0x28>
 8009b66:	f100 0314 	add.w	r3, r0, #20
 8009b6a:	3114      	adds	r1, #20
 8009b6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b7c:	42a5      	cmp	r5, r4
 8009b7e:	d003      	beq.n	8009b88 <__mcmp+0x2c>
 8009b80:	d305      	bcc.n	8009b8e <__mcmp+0x32>
 8009b82:	2201      	movs	r2, #1
 8009b84:	4610      	mov	r0, r2
 8009b86:	bd30      	pop	{r4, r5, pc}
 8009b88:	4283      	cmp	r3, r0
 8009b8a:	d3f3      	bcc.n	8009b74 <__mcmp+0x18>
 8009b8c:	e7fa      	b.n	8009b84 <__mcmp+0x28>
 8009b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b92:	e7f7      	b.n	8009b84 <__mcmp+0x28>

08009b94 <__mdiff>:
 8009b94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b98:	460c      	mov	r4, r1
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	4690      	mov	r8, r2
 8009ba2:	f7ff ffdb 	bl	8009b5c <__mcmp>
 8009ba6:	1e05      	subs	r5, r0, #0
 8009ba8:	d110      	bne.n	8009bcc <__mdiff+0x38>
 8009baa:	4629      	mov	r1, r5
 8009bac:	4630      	mov	r0, r6
 8009bae:	f7ff fd09 	bl	80095c4 <_Balloc>
 8009bb2:	b930      	cbnz	r0, 8009bc2 <__mdiff+0x2e>
 8009bb4:	4b3a      	ldr	r3, [pc, #232]	; (8009ca0 <__mdiff+0x10c>)
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	f240 2132 	movw	r1, #562	; 0x232
 8009bbc:	4839      	ldr	r0, [pc, #228]	; (8009ca4 <__mdiff+0x110>)
 8009bbe:	f7fc f8e3 	bl	8005d88 <__assert_func>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bcc:	bfa4      	itt	ge
 8009bce:	4643      	movge	r3, r8
 8009bd0:	46a0      	movge	r8, r4
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009bd8:	bfa6      	itte	ge
 8009bda:	461c      	movge	r4, r3
 8009bdc:	2500      	movge	r5, #0
 8009bde:	2501      	movlt	r5, #1
 8009be0:	f7ff fcf0 	bl	80095c4 <_Balloc>
 8009be4:	b920      	cbnz	r0, 8009bf0 <__mdiff+0x5c>
 8009be6:	4b2e      	ldr	r3, [pc, #184]	; (8009ca0 <__mdiff+0x10c>)
 8009be8:	4602      	mov	r2, r0
 8009bea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009bee:	e7e5      	b.n	8009bbc <__mdiff+0x28>
 8009bf0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bf4:	6926      	ldr	r6, [r4, #16]
 8009bf6:	60c5      	str	r5, [r0, #12]
 8009bf8:	f104 0914 	add.w	r9, r4, #20
 8009bfc:	f108 0514 	add.w	r5, r8, #20
 8009c00:	f100 0e14 	add.w	lr, r0, #20
 8009c04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c0c:	f108 0210 	add.w	r2, r8, #16
 8009c10:	46f2      	mov	sl, lr
 8009c12:	2100      	movs	r1, #0
 8009c14:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c1c:	fa1f f883 	uxth.w	r8, r3
 8009c20:	fa11 f18b 	uxtah	r1, r1, fp
 8009c24:	0c1b      	lsrs	r3, r3, #16
 8009c26:	eba1 0808 	sub.w	r8, r1, r8
 8009c2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c32:	fa1f f888 	uxth.w	r8, r8
 8009c36:	1419      	asrs	r1, r3, #16
 8009c38:	454e      	cmp	r6, r9
 8009c3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c3e:	f84a 3b04 	str.w	r3, [sl], #4
 8009c42:	d8e7      	bhi.n	8009c14 <__mdiff+0x80>
 8009c44:	1b33      	subs	r3, r6, r4
 8009c46:	3b15      	subs	r3, #21
 8009c48:	f023 0303 	bic.w	r3, r3, #3
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	3415      	adds	r4, #21
 8009c50:	42a6      	cmp	r6, r4
 8009c52:	bf38      	it	cc
 8009c54:	2304      	movcc	r3, #4
 8009c56:	441d      	add	r5, r3
 8009c58:	4473      	add	r3, lr
 8009c5a:	469e      	mov	lr, r3
 8009c5c:	462e      	mov	r6, r5
 8009c5e:	4566      	cmp	r6, ip
 8009c60:	d30e      	bcc.n	8009c80 <__mdiff+0xec>
 8009c62:	f10c 0203 	add.w	r2, ip, #3
 8009c66:	1b52      	subs	r2, r2, r5
 8009c68:	f022 0203 	bic.w	r2, r2, #3
 8009c6c:	3d03      	subs	r5, #3
 8009c6e:	45ac      	cmp	ip, r5
 8009c70:	bf38      	it	cc
 8009c72:	2200      	movcc	r2, #0
 8009c74:	441a      	add	r2, r3
 8009c76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c7a:	b17b      	cbz	r3, 8009c9c <__mdiff+0x108>
 8009c7c:	6107      	str	r7, [r0, #16]
 8009c7e:	e7a3      	b.n	8009bc8 <__mdiff+0x34>
 8009c80:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c84:	fa11 f288 	uxtah	r2, r1, r8
 8009c88:	1414      	asrs	r4, r2, #16
 8009c8a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c8e:	b292      	uxth	r2, r2
 8009c90:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c94:	f84e 2b04 	str.w	r2, [lr], #4
 8009c98:	1421      	asrs	r1, r4, #16
 8009c9a:	e7e0      	b.n	8009c5e <__mdiff+0xca>
 8009c9c:	3f01      	subs	r7, #1
 8009c9e:	e7ea      	b.n	8009c76 <__mdiff+0xe2>
 8009ca0:	0800a960 	.word	0x0800a960
 8009ca4:	0800aa50 	.word	0x0800aa50

08009ca8 <__ulp>:
 8009ca8:	b082      	sub	sp, #8
 8009caa:	ed8d 0b00 	vstr	d0, [sp]
 8009cae:	9b01      	ldr	r3, [sp, #4]
 8009cb0:	4912      	ldr	r1, [pc, #72]	; (8009cfc <__ulp+0x54>)
 8009cb2:	4019      	ands	r1, r3
 8009cb4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009cb8:	2900      	cmp	r1, #0
 8009cba:	dd05      	ble.n	8009cc8 <__ulp+0x20>
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	ec43 2b10 	vmov	d0, r2, r3
 8009cc4:	b002      	add	sp, #8
 8009cc6:	4770      	bx	lr
 8009cc8:	4249      	negs	r1, r1
 8009cca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009cce:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009cd2:	f04f 0200 	mov.w	r2, #0
 8009cd6:	f04f 0300 	mov.w	r3, #0
 8009cda:	da04      	bge.n	8009ce6 <__ulp+0x3e>
 8009cdc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009ce0:	fa41 f300 	asr.w	r3, r1, r0
 8009ce4:	e7ec      	b.n	8009cc0 <__ulp+0x18>
 8009ce6:	f1a0 0114 	sub.w	r1, r0, #20
 8009cea:	291e      	cmp	r1, #30
 8009cec:	bfda      	itte	le
 8009cee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009cf2:	fa20 f101 	lsrle.w	r1, r0, r1
 8009cf6:	2101      	movgt	r1, #1
 8009cf8:	460a      	mov	r2, r1
 8009cfa:	e7e1      	b.n	8009cc0 <__ulp+0x18>
 8009cfc:	7ff00000 	.word	0x7ff00000

08009d00 <__b2d>:
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d02:	6905      	ldr	r5, [r0, #16]
 8009d04:	f100 0714 	add.w	r7, r0, #20
 8009d08:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009d0c:	1f2e      	subs	r6, r5, #4
 8009d0e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009d12:	4620      	mov	r0, r4
 8009d14:	f7ff fd48 	bl	80097a8 <__hi0bits>
 8009d18:	f1c0 0320 	rsb	r3, r0, #32
 8009d1c:	280a      	cmp	r0, #10
 8009d1e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009d9c <__b2d+0x9c>
 8009d22:	600b      	str	r3, [r1, #0]
 8009d24:	dc14      	bgt.n	8009d50 <__b2d+0x50>
 8009d26:	f1c0 0e0b 	rsb	lr, r0, #11
 8009d2a:	fa24 f10e 	lsr.w	r1, r4, lr
 8009d2e:	42b7      	cmp	r7, r6
 8009d30:	ea41 030c 	orr.w	r3, r1, ip
 8009d34:	bf34      	ite	cc
 8009d36:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d3a:	2100      	movcs	r1, #0
 8009d3c:	3015      	adds	r0, #21
 8009d3e:	fa04 f000 	lsl.w	r0, r4, r0
 8009d42:	fa21 f10e 	lsr.w	r1, r1, lr
 8009d46:	ea40 0201 	orr.w	r2, r0, r1
 8009d4a:	ec43 2b10 	vmov	d0, r2, r3
 8009d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d50:	42b7      	cmp	r7, r6
 8009d52:	bf3a      	itte	cc
 8009d54:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d58:	f1a5 0608 	subcc.w	r6, r5, #8
 8009d5c:	2100      	movcs	r1, #0
 8009d5e:	380b      	subs	r0, #11
 8009d60:	d017      	beq.n	8009d92 <__b2d+0x92>
 8009d62:	f1c0 0c20 	rsb	ip, r0, #32
 8009d66:	fa04 f500 	lsl.w	r5, r4, r0
 8009d6a:	42be      	cmp	r6, r7
 8009d6c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009d70:	ea45 0504 	orr.w	r5, r5, r4
 8009d74:	bf8c      	ite	hi
 8009d76:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009d7a:	2400      	movls	r4, #0
 8009d7c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009d80:	fa01 f000 	lsl.w	r0, r1, r0
 8009d84:	fa24 f40c 	lsr.w	r4, r4, ip
 8009d88:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009d8c:	ea40 0204 	orr.w	r2, r0, r4
 8009d90:	e7db      	b.n	8009d4a <__b2d+0x4a>
 8009d92:	ea44 030c 	orr.w	r3, r4, ip
 8009d96:	460a      	mov	r2, r1
 8009d98:	e7d7      	b.n	8009d4a <__b2d+0x4a>
 8009d9a:	bf00      	nop
 8009d9c:	3ff00000 	.word	0x3ff00000

08009da0 <__d2b>:
 8009da0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009da4:	4689      	mov	r9, r1
 8009da6:	2101      	movs	r1, #1
 8009da8:	ec57 6b10 	vmov	r6, r7, d0
 8009dac:	4690      	mov	r8, r2
 8009dae:	f7ff fc09 	bl	80095c4 <_Balloc>
 8009db2:	4604      	mov	r4, r0
 8009db4:	b930      	cbnz	r0, 8009dc4 <__d2b+0x24>
 8009db6:	4602      	mov	r2, r0
 8009db8:	4b25      	ldr	r3, [pc, #148]	; (8009e50 <__d2b+0xb0>)
 8009dba:	4826      	ldr	r0, [pc, #152]	; (8009e54 <__d2b+0xb4>)
 8009dbc:	f240 310a 	movw	r1, #778	; 0x30a
 8009dc0:	f7fb ffe2 	bl	8005d88 <__assert_func>
 8009dc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009dc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009dcc:	bb35      	cbnz	r5, 8009e1c <__d2b+0x7c>
 8009dce:	2e00      	cmp	r6, #0
 8009dd0:	9301      	str	r3, [sp, #4]
 8009dd2:	d028      	beq.n	8009e26 <__d2b+0x86>
 8009dd4:	4668      	mov	r0, sp
 8009dd6:	9600      	str	r6, [sp, #0]
 8009dd8:	f7ff fd06 	bl	80097e8 <__lo0bits>
 8009ddc:	9900      	ldr	r1, [sp, #0]
 8009dde:	b300      	cbz	r0, 8009e22 <__d2b+0x82>
 8009de0:	9a01      	ldr	r2, [sp, #4]
 8009de2:	f1c0 0320 	rsb	r3, r0, #32
 8009de6:	fa02 f303 	lsl.w	r3, r2, r3
 8009dea:	430b      	orrs	r3, r1
 8009dec:	40c2      	lsrs	r2, r0
 8009dee:	6163      	str	r3, [r4, #20]
 8009df0:	9201      	str	r2, [sp, #4]
 8009df2:	9b01      	ldr	r3, [sp, #4]
 8009df4:	61a3      	str	r3, [r4, #24]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	bf14      	ite	ne
 8009dfa:	2202      	movne	r2, #2
 8009dfc:	2201      	moveq	r2, #1
 8009dfe:	6122      	str	r2, [r4, #16]
 8009e00:	b1d5      	cbz	r5, 8009e38 <__d2b+0x98>
 8009e02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e06:	4405      	add	r5, r0
 8009e08:	f8c9 5000 	str.w	r5, [r9]
 8009e0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e10:	f8c8 0000 	str.w	r0, [r8]
 8009e14:	4620      	mov	r0, r4
 8009e16:	b003      	add	sp, #12
 8009e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e20:	e7d5      	b.n	8009dce <__d2b+0x2e>
 8009e22:	6161      	str	r1, [r4, #20]
 8009e24:	e7e5      	b.n	8009df2 <__d2b+0x52>
 8009e26:	a801      	add	r0, sp, #4
 8009e28:	f7ff fcde 	bl	80097e8 <__lo0bits>
 8009e2c:	9b01      	ldr	r3, [sp, #4]
 8009e2e:	6163      	str	r3, [r4, #20]
 8009e30:	2201      	movs	r2, #1
 8009e32:	6122      	str	r2, [r4, #16]
 8009e34:	3020      	adds	r0, #32
 8009e36:	e7e3      	b.n	8009e00 <__d2b+0x60>
 8009e38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e40:	f8c9 0000 	str.w	r0, [r9]
 8009e44:	6918      	ldr	r0, [r3, #16]
 8009e46:	f7ff fcaf 	bl	80097a8 <__hi0bits>
 8009e4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e4e:	e7df      	b.n	8009e10 <__d2b+0x70>
 8009e50:	0800a960 	.word	0x0800a960
 8009e54:	0800aa50 	.word	0x0800aa50

08009e58 <__ratio>:
 8009e58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5c:	4688      	mov	r8, r1
 8009e5e:	4669      	mov	r1, sp
 8009e60:	4681      	mov	r9, r0
 8009e62:	f7ff ff4d 	bl	8009d00 <__b2d>
 8009e66:	a901      	add	r1, sp, #4
 8009e68:	4640      	mov	r0, r8
 8009e6a:	ec55 4b10 	vmov	r4, r5, d0
 8009e6e:	f7ff ff47 	bl	8009d00 <__b2d>
 8009e72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e76:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009e7a:	eba3 0c02 	sub.w	ip, r3, r2
 8009e7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e82:	1a9b      	subs	r3, r3, r2
 8009e84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009e88:	ec51 0b10 	vmov	r0, r1, d0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	bfd6      	itet	le
 8009e90:	460a      	movle	r2, r1
 8009e92:	462a      	movgt	r2, r5
 8009e94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e98:	468b      	mov	fp, r1
 8009e9a:	462f      	mov	r7, r5
 8009e9c:	bfd4      	ite	le
 8009e9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009ea2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	ee10 2a10 	vmov	r2, s0
 8009eac:	465b      	mov	r3, fp
 8009eae:	4639      	mov	r1, r7
 8009eb0:	f7f6 fcac 	bl	800080c <__aeabi_ddiv>
 8009eb4:	ec41 0b10 	vmov	d0, r0, r1
 8009eb8:	b003      	add	sp, #12
 8009eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ebe <__copybits>:
 8009ebe:	3901      	subs	r1, #1
 8009ec0:	b570      	push	{r4, r5, r6, lr}
 8009ec2:	1149      	asrs	r1, r1, #5
 8009ec4:	6914      	ldr	r4, [r2, #16]
 8009ec6:	3101      	adds	r1, #1
 8009ec8:	f102 0314 	add.w	r3, r2, #20
 8009ecc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ed0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ed4:	1f05      	subs	r5, r0, #4
 8009ed6:	42a3      	cmp	r3, r4
 8009ed8:	d30c      	bcc.n	8009ef4 <__copybits+0x36>
 8009eda:	1aa3      	subs	r3, r4, r2
 8009edc:	3b11      	subs	r3, #17
 8009ede:	f023 0303 	bic.w	r3, r3, #3
 8009ee2:	3211      	adds	r2, #17
 8009ee4:	42a2      	cmp	r2, r4
 8009ee6:	bf88      	it	hi
 8009ee8:	2300      	movhi	r3, #0
 8009eea:	4418      	add	r0, r3
 8009eec:	2300      	movs	r3, #0
 8009eee:	4288      	cmp	r0, r1
 8009ef0:	d305      	bcc.n	8009efe <__copybits+0x40>
 8009ef2:	bd70      	pop	{r4, r5, r6, pc}
 8009ef4:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ef8:	f845 6f04 	str.w	r6, [r5, #4]!
 8009efc:	e7eb      	b.n	8009ed6 <__copybits+0x18>
 8009efe:	f840 3b04 	str.w	r3, [r0], #4
 8009f02:	e7f4      	b.n	8009eee <__copybits+0x30>

08009f04 <__any_on>:
 8009f04:	f100 0214 	add.w	r2, r0, #20
 8009f08:	6900      	ldr	r0, [r0, #16]
 8009f0a:	114b      	asrs	r3, r1, #5
 8009f0c:	4298      	cmp	r0, r3
 8009f0e:	b510      	push	{r4, lr}
 8009f10:	db11      	blt.n	8009f36 <__any_on+0x32>
 8009f12:	dd0a      	ble.n	8009f2a <__any_on+0x26>
 8009f14:	f011 011f 	ands.w	r1, r1, #31
 8009f18:	d007      	beq.n	8009f2a <__any_on+0x26>
 8009f1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f1e:	fa24 f001 	lsr.w	r0, r4, r1
 8009f22:	fa00 f101 	lsl.w	r1, r0, r1
 8009f26:	428c      	cmp	r4, r1
 8009f28:	d10b      	bne.n	8009f42 <__any_on+0x3e>
 8009f2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d803      	bhi.n	8009f3a <__any_on+0x36>
 8009f32:	2000      	movs	r0, #0
 8009f34:	bd10      	pop	{r4, pc}
 8009f36:	4603      	mov	r3, r0
 8009f38:	e7f7      	b.n	8009f2a <__any_on+0x26>
 8009f3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f3e:	2900      	cmp	r1, #0
 8009f40:	d0f5      	beq.n	8009f2e <__any_on+0x2a>
 8009f42:	2001      	movs	r0, #1
 8009f44:	e7f6      	b.n	8009f34 <__any_on+0x30>

08009f46 <_calloc_r>:
 8009f46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f48:	fba1 2402 	umull	r2, r4, r1, r2
 8009f4c:	b94c      	cbnz	r4, 8009f62 <_calloc_r+0x1c>
 8009f4e:	4611      	mov	r1, r2
 8009f50:	9201      	str	r2, [sp, #4]
 8009f52:	f000 f87b 	bl	800a04c <_malloc_r>
 8009f56:	9a01      	ldr	r2, [sp, #4]
 8009f58:	4605      	mov	r5, r0
 8009f5a:	b930      	cbnz	r0, 8009f6a <_calloc_r+0x24>
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	b003      	add	sp, #12
 8009f60:	bd30      	pop	{r4, r5, pc}
 8009f62:	220c      	movs	r2, #12
 8009f64:	6002      	str	r2, [r0, #0]
 8009f66:	2500      	movs	r5, #0
 8009f68:	e7f8      	b.n	8009f5c <_calloc_r+0x16>
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	f7fb ff66 	bl	8005e3c <memset>
 8009f70:	e7f4      	b.n	8009f5c <_calloc_r+0x16>
	...

08009f74 <_free_r>:
 8009f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f76:	2900      	cmp	r1, #0
 8009f78:	d044      	beq.n	800a004 <_free_r+0x90>
 8009f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f7e:	9001      	str	r0, [sp, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f1a1 0404 	sub.w	r4, r1, #4
 8009f86:	bfb8      	it	lt
 8009f88:	18e4      	addlt	r4, r4, r3
 8009f8a:	f000 fb73 	bl	800a674 <__malloc_lock>
 8009f8e:	4a1e      	ldr	r2, [pc, #120]	; (800a008 <_free_r+0x94>)
 8009f90:	9801      	ldr	r0, [sp, #4]
 8009f92:	6813      	ldr	r3, [r2, #0]
 8009f94:	b933      	cbnz	r3, 8009fa4 <_free_r+0x30>
 8009f96:	6063      	str	r3, [r4, #4]
 8009f98:	6014      	str	r4, [r2, #0]
 8009f9a:	b003      	add	sp, #12
 8009f9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fa0:	f000 bb6e 	b.w	800a680 <__malloc_unlock>
 8009fa4:	42a3      	cmp	r3, r4
 8009fa6:	d908      	bls.n	8009fba <_free_r+0x46>
 8009fa8:	6825      	ldr	r5, [r4, #0]
 8009faa:	1961      	adds	r1, r4, r5
 8009fac:	428b      	cmp	r3, r1
 8009fae:	bf01      	itttt	eq
 8009fb0:	6819      	ldreq	r1, [r3, #0]
 8009fb2:	685b      	ldreq	r3, [r3, #4]
 8009fb4:	1949      	addeq	r1, r1, r5
 8009fb6:	6021      	streq	r1, [r4, #0]
 8009fb8:	e7ed      	b.n	8009f96 <_free_r+0x22>
 8009fba:	461a      	mov	r2, r3
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	b10b      	cbz	r3, 8009fc4 <_free_r+0x50>
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	d9fa      	bls.n	8009fba <_free_r+0x46>
 8009fc4:	6811      	ldr	r1, [r2, #0]
 8009fc6:	1855      	adds	r5, r2, r1
 8009fc8:	42a5      	cmp	r5, r4
 8009fca:	d10b      	bne.n	8009fe4 <_free_r+0x70>
 8009fcc:	6824      	ldr	r4, [r4, #0]
 8009fce:	4421      	add	r1, r4
 8009fd0:	1854      	adds	r4, r2, r1
 8009fd2:	42a3      	cmp	r3, r4
 8009fd4:	6011      	str	r1, [r2, #0]
 8009fd6:	d1e0      	bne.n	8009f9a <_free_r+0x26>
 8009fd8:	681c      	ldr	r4, [r3, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	6053      	str	r3, [r2, #4]
 8009fde:	4421      	add	r1, r4
 8009fe0:	6011      	str	r1, [r2, #0]
 8009fe2:	e7da      	b.n	8009f9a <_free_r+0x26>
 8009fe4:	d902      	bls.n	8009fec <_free_r+0x78>
 8009fe6:	230c      	movs	r3, #12
 8009fe8:	6003      	str	r3, [r0, #0]
 8009fea:	e7d6      	b.n	8009f9a <_free_r+0x26>
 8009fec:	6825      	ldr	r5, [r4, #0]
 8009fee:	1961      	adds	r1, r4, r5
 8009ff0:	428b      	cmp	r3, r1
 8009ff2:	bf04      	itt	eq
 8009ff4:	6819      	ldreq	r1, [r3, #0]
 8009ff6:	685b      	ldreq	r3, [r3, #4]
 8009ff8:	6063      	str	r3, [r4, #4]
 8009ffa:	bf04      	itt	eq
 8009ffc:	1949      	addeq	r1, r1, r5
 8009ffe:	6021      	streq	r1, [r4, #0]
 800a000:	6054      	str	r4, [r2, #4]
 800a002:	e7ca      	b.n	8009f9a <_free_r+0x26>
 800a004:	b003      	add	sp, #12
 800a006:	bd30      	pop	{r4, r5, pc}
 800a008:	20002330 	.word	0x20002330

0800a00c <sbrk_aligned>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	4e0e      	ldr	r6, [pc, #56]	; (800a048 <sbrk_aligned+0x3c>)
 800a010:	460c      	mov	r4, r1
 800a012:	6831      	ldr	r1, [r6, #0]
 800a014:	4605      	mov	r5, r0
 800a016:	b911      	cbnz	r1, 800a01e <sbrk_aligned+0x12>
 800a018:	f000 fa1e 	bl	800a458 <_sbrk_r>
 800a01c:	6030      	str	r0, [r6, #0]
 800a01e:	4621      	mov	r1, r4
 800a020:	4628      	mov	r0, r5
 800a022:	f000 fa19 	bl	800a458 <_sbrk_r>
 800a026:	1c43      	adds	r3, r0, #1
 800a028:	d00a      	beq.n	800a040 <sbrk_aligned+0x34>
 800a02a:	1cc4      	adds	r4, r0, #3
 800a02c:	f024 0403 	bic.w	r4, r4, #3
 800a030:	42a0      	cmp	r0, r4
 800a032:	d007      	beq.n	800a044 <sbrk_aligned+0x38>
 800a034:	1a21      	subs	r1, r4, r0
 800a036:	4628      	mov	r0, r5
 800a038:	f000 fa0e 	bl	800a458 <_sbrk_r>
 800a03c:	3001      	adds	r0, #1
 800a03e:	d101      	bne.n	800a044 <sbrk_aligned+0x38>
 800a040:	f04f 34ff 	mov.w	r4, #4294967295
 800a044:	4620      	mov	r0, r4
 800a046:	bd70      	pop	{r4, r5, r6, pc}
 800a048:	20002334 	.word	0x20002334

0800a04c <_malloc_r>:
 800a04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a050:	1ccd      	adds	r5, r1, #3
 800a052:	f025 0503 	bic.w	r5, r5, #3
 800a056:	3508      	adds	r5, #8
 800a058:	2d0c      	cmp	r5, #12
 800a05a:	bf38      	it	cc
 800a05c:	250c      	movcc	r5, #12
 800a05e:	2d00      	cmp	r5, #0
 800a060:	4607      	mov	r7, r0
 800a062:	db01      	blt.n	800a068 <_malloc_r+0x1c>
 800a064:	42a9      	cmp	r1, r5
 800a066:	d905      	bls.n	800a074 <_malloc_r+0x28>
 800a068:	230c      	movs	r3, #12
 800a06a:	603b      	str	r3, [r7, #0]
 800a06c:	2600      	movs	r6, #0
 800a06e:	4630      	mov	r0, r6
 800a070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a074:	4e2e      	ldr	r6, [pc, #184]	; (800a130 <_malloc_r+0xe4>)
 800a076:	f000 fafd 	bl	800a674 <__malloc_lock>
 800a07a:	6833      	ldr	r3, [r6, #0]
 800a07c:	461c      	mov	r4, r3
 800a07e:	bb34      	cbnz	r4, 800a0ce <_malloc_r+0x82>
 800a080:	4629      	mov	r1, r5
 800a082:	4638      	mov	r0, r7
 800a084:	f7ff ffc2 	bl	800a00c <sbrk_aligned>
 800a088:	1c43      	adds	r3, r0, #1
 800a08a:	4604      	mov	r4, r0
 800a08c:	d14d      	bne.n	800a12a <_malloc_r+0xde>
 800a08e:	6834      	ldr	r4, [r6, #0]
 800a090:	4626      	mov	r6, r4
 800a092:	2e00      	cmp	r6, #0
 800a094:	d140      	bne.n	800a118 <_malloc_r+0xcc>
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	4631      	mov	r1, r6
 800a09a:	4638      	mov	r0, r7
 800a09c:	eb04 0803 	add.w	r8, r4, r3
 800a0a0:	f000 f9da 	bl	800a458 <_sbrk_r>
 800a0a4:	4580      	cmp	r8, r0
 800a0a6:	d13a      	bne.n	800a11e <_malloc_r+0xd2>
 800a0a8:	6821      	ldr	r1, [r4, #0]
 800a0aa:	3503      	adds	r5, #3
 800a0ac:	1a6d      	subs	r5, r5, r1
 800a0ae:	f025 0503 	bic.w	r5, r5, #3
 800a0b2:	3508      	adds	r5, #8
 800a0b4:	2d0c      	cmp	r5, #12
 800a0b6:	bf38      	it	cc
 800a0b8:	250c      	movcc	r5, #12
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	4638      	mov	r0, r7
 800a0be:	f7ff ffa5 	bl	800a00c <sbrk_aligned>
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	d02b      	beq.n	800a11e <_malloc_r+0xd2>
 800a0c6:	6823      	ldr	r3, [r4, #0]
 800a0c8:	442b      	add	r3, r5
 800a0ca:	6023      	str	r3, [r4, #0]
 800a0cc:	e00e      	b.n	800a0ec <_malloc_r+0xa0>
 800a0ce:	6822      	ldr	r2, [r4, #0]
 800a0d0:	1b52      	subs	r2, r2, r5
 800a0d2:	d41e      	bmi.n	800a112 <_malloc_r+0xc6>
 800a0d4:	2a0b      	cmp	r2, #11
 800a0d6:	d916      	bls.n	800a106 <_malloc_r+0xba>
 800a0d8:	1961      	adds	r1, r4, r5
 800a0da:	42a3      	cmp	r3, r4
 800a0dc:	6025      	str	r5, [r4, #0]
 800a0de:	bf18      	it	ne
 800a0e0:	6059      	strne	r1, [r3, #4]
 800a0e2:	6863      	ldr	r3, [r4, #4]
 800a0e4:	bf08      	it	eq
 800a0e6:	6031      	streq	r1, [r6, #0]
 800a0e8:	5162      	str	r2, [r4, r5]
 800a0ea:	604b      	str	r3, [r1, #4]
 800a0ec:	4638      	mov	r0, r7
 800a0ee:	f104 060b 	add.w	r6, r4, #11
 800a0f2:	f000 fac5 	bl	800a680 <__malloc_unlock>
 800a0f6:	f026 0607 	bic.w	r6, r6, #7
 800a0fa:	1d23      	adds	r3, r4, #4
 800a0fc:	1af2      	subs	r2, r6, r3
 800a0fe:	d0b6      	beq.n	800a06e <_malloc_r+0x22>
 800a100:	1b9b      	subs	r3, r3, r6
 800a102:	50a3      	str	r3, [r4, r2]
 800a104:	e7b3      	b.n	800a06e <_malloc_r+0x22>
 800a106:	6862      	ldr	r2, [r4, #4]
 800a108:	42a3      	cmp	r3, r4
 800a10a:	bf0c      	ite	eq
 800a10c:	6032      	streq	r2, [r6, #0]
 800a10e:	605a      	strne	r2, [r3, #4]
 800a110:	e7ec      	b.n	800a0ec <_malloc_r+0xa0>
 800a112:	4623      	mov	r3, r4
 800a114:	6864      	ldr	r4, [r4, #4]
 800a116:	e7b2      	b.n	800a07e <_malloc_r+0x32>
 800a118:	4634      	mov	r4, r6
 800a11a:	6876      	ldr	r6, [r6, #4]
 800a11c:	e7b9      	b.n	800a092 <_malloc_r+0x46>
 800a11e:	230c      	movs	r3, #12
 800a120:	603b      	str	r3, [r7, #0]
 800a122:	4638      	mov	r0, r7
 800a124:	f000 faac 	bl	800a680 <__malloc_unlock>
 800a128:	e7a1      	b.n	800a06e <_malloc_r+0x22>
 800a12a:	6025      	str	r5, [r4, #0]
 800a12c:	e7de      	b.n	800a0ec <_malloc_r+0xa0>
 800a12e:	bf00      	nop
 800a130:	20002330 	.word	0x20002330

0800a134 <_realloc_r>:
 800a134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a138:	4680      	mov	r8, r0
 800a13a:	4614      	mov	r4, r2
 800a13c:	460e      	mov	r6, r1
 800a13e:	b921      	cbnz	r1, 800a14a <_realloc_r+0x16>
 800a140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a144:	4611      	mov	r1, r2
 800a146:	f7ff bf81 	b.w	800a04c <_malloc_r>
 800a14a:	b92a      	cbnz	r2, 800a158 <_realloc_r+0x24>
 800a14c:	f7ff ff12 	bl	8009f74 <_free_r>
 800a150:	4625      	mov	r5, r4
 800a152:	4628      	mov	r0, r5
 800a154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a158:	f000 fa98 	bl	800a68c <_malloc_usable_size_r>
 800a15c:	4284      	cmp	r4, r0
 800a15e:	4607      	mov	r7, r0
 800a160:	d802      	bhi.n	800a168 <_realloc_r+0x34>
 800a162:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a166:	d812      	bhi.n	800a18e <_realloc_r+0x5a>
 800a168:	4621      	mov	r1, r4
 800a16a:	4640      	mov	r0, r8
 800a16c:	f7ff ff6e 	bl	800a04c <_malloc_r>
 800a170:	4605      	mov	r5, r0
 800a172:	2800      	cmp	r0, #0
 800a174:	d0ed      	beq.n	800a152 <_realloc_r+0x1e>
 800a176:	42bc      	cmp	r4, r7
 800a178:	4622      	mov	r2, r4
 800a17a:	4631      	mov	r1, r6
 800a17c:	bf28      	it	cs
 800a17e:	463a      	movcs	r2, r7
 800a180:	f7ff f9f8 	bl	8009574 <memcpy>
 800a184:	4631      	mov	r1, r6
 800a186:	4640      	mov	r0, r8
 800a188:	f7ff fef4 	bl	8009f74 <_free_r>
 800a18c:	e7e1      	b.n	800a152 <_realloc_r+0x1e>
 800a18e:	4635      	mov	r5, r6
 800a190:	e7df      	b.n	800a152 <_realloc_r+0x1e>

0800a192 <__ssputs_r>:
 800a192:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a196:	688e      	ldr	r6, [r1, #8]
 800a198:	429e      	cmp	r6, r3
 800a19a:	4682      	mov	sl, r0
 800a19c:	460c      	mov	r4, r1
 800a19e:	4690      	mov	r8, r2
 800a1a0:	461f      	mov	r7, r3
 800a1a2:	d838      	bhi.n	800a216 <__ssputs_r+0x84>
 800a1a4:	898a      	ldrh	r2, [r1, #12]
 800a1a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1aa:	d032      	beq.n	800a212 <__ssputs_r+0x80>
 800a1ac:	6825      	ldr	r5, [r4, #0]
 800a1ae:	6909      	ldr	r1, [r1, #16]
 800a1b0:	eba5 0901 	sub.w	r9, r5, r1
 800a1b4:	6965      	ldr	r5, [r4, #20]
 800a1b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1be:	3301      	adds	r3, #1
 800a1c0:	444b      	add	r3, r9
 800a1c2:	106d      	asrs	r5, r5, #1
 800a1c4:	429d      	cmp	r5, r3
 800a1c6:	bf38      	it	cc
 800a1c8:	461d      	movcc	r5, r3
 800a1ca:	0553      	lsls	r3, r2, #21
 800a1cc:	d531      	bpl.n	800a232 <__ssputs_r+0xa0>
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	f7ff ff3c 	bl	800a04c <_malloc_r>
 800a1d4:	4606      	mov	r6, r0
 800a1d6:	b950      	cbnz	r0, 800a1ee <__ssputs_r+0x5c>
 800a1d8:	230c      	movs	r3, #12
 800a1da:	f8ca 3000 	str.w	r3, [sl]
 800a1de:	89a3      	ldrh	r3, [r4, #12]
 800a1e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1e4:	81a3      	strh	r3, [r4, #12]
 800a1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ee:	6921      	ldr	r1, [r4, #16]
 800a1f0:	464a      	mov	r2, r9
 800a1f2:	f7ff f9bf 	bl	8009574 <memcpy>
 800a1f6:	89a3      	ldrh	r3, [r4, #12]
 800a1f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a200:	81a3      	strh	r3, [r4, #12]
 800a202:	6126      	str	r6, [r4, #16]
 800a204:	6165      	str	r5, [r4, #20]
 800a206:	444e      	add	r6, r9
 800a208:	eba5 0509 	sub.w	r5, r5, r9
 800a20c:	6026      	str	r6, [r4, #0]
 800a20e:	60a5      	str	r5, [r4, #8]
 800a210:	463e      	mov	r6, r7
 800a212:	42be      	cmp	r6, r7
 800a214:	d900      	bls.n	800a218 <__ssputs_r+0x86>
 800a216:	463e      	mov	r6, r7
 800a218:	6820      	ldr	r0, [r4, #0]
 800a21a:	4632      	mov	r2, r6
 800a21c:	4641      	mov	r1, r8
 800a21e:	f7ff f9b7 	bl	8009590 <memmove>
 800a222:	68a3      	ldr	r3, [r4, #8]
 800a224:	1b9b      	subs	r3, r3, r6
 800a226:	60a3      	str	r3, [r4, #8]
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	4433      	add	r3, r6
 800a22c:	6023      	str	r3, [r4, #0]
 800a22e:	2000      	movs	r0, #0
 800a230:	e7db      	b.n	800a1ea <__ssputs_r+0x58>
 800a232:	462a      	mov	r2, r5
 800a234:	f7ff ff7e 	bl	800a134 <_realloc_r>
 800a238:	4606      	mov	r6, r0
 800a23a:	2800      	cmp	r0, #0
 800a23c:	d1e1      	bne.n	800a202 <__ssputs_r+0x70>
 800a23e:	6921      	ldr	r1, [r4, #16]
 800a240:	4650      	mov	r0, sl
 800a242:	f7ff fe97 	bl	8009f74 <_free_r>
 800a246:	e7c7      	b.n	800a1d8 <__ssputs_r+0x46>

0800a248 <_svfiprintf_r>:
 800a248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a24c:	4698      	mov	r8, r3
 800a24e:	898b      	ldrh	r3, [r1, #12]
 800a250:	061b      	lsls	r3, r3, #24
 800a252:	b09d      	sub	sp, #116	; 0x74
 800a254:	4607      	mov	r7, r0
 800a256:	460d      	mov	r5, r1
 800a258:	4614      	mov	r4, r2
 800a25a:	d50e      	bpl.n	800a27a <_svfiprintf_r+0x32>
 800a25c:	690b      	ldr	r3, [r1, #16]
 800a25e:	b963      	cbnz	r3, 800a27a <_svfiprintf_r+0x32>
 800a260:	2140      	movs	r1, #64	; 0x40
 800a262:	f7ff fef3 	bl	800a04c <_malloc_r>
 800a266:	6028      	str	r0, [r5, #0]
 800a268:	6128      	str	r0, [r5, #16]
 800a26a:	b920      	cbnz	r0, 800a276 <_svfiprintf_r+0x2e>
 800a26c:	230c      	movs	r3, #12
 800a26e:	603b      	str	r3, [r7, #0]
 800a270:	f04f 30ff 	mov.w	r0, #4294967295
 800a274:	e0d1      	b.n	800a41a <_svfiprintf_r+0x1d2>
 800a276:	2340      	movs	r3, #64	; 0x40
 800a278:	616b      	str	r3, [r5, #20]
 800a27a:	2300      	movs	r3, #0
 800a27c:	9309      	str	r3, [sp, #36]	; 0x24
 800a27e:	2320      	movs	r3, #32
 800a280:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a284:	f8cd 800c 	str.w	r8, [sp, #12]
 800a288:	2330      	movs	r3, #48	; 0x30
 800a28a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a434 <_svfiprintf_r+0x1ec>
 800a28e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a292:	f04f 0901 	mov.w	r9, #1
 800a296:	4623      	mov	r3, r4
 800a298:	469a      	mov	sl, r3
 800a29a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a29e:	b10a      	cbz	r2, 800a2a4 <_svfiprintf_r+0x5c>
 800a2a0:	2a25      	cmp	r2, #37	; 0x25
 800a2a2:	d1f9      	bne.n	800a298 <_svfiprintf_r+0x50>
 800a2a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a2a8:	d00b      	beq.n	800a2c2 <_svfiprintf_r+0x7a>
 800a2aa:	465b      	mov	r3, fp
 800a2ac:	4622      	mov	r2, r4
 800a2ae:	4629      	mov	r1, r5
 800a2b0:	4638      	mov	r0, r7
 800a2b2:	f7ff ff6e 	bl	800a192 <__ssputs_r>
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	f000 80aa 	beq.w	800a410 <_svfiprintf_r+0x1c8>
 800a2bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2be:	445a      	add	r2, fp
 800a2c0:	9209      	str	r2, [sp, #36]	; 0x24
 800a2c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	f000 80a2 	beq.w	800a410 <_svfiprintf_r+0x1c8>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2d6:	f10a 0a01 	add.w	sl, sl, #1
 800a2da:	9304      	str	r3, [sp, #16]
 800a2dc:	9307      	str	r3, [sp, #28]
 800a2de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2e2:	931a      	str	r3, [sp, #104]	; 0x68
 800a2e4:	4654      	mov	r4, sl
 800a2e6:	2205      	movs	r2, #5
 800a2e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ec:	4851      	ldr	r0, [pc, #324]	; (800a434 <_svfiprintf_r+0x1ec>)
 800a2ee:	f7f5 ff57 	bl	80001a0 <memchr>
 800a2f2:	9a04      	ldr	r2, [sp, #16]
 800a2f4:	b9d8      	cbnz	r0, 800a32e <_svfiprintf_r+0xe6>
 800a2f6:	06d0      	lsls	r0, r2, #27
 800a2f8:	bf44      	itt	mi
 800a2fa:	2320      	movmi	r3, #32
 800a2fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a300:	0711      	lsls	r1, r2, #28
 800a302:	bf44      	itt	mi
 800a304:	232b      	movmi	r3, #43	; 0x2b
 800a306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a30a:	f89a 3000 	ldrb.w	r3, [sl]
 800a30e:	2b2a      	cmp	r3, #42	; 0x2a
 800a310:	d015      	beq.n	800a33e <_svfiprintf_r+0xf6>
 800a312:	9a07      	ldr	r2, [sp, #28]
 800a314:	4654      	mov	r4, sl
 800a316:	2000      	movs	r0, #0
 800a318:	f04f 0c0a 	mov.w	ip, #10
 800a31c:	4621      	mov	r1, r4
 800a31e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a322:	3b30      	subs	r3, #48	; 0x30
 800a324:	2b09      	cmp	r3, #9
 800a326:	d94e      	bls.n	800a3c6 <_svfiprintf_r+0x17e>
 800a328:	b1b0      	cbz	r0, 800a358 <_svfiprintf_r+0x110>
 800a32a:	9207      	str	r2, [sp, #28]
 800a32c:	e014      	b.n	800a358 <_svfiprintf_r+0x110>
 800a32e:	eba0 0308 	sub.w	r3, r0, r8
 800a332:	fa09 f303 	lsl.w	r3, r9, r3
 800a336:	4313      	orrs	r3, r2
 800a338:	9304      	str	r3, [sp, #16]
 800a33a:	46a2      	mov	sl, r4
 800a33c:	e7d2      	b.n	800a2e4 <_svfiprintf_r+0x9c>
 800a33e:	9b03      	ldr	r3, [sp, #12]
 800a340:	1d19      	adds	r1, r3, #4
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	9103      	str	r1, [sp, #12]
 800a346:	2b00      	cmp	r3, #0
 800a348:	bfbb      	ittet	lt
 800a34a:	425b      	neglt	r3, r3
 800a34c:	f042 0202 	orrlt.w	r2, r2, #2
 800a350:	9307      	strge	r3, [sp, #28]
 800a352:	9307      	strlt	r3, [sp, #28]
 800a354:	bfb8      	it	lt
 800a356:	9204      	strlt	r2, [sp, #16]
 800a358:	7823      	ldrb	r3, [r4, #0]
 800a35a:	2b2e      	cmp	r3, #46	; 0x2e
 800a35c:	d10c      	bne.n	800a378 <_svfiprintf_r+0x130>
 800a35e:	7863      	ldrb	r3, [r4, #1]
 800a360:	2b2a      	cmp	r3, #42	; 0x2a
 800a362:	d135      	bne.n	800a3d0 <_svfiprintf_r+0x188>
 800a364:	9b03      	ldr	r3, [sp, #12]
 800a366:	1d1a      	adds	r2, r3, #4
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	9203      	str	r2, [sp, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	bfb8      	it	lt
 800a370:	f04f 33ff 	movlt.w	r3, #4294967295
 800a374:	3402      	adds	r4, #2
 800a376:	9305      	str	r3, [sp, #20]
 800a378:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a444 <_svfiprintf_r+0x1fc>
 800a37c:	7821      	ldrb	r1, [r4, #0]
 800a37e:	2203      	movs	r2, #3
 800a380:	4650      	mov	r0, sl
 800a382:	f7f5 ff0d 	bl	80001a0 <memchr>
 800a386:	b140      	cbz	r0, 800a39a <_svfiprintf_r+0x152>
 800a388:	2340      	movs	r3, #64	; 0x40
 800a38a:	eba0 000a 	sub.w	r0, r0, sl
 800a38e:	fa03 f000 	lsl.w	r0, r3, r0
 800a392:	9b04      	ldr	r3, [sp, #16]
 800a394:	4303      	orrs	r3, r0
 800a396:	3401      	adds	r4, #1
 800a398:	9304      	str	r3, [sp, #16]
 800a39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a39e:	4826      	ldr	r0, [pc, #152]	; (800a438 <_svfiprintf_r+0x1f0>)
 800a3a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3a4:	2206      	movs	r2, #6
 800a3a6:	f7f5 fefb 	bl	80001a0 <memchr>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d038      	beq.n	800a420 <_svfiprintf_r+0x1d8>
 800a3ae:	4b23      	ldr	r3, [pc, #140]	; (800a43c <_svfiprintf_r+0x1f4>)
 800a3b0:	bb1b      	cbnz	r3, 800a3fa <_svfiprintf_r+0x1b2>
 800a3b2:	9b03      	ldr	r3, [sp, #12]
 800a3b4:	3307      	adds	r3, #7
 800a3b6:	f023 0307 	bic.w	r3, r3, #7
 800a3ba:	3308      	adds	r3, #8
 800a3bc:	9303      	str	r3, [sp, #12]
 800a3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3c0:	4433      	add	r3, r6
 800a3c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c4:	e767      	b.n	800a296 <_svfiprintf_r+0x4e>
 800a3c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	2001      	movs	r0, #1
 800a3ce:	e7a5      	b.n	800a31c <_svfiprintf_r+0xd4>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	3401      	adds	r4, #1
 800a3d4:	9305      	str	r3, [sp, #20]
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	f04f 0c0a 	mov.w	ip, #10
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3e2:	3a30      	subs	r2, #48	; 0x30
 800a3e4:	2a09      	cmp	r2, #9
 800a3e6:	d903      	bls.n	800a3f0 <_svfiprintf_r+0x1a8>
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d0c5      	beq.n	800a378 <_svfiprintf_r+0x130>
 800a3ec:	9105      	str	r1, [sp, #20]
 800a3ee:	e7c3      	b.n	800a378 <_svfiprintf_r+0x130>
 800a3f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3f4:	4604      	mov	r4, r0
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e7f0      	b.n	800a3dc <_svfiprintf_r+0x194>
 800a3fa:	ab03      	add	r3, sp, #12
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	462a      	mov	r2, r5
 800a400:	4b0f      	ldr	r3, [pc, #60]	; (800a440 <_svfiprintf_r+0x1f8>)
 800a402:	a904      	add	r1, sp, #16
 800a404:	4638      	mov	r0, r7
 800a406:	f7fb ff1b 	bl	8006240 <_printf_float>
 800a40a:	1c42      	adds	r2, r0, #1
 800a40c:	4606      	mov	r6, r0
 800a40e:	d1d6      	bne.n	800a3be <_svfiprintf_r+0x176>
 800a410:	89ab      	ldrh	r3, [r5, #12]
 800a412:	065b      	lsls	r3, r3, #25
 800a414:	f53f af2c 	bmi.w	800a270 <_svfiprintf_r+0x28>
 800a418:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a41a:	b01d      	add	sp, #116	; 0x74
 800a41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a420:	ab03      	add	r3, sp, #12
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	462a      	mov	r2, r5
 800a426:	4b06      	ldr	r3, [pc, #24]	; (800a440 <_svfiprintf_r+0x1f8>)
 800a428:	a904      	add	r1, sp, #16
 800a42a:	4638      	mov	r0, r7
 800a42c:	f7fc f9ac 	bl	8006788 <_printf_i>
 800a430:	e7eb      	b.n	800a40a <_svfiprintf_r+0x1c2>
 800a432:	bf00      	nop
 800a434:	0800a744 	.word	0x0800a744
 800a438:	0800a74e 	.word	0x0800a74e
 800a43c:	08006241 	.word	0x08006241
 800a440:	0800a193 	.word	0x0800a193
 800a444:	0800a74a 	.word	0x0800a74a

0800a448 <nan>:
 800a448:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a450 <nan+0x8>
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	00000000 	.word	0x00000000
 800a454:	7ff80000 	.word	0x7ff80000

0800a458 <_sbrk_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	4d06      	ldr	r5, [pc, #24]	; (800a474 <_sbrk_r+0x1c>)
 800a45c:	2300      	movs	r3, #0
 800a45e:	4604      	mov	r4, r0
 800a460:	4608      	mov	r0, r1
 800a462:	602b      	str	r3, [r5, #0]
 800a464:	f7f7 f956 	bl	8001714 <_sbrk>
 800a468:	1c43      	adds	r3, r0, #1
 800a46a:	d102      	bne.n	800a472 <_sbrk_r+0x1a>
 800a46c:	682b      	ldr	r3, [r5, #0]
 800a46e:	b103      	cbz	r3, 800a472 <_sbrk_r+0x1a>
 800a470:	6023      	str	r3, [r4, #0]
 800a472:	bd38      	pop	{r3, r4, r5, pc}
 800a474:	20002338 	.word	0x20002338

0800a478 <_raise_r>:
 800a478:	291f      	cmp	r1, #31
 800a47a:	b538      	push	{r3, r4, r5, lr}
 800a47c:	4604      	mov	r4, r0
 800a47e:	460d      	mov	r5, r1
 800a480:	d904      	bls.n	800a48c <_raise_r+0x14>
 800a482:	2316      	movs	r3, #22
 800a484:	6003      	str	r3, [r0, #0]
 800a486:	f04f 30ff 	mov.w	r0, #4294967295
 800a48a:	bd38      	pop	{r3, r4, r5, pc}
 800a48c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a48e:	b112      	cbz	r2, 800a496 <_raise_r+0x1e>
 800a490:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a494:	b94b      	cbnz	r3, 800a4aa <_raise_r+0x32>
 800a496:	4620      	mov	r0, r4
 800a498:	f000 f830 	bl	800a4fc <_getpid_r>
 800a49c:	462a      	mov	r2, r5
 800a49e:	4601      	mov	r1, r0
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4a6:	f000 b817 	b.w	800a4d8 <_kill_r>
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d00a      	beq.n	800a4c4 <_raise_r+0x4c>
 800a4ae:	1c59      	adds	r1, r3, #1
 800a4b0:	d103      	bne.n	800a4ba <_raise_r+0x42>
 800a4b2:	2316      	movs	r3, #22
 800a4b4:	6003      	str	r3, [r0, #0]
 800a4b6:	2001      	movs	r0, #1
 800a4b8:	e7e7      	b.n	800a48a <_raise_r+0x12>
 800a4ba:	2400      	movs	r4, #0
 800a4bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	4798      	blx	r3
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	e7e0      	b.n	800a48a <_raise_r+0x12>

0800a4c8 <raise>:
 800a4c8:	4b02      	ldr	r3, [pc, #8]	; (800a4d4 <raise+0xc>)
 800a4ca:	4601      	mov	r1, r0
 800a4cc:	6818      	ldr	r0, [r3, #0]
 800a4ce:	f7ff bfd3 	b.w	800a478 <_raise_r>
 800a4d2:	bf00      	nop
 800a4d4:	2000000c 	.word	0x2000000c

0800a4d8 <_kill_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	4d07      	ldr	r5, [pc, #28]	; (800a4f8 <_kill_r+0x20>)
 800a4dc:	2300      	movs	r3, #0
 800a4de:	4604      	mov	r4, r0
 800a4e0:	4608      	mov	r0, r1
 800a4e2:	4611      	mov	r1, r2
 800a4e4:	602b      	str	r3, [r5, #0]
 800a4e6:	f7f7 f88d 	bl	8001604 <_kill>
 800a4ea:	1c43      	adds	r3, r0, #1
 800a4ec:	d102      	bne.n	800a4f4 <_kill_r+0x1c>
 800a4ee:	682b      	ldr	r3, [r5, #0]
 800a4f0:	b103      	cbz	r3, 800a4f4 <_kill_r+0x1c>
 800a4f2:	6023      	str	r3, [r4, #0]
 800a4f4:	bd38      	pop	{r3, r4, r5, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20002338 	.word	0x20002338

0800a4fc <_getpid_r>:
 800a4fc:	f7f7 b87a 	b.w	80015f4 <_getpid>

0800a500 <__sread>:
 800a500:	b510      	push	{r4, lr}
 800a502:	460c      	mov	r4, r1
 800a504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a508:	f000 f8c8 	bl	800a69c <_read_r>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	bfab      	itete	ge
 800a510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a512:	89a3      	ldrhlt	r3, [r4, #12]
 800a514:	181b      	addge	r3, r3, r0
 800a516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a51a:	bfac      	ite	ge
 800a51c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a51e:	81a3      	strhlt	r3, [r4, #12]
 800a520:	bd10      	pop	{r4, pc}

0800a522 <__swrite>:
 800a522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a526:	461f      	mov	r7, r3
 800a528:	898b      	ldrh	r3, [r1, #12]
 800a52a:	05db      	lsls	r3, r3, #23
 800a52c:	4605      	mov	r5, r0
 800a52e:	460c      	mov	r4, r1
 800a530:	4616      	mov	r6, r2
 800a532:	d505      	bpl.n	800a540 <__swrite+0x1e>
 800a534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a538:	2302      	movs	r3, #2
 800a53a:	2200      	movs	r2, #0
 800a53c:	f000 f888 	bl	800a650 <_lseek_r>
 800a540:	89a3      	ldrh	r3, [r4, #12]
 800a542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a54a:	81a3      	strh	r3, [r4, #12]
 800a54c:	4632      	mov	r2, r6
 800a54e:	463b      	mov	r3, r7
 800a550:	4628      	mov	r0, r5
 800a552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a556:	f000 b837 	b.w	800a5c8 <_write_r>

0800a55a <__sseek>:
 800a55a:	b510      	push	{r4, lr}
 800a55c:	460c      	mov	r4, r1
 800a55e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a562:	f000 f875 	bl	800a650 <_lseek_r>
 800a566:	1c43      	adds	r3, r0, #1
 800a568:	89a3      	ldrh	r3, [r4, #12]
 800a56a:	bf15      	itete	ne
 800a56c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a56e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a576:	81a3      	strheq	r3, [r4, #12]
 800a578:	bf18      	it	ne
 800a57a:	81a3      	strhne	r3, [r4, #12]
 800a57c:	bd10      	pop	{r4, pc}

0800a57e <__sclose>:
 800a57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a582:	f000 b833 	b.w	800a5ec <_close_r>

0800a586 <strncmp>:
 800a586:	b510      	push	{r4, lr}
 800a588:	b17a      	cbz	r2, 800a5aa <strncmp+0x24>
 800a58a:	4603      	mov	r3, r0
 800a58c:	3901      	subs	r1, #1
 800a58e:	1884      	adds	r4, r0, r2
 800a590:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a594:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a598:	4290      	cmp	r0, r2
 800a59a:	d101      	bne.n	800a5a0 <strncmp+0x1a>
 800a59c:	42a3      	cmp	r3, r4
 800a59e:	d101      	bne.n	800a5a4 <strncmp+0x1e>
 800a5a0:	1a80      	subs	r0, r0, r2
 800a5a2:	bd10      	pop	{r4, pc}
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d1f3      	bne.n	800a590 <strncmp+0xa>
 800a5a8:	e7fa      	b.n	800a5a0 <strncmp+0x1a>
 800a5aa:	4610      	mov	r0, r2
 800a5ac:	e7f9      	b.n	800a5a2 <strncmp+0x1c>

0800a5ae <__ascii_wctomb>:
 800a5ae:	b149      	cbz	r1, 800a5c4 <__ascii_wctomb+0x16>
 800a5b0:	2aff      	cmp	r2, #255	; 0xff
 800a5b2:	bf85      	ittet	hi
 800a5b4:	238a      	movhi	r3, #138	; 0x8a
 800a5b6:	6003      	strhi	r3, [r0, #0]
 800a5b8:	700a      	strbls	r2, [r1, #0]
 800a5ba:	f04f 30ff 	movhi.w	r0, #4294967295
 800a5be:	bf98      	it	ls
 800a5c0:	2001      	movls	r0, #1
 800a5c2:	4770      	bx	lr
 800a5c4:	4608      	mov	r0, r1
 800a5c6:	4770      	bx	lr

0800a5c8 <_write_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d07      	ldr	r5, [pc, #28]	; (800a5e8 <_write_r+0x20>)
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	4608      	mov	r0, r1
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	602a      	str	r2, [r5, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	f7f7 f84b 	bl	8001672 <_write>
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	d102      	bne.n	800a5e6 <_write_r+0x1e>
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	b103      	cbz	r3, 800a5e6 <_write_r+0x1e>
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	bd38      	pop	{r3, r4, r5, pc}
 800a5e8:	20002338 	.word	0x20002338

0800a5ec <_close_r>:
 800a5ec:	b538      	push	{r3, r4, r5, lr}
 800a5ee:	4d06      	ldr	r5, [pc, #24]	; (800a608 <_close_r+0x1c>)
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	4608      	mov	r0, r1
 800a5f6:	602b      	str	r3, [r5, #0]
 800a5f8:	f7f7 f857 	bl	80016aa <_close>
 800a5fc:	1c43      	adds	r3, r0, #1
 800a5fe:	d102      	bne.n	800a606 <_close_r+0x1a>
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	b103      	cbz	r3, 800a606 <_close_r+0x1a>
 800a604:	6023      	str	r3, [r4, #0]
 800a606:	bd38      	pop	{r3, r4, r5, pc}
 800a608:	20002338 	.word	0x20002338

0800a60c <_fstat_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4d07      	ldr	r5, [pc, #28]	; (800a62c <_fstat_r+0x20>)
 800a610:	2300      	movs	r3, #0
 800a612:	4604      	mov	r4, r0
 800a614:	4608      	mov	r0, r1
 800a616:	4611      	mov	r1, r2
 800a618:	602b      	str	r3, [r5, #0]
 800a61a:	f7f7 f852 	bl	80016c2 <_fstat>
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	d102      	bne.n	800a628 <_fstat_r+0x1c>
 800a622:	682b      	ldr	r3, [r5, #0]
 800a624:	b103      	cbz	r3, 800a628 <_fstat_r+0x1c>
 800a626:	6023      	str	r3, [r4, #0]
 800a628:	bd38      	pop	{r3, r4, r5, pc}
 800a62a:	bf00      	nop
 800a62c:	20002338 	.word	0x20002338

0800a630 <_isatty_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4d06      	ldr	r5, [pc, #24]	; (800a64c <_isatty_r+0x1c>)
 800a634:	2300      	movs	r3, #0
 800a636:	4604      	mov	r4, r0
 800a638:	4608      	mov	r0, r1
 800a63a:	602b      	str	r3, [r5, #0]
 800a63c:	f7f7 f851 	bl	80016e2 <_isatty>
 800a640:	1c43      	adds	r3, r0, #1
 800a642:	d102      	bne.n	800a64a <_isatty_r+0x1a>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	b103      	cbz	r3, 800a64a <_isatty_r+0x1a>
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	bd38      	pop	{r3, r4, r5, pc}
 800a64c:	20002338 	.word	0x20002338

0800a650 <_lseek_r>:
 800a650:	b538      	push	{r3, r4, r5, lr}
 800a652:	4d07      	ldr	r5, [pc, #28]	; (800a670 <_lseek_r+0x20>)
 800a654:	4604      	mov	r4, r0
 800a656:	4608      	mov	r0, r1
 800a658:	4611      	mov	r1, r2
 800a65a:	2200      	movs	r2, #0
 800a65c:	602a      	str	r2, [r5, #0]
 800a65e:	461a      	mov	r2, r3
 800a660:	f7f7 f84a 	bl	80016f8 <_lseek>
 800a664:	1c43      	adds	r3, r0, #1
 800a666:	d102      	bne.n	800a66e <_lseek_r+0x1e>
 800a668:	682b      	ldr	r3, [r5, #0]
 800a66a:	b103      	cbz	r3, 800a66e <_lseek_r+0x1e>
 800a66c:	6023      	str	r3, [r4, #0]
 800a66e:	bd38      	pop	{r3, r4, r5, pc}
 800a670:	20002338 	.word	0x20002338

0800a674 <__malloc_lock>:
 800a674:	4801      	ldr	r0, [pc, #4]	; (800a67c <__malloc_lock+0x8>)
 800a676:	f7fe befc 	b.w	8009472 <__retarget_lock_acquire_recursive>
 800a67a:	bf00      	nop
 800a67c:	2000232c 	.word	0x2000232c

0800a680 <__malloc_unlock>:
 800a680:	4801      	ldr	r0, [pc, #4]	; (800a688 <__malloc_unlock+0x8>)
 800a682:	f7fe bef7 	b.w	8009474 <__retarget_lock_release_recursive>
 800a686:	bf00      	nop
 800a688:	2000232c 	.word	0x2000232c

0800a68c <_malloc_usable_size_r>:
 800a68c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a690:	1f18      	subs	r0, r3, #4
 800a692:	2b00      	cmp	r3, #0
 800a694:	bfbc      	itt	lt
 800a696:	580b      	ldrlt	r3, [r1, r0]
 800a698:	18c0      	addlt	r0, r0, r3
 800a69a:	4770      	bx	lr

0800a69c <_read_r>:
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	4d07      	ldr	r5, [pc, #28]	; (800a6bc <_read_r+0x20>)
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	4608      	mov	r0, r1
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	602a      	str	r2, [r5, #0]
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	f7f6 ffc4 	bl	8001638 <_read>
 800a6b0:	1c43      	adds	r3, r0, #1
 800a6b2:	d102      	bne.n	800a6ba <_read_r+0x1e>
 800a6b4:	682b      	ldr	r3, [r5, #0]
 800a6b6:	b103      	cbz	r3, 800a6ba <_read_r+0x1e>
 800a6b8:	6023      	str	r3, [r4, #0]
 800a6ba:	bd38      	pop	{r3, r4, r5, pc}
 800a6bc:	20002338 	.word	0x20002338

0800a6c0 <_init>:
 800a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c2:	bf00      	nop
 800a6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c6:	bc08      	pop	{r3}
 800a6c8:	469e      	mov	lr, r3
 800a6ca:	4770      	bx	lr

0800a6cc <_fini>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	bf00      	nop
 800a6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d2:	bc08      	pop	{r3}
 800a6d4:	469e      	mov	lr, r3
 800a6d6:	4770      	bx	lr
