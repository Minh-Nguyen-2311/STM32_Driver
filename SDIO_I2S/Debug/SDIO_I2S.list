
SDIO_I2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800392c  0800392c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.exidx    00000008  0800393c  0800393c  0001393c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000000c  20000000  08003944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  6 .bss          000000d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200000dc  200000dc  0002000c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009dbc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001d25  00000000  00000000  00029df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000930  00000000  00000000  0002bb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000828  00000000  00000000  0002c450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001fa82  00000000  00000000  0002cc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c05d  00000000  00000000  0004c6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000c344e  00000000  00000000  00058757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0011bba5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000023c8  00000000  00000000  0011bbf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b974 	b.w	8000488 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	4604      	mov	r4, r0
 80001c0:	468e      	mov	lr, r1
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d14d      	bne.n	8000262 <__udivmoddi4+0xaa>
 80001c6:	428a      	cmp	r2, r1
 80001c8:	4694      	mov	ip, r2
 80001ca:	d969      	bls.n	80002a0 <__udivmoddi4+0xe8>
 80001cc:	fab2 f282 	clz	r2, r2
 80001d0:	b152      	cbz	r2, 80001e8 <__udivmoddi4+0x30>
 80001d2:	fa01 f302 	lsl.w	r3, r1, r2
 80001d6:	f1c2 0120 	rsb	r1, r2, #32
 80001da:	fa20 f101 	lsr.w	r1, r0, r1
 80001de:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e2:	ea41 0e03 	orr.w	lr, r1, r3
 80001e6:	4094      	lsls	r4, r2
 80001e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001ec:	0c21      	lsrs	r1, r4, #16
 80001ee:	fbbe f6f8 	udiv	r6, lr, r8
 80001f2:	fa1f f78c 	uxth.w	r7, ip
 80001f6:	fb08 e316 	mls	r3, r8, r6, lr
 80001fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001fe:	fb06 f107 	mul.w	r1, r6, r7
 8000202:	4299      	cmp	r1, r3
 8000204:	d90a      	bls.n	800021c <__udivmoddi4+0x64>
 8000206:	eb1c 0303 	adds.w	r3, ip, r3
 800020a:	f106 30ff 	add.w	r0, r6, #4294967295
 800020e:	f080 811f 	bcs.w	8000450 <__udivmoddi4+0x298>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 811c 	bls.w	8000450 <__udivmoddi4+0x298>
 8000218:	3e02      	subs	r6, #2
 800021a:	4463      	add	r3, ip
 800021c:	1a5b      	subs	r3, r3, r1
 800021e:	b2a4      	uxth	r4, r4
 8000220:	fbb3 f0f8 	udiv	r0, r3, r8
 8000224:	fb08 3310 	mls	r3, r8, r0, r3
 8000228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022c:	fb00 f707 	mul.w	r7, r0, r7
 8000230:	42a7      	cmp	r7, r4
 8000232:	d90a      	bls.n	800024a <__udivmoddi4+0x92>
 8000234:	eb1c 0404 	adds.w	r4, ip, r4
 8000238:	f100 33ff 	add.w	r3, r0, #4294967295
 800023c:	f080 810a 	bcs.w	8000454 <__udivmoddi4+0x29c>
 8000240:	42a7      	cmp	r7, r4
 8000242:	f240 8107 	bls.w	8000454 <__udivmoddi4+0x29c>
 8000246:	4464      	add	r4, ip
 8000248:	3802      	subs	r0, #2
 800024a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800024e:	1be4      	subs	r4, r4, r7
 8000250:	2600      	movs	r6, #0
 8000252:	b11d      	cbz	r5, 800025c <__udivmoddi4+0xa4>
 8000254:	40d4      	lsrs	r4, r2
 8000256:	2300      	movs	r3, #0
 8000258:	e9c5 4300 	strd	r4, r3, [r5]
 800025c:	4631      	mov	r1, r6
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0xc2>
 8000266:	2d00      	cmp	r5, #0
 8000268:	f000 80ef 	beq.w	800044a <__udivmoddi4+0x292>
 800026c:	2600      	movs	r6, #0
 800026e:	e9c5 0100 	strd	r0, r1, [r5]
 8000272:	4630      	mov	r0, r6
 8000274:	4631      	mov	r1, r6
 8000276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027a:	fab3 f683 	clz	r6, r3
 800027e:	2e00      	cmp	r6, #0
 8000280:	d14a      	bne.n	8000318 <__udivmoddi4+0x160>
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__udivmoddi4+0xd4>
 8000286:	4282      	cmp	r2, r0
 8000288:	f200 80f9 	bhi.w	800047e <__udivmoddi4+0x2c6>
 800028c:	1a84      	subs	r4, r0, r2
 800028e:	eb61 0303 	sbc.w	r3, r1, r3
 8000292:	2001      	movs	r0, #1
 8000294:	469e      	mov	lr, r3
 8000296:	2d00      	cmp	r5, #0
 8000298:	d0e0      	beq.n	800025c <__udivmoddi4+0xa4>
 800029a:	e9c5 4e00 	strd	r4, lr, [r5]
 800029e:	e7dd      	b.n	800025c <__udivmoddi4+0xa4>
 80002a0:	b902      	cbnz	r2, 80002a4 <__udivmoddi4+0xec>
 80002a2:	deff      	udf	#255	; 0xff
 80002a4:	fab2 f282 	clz	r2, r2
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	f040 8092 	bne.w	80003d2 <__udivmoddi4+0x21a>
 80002ae:	eba1 010c 	sub.w	r1, r1, ip
 80002b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b6:	fa1f fe8c 	uxth.w	lr, ip
 80002ba:	2601      	movs	r6, #1
 80002bc:	0c20      	lsrs	r0, r4, #16
 80002be:	fbb1 f3f7 	udiv	r3, r1, r7
 80002c2:	fb07 1113 	mls	r1, r7, r3, r1
 80002c6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002ca:	fb0e f003 	mul.w	r0, lr, r3
 80002ce:	4288      	cmp	r0, r1
 80002d0:	d908      	bls.n	80002e4 <__udivmoddi4+0x12c>
 80002d2:	eb1c 0101 	adds.w	r1, ip, r1
 80002d6:	f103 38ff 	add.w	r8, r3, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x12a>
 80002dc:	4288      	cmp	r0, r1
 80002de:	f200 80cb 	bhi.w	8000478 <__udivmoddi4+0x2c0>
 80002e2:	4643      	mov	r3, r8
 80002e4:	1a09      	subs	r1, r1, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ec:	fb07 1110 	mls	r1, r7, r0, r1
 80002f0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002f4:	fb0e fe00 	mul.w	lr, lr, r0
 80002f8:	45a6      	cmp	lr, r4
 80002fa:	d908      	bls.n	800030e <__udivmoddi4+0x156>
 80002fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000300:	f100 31ff 	add.w	r1, r0, #4294967295
 8000304:	d202      	bcs.n	800030c <__udivmoddi4+0x154>
 8000306:	45a6      	cmp	lr, r4
 8000308:	f200 80bb 	bhi.w	8000482 <__udivmoddi4+0x2ca>
 800030c:	4608      	mov	r0, r1
 800030e:	eba4 040e 	sub.w	r4, r4, lr
 8000312:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000316:	e79c      	b.n	8000252 <__udivmoddi4+0x9a>
 8000318:	f1c6 0720 	rsb	r7, r6, #32
 800031c:	40b3      	lsls	r3, r6
 800031e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000322:	ea4c 0c03 	orr.w	ip, ip, r3
 8000326:	fa20 f407 	lsr.w	r4, r0, r7
 800032a:	fa01 f306 	lsl.w	r3, r1, r6
 800032e:	431c      	orrs	r4, r3
 8000330:	40f9      	lsrs	r1, r7
 8000332:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000336:	fa00 f306 	lsl.w	r3, r0, r6
 800033a:	fbb1 f8f9 	udiv	r8, r1, r9
 800033e:	0c20      	lsrs	r0, r4, #16
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	fb09 1118 	mls	r1, r9, r8, r1
 8000348:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034c:	fb08 f00e 	mul.w	r0, r8, lr
 8000350:	4288      	cmp	r0, r1
 8000352:	fa02 f206 	lsl.w	r2, r2, r6
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b8>
 8000358:	eb1c 0101 	adds.w	r1, ip, r1
 800035c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000360:	f080 8088 	bcs.w	8000474 <__udivmoddi4+0x2bc>
 8000364:	4288      	cmp	r0, r1
 8000366:	f240 8085 	bls.w	8000474 <__udivmoddi4+0x2bc>
 800036a:	f1a8 0802 	sub.w	r8, r8, #2
 800036e:	4461      	add	r1, ip
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f9 	udiv	r0, r1, r9
 8000378:	fb09 1110 	mls	r1, r9, r0, r1
 800037c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	458e      	cmp	lr, r1
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1e2>
 8000388:	eb1c 0101 	adds.w	r1, ip, r1
 800038c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000390:	d26c      	bcs.n	800046c <__udivmoddi4+0x2b4>
 8000392:	458e      	cmp	lr, r1
 8000394:	d96a      	bls.n	800046c <__udivmoddi4+0x2b4>
 8000396:	3802      	subs	r0, #2
 8000398:	4461      	add	r1, ip
 800039a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800039e:	fba0 9402 	umull	r9, r4, r0, r2
 80003a2:	eba1 010e 	sub.w	r1, r1, lr
 80003a6:	42a1      	cmp	r1, r4
 80003a8:	46c8      	mov	r8, r9
 80003aa:	46a6      	mov	lr, r4
 80003ac:	d356      	bcc.n	800045c <__udivmoddi4+0x2a4>
 80003ae:	d053      	beq.n	8000458 <__udivmoddi4+0x2a0>
 80003b0:	b15d      	cbz	r5, 80003ca <__udivmoddi4+0x212>
 80003b2:	ebb3 0208 	subs.w	r2, r3, r8
 80003b6:	eb61 010e 	sbc.w	r1, r1, lr
 80003ba:	fa01 f707 	lsl.w	r7, r1, r7
 80003be:	fa22 f306 	lsr.w	r3, r2, r6
 80003c2:	40f1      	lsrs	r1, r6
 80003c4:	431f      	orrs	r7, r3
 80003c6:	e9c5 7100 	strd	r7, r1, [r5]
 80003ca:	2600      	movs	r6, #0
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	f1c2 0320 	rsb	r3, r2, #32
 80003d6:	40d8      	lsrs	r0, r3
 80003d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003dc:	fa21 f303 	lsr.w	r3, r1, r3
 80003e0:	4091      	lsls	r1, r2
 80003e2:	4301      	orrs	r1, r0
 80003e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fbb3 f0f7 	udiv	r0, r3, r7
 80003f0:	fb07 3610 	mls	r6, r7, r0, r3
 80003f4:	0c0b      	lsrs	r3, r1, #16
 80003f6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003fa:	fb00 f60e 	mul.w	r6, r0, lr
 80003fe:	429e      	cmp	r6, r3
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x260>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 38ff 	add.w	r8, r0, #4294967295
 800040e:	d22f      	bcs.n	8000470 <__udivmoddi4+0x2b8>
 8000410:	429e      	cmp	r6, r3
 8000412:	d92d      	bls.n	8000470 <__udivmoddi4+0x2b8>
 8000414:	3802      	subs	r0, #2
 8000416:	4463      	add	r3, ip
 8000418:	1b9b      	subs	r3, r3, r6
 800041a:	b289      	uxth	r1, r1
 800041c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000420:	fb07 3316 	mls	r3, r7, r6, r3
 8000424:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000428:	fb06 f30e 	mul.w	r3, r6, lr
 800042c:	428b      	cmp	r3, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x28a>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f106 38ff 	add.w	r8, r6, #4294967295
 8000438:	d216      	bcs.n	8000468 <__udivmoddi4+0x2b0>
 800043a:	428b      	cmp	r3, r1
 800043c:	d914      	bls.n	8000468 <__udivmoddi4+0x2b0>
 800043e:	3e02      	subs	r6, #2
 8000440:	4461      	add	r1, ip
 8000442:	1ac9      	subs	r1, r1, r3
 8000444:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000448:	e738      	b.n	80002bc <__udivmoddi4+0x104>
 800044a:	462e      	mov	r6, r5
 800044c:	4628      	mov	r0, r5
 800044e:	e705      	b.n	800025c <__udivmoddi4+0xa4>
 8000450:	4606      	mov	r6, r0
 8000452:	e6e3      	b.n	800021c <__udivmoddi4+0x64>
 8000454:	4618      	mov	r0, r3
 8000456:	e6f8      	b.n	800024a <__udivmoddi4+0x92>
 8000458:	454b      	cmp	r3, r9
 800045a:	d2a9      	bcs.n	80003b0 <__udivmoddi4+0x1f8>
 800045c:	ebb9 0802 	subs.w	r8, r9, r2
 8000460:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000464:	3801      	subs	r0, #1
 8000466:	e7a3      	b.n	80003b0 <__udivmoddi4+0x1f8>
 8000468:	4646      	mov	r6, r8
 800046a:	e7ea      	b.n	8000442 <__udivmoddi4+0x28a>
 800046c:	4620      	mov	r0, r4
 800046e:	e794      	b.n	800039a <__udivmoddi4+0x1e2>
 8000470:	4640      	mov	r0, r8
 8000472:	e7d1      	b.n	8000418 <__udivmoddi4+0x260>
 8000474:	46d0      	mov	r8, sl
 8000476:	e77b      	b.n	8000370 <__udivmoddi4+0x1b8>
 8000478:	3b02      	subs	r3, #2
 800047a:	4461      	add	r1, ip
 800047c:	e732      	b.n	80002e4 <__udivmoddi4+0x12c>
 800047e:	4630      	mov	r0, r6
 8000480:	e709      	b.n	8000296 <__udivmoddi4+0xde>
 8000482:	4464      	add	r4, ip
 8000484:	3802      	subs	r0, #2
 8000486:	e742      	b.n	800030e <__udivmoddi4+0x156>

08000488 <__aeabi_idiv0>:
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b087      	sub	sp, #28
 8000490:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
 8000496:	4b25      	ldr	r3, [pc, #148]	; (800052c <MX_GPIO_Init+0xa0>)
 8000498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049a:	4a24      	ldr	r2, [pc, #144]	; (800052c <MX_GPIO_Init+0xa0>)
 800049c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004a0:	6313      	str	r3, [r2, #48]	; 0x30
 80004a2:	4b22      	ldr	r3, [pc, #136]	; (800052c <MX_GPIO_Init+0xa0>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
 80004b2:	4b1e      	ldr	r3, [pc, #120]	; (800052c <MX_GPIO_Init+0xa0>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	4a1d      	ldr	r2, [pc, #116]	; (800052c <MX_GPIO_Init+0xa0>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6313      	str	r3, [r2, #48]	; 0x30
 80004be:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MX_GPIO_Init+0xa0>)
 80004c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	613b      	str	r3, [r7, #16]
 80004c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ca:	2300      	movs	r3, #0
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	4b17      	ldr	r3, [pc, #92]	; (800052c <MX_GPIO_Init+0xa0>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d2:	4a16      	ldr	r2, [pc, #88]	; (800052c <MX_GPIO_Init+0xa0>)
 80004d4:	f043 0304 	orr.w	r3, r3, #4
 80004d8:	6313      	str	r3, [r2, #48]	; 0x30
 80004da:	4b14      	ldr	r3, [pc, #80]	; (800052c <MX_GPIO_Init+0xa0>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	f003 0304 	and.w	r3, r3, #4
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	4b10      	ldr	r3, [pc, #64]	; (800052c <MX_GPIO_Init+0xa0>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a0f      	ldr	r2, [pc, #60]	; (800052c <MX_GPIO_Init+0xa0>)
 80004f0:	f043 0308 	orr.w	r3, r3, #8
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b0d      	ldr	r3, [pc, #52]	; (800052c <MX_GPIO_Init+0xa0>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0308 	and.w	r3, r3, #8
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_GPIO_Init+0xa0>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a08      	ldr	r2, [pc, #32]	; (800052c <MX_GPIO_Init+0xa0>)
 800050c:	f043 0302 	orr.w	r3, r3, #2
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_GPIO_Init+0xa0>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0302 	and.w	r3, r3, #2
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

}
 800051e:	bf00      	nop
 8000520:	371c      	adds	r7, #28
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40023800 	.word	0x40023800

08000530 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000534:	4b13      	ldr	r3, [pc, #76]	; (8000584 <MX_I2S3_Init+0x54>)
 8000536:	4a14      	ldr	r2, [pc, #80]	; (8000588 <MX_I2S3_Init+0x58>)
 8000538:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <MX_I2S3_Init+0x54>)
 800053c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000540:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <MX_I2S3_Init+0x54>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000548:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_I2S3_Init+0x54>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <MX_I2S3_Init+0x54>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000554:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <MX_I2S3_Init+0x54>)
 8000556:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800055a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_I2S3_Init+0x54>)
 800055e:	2200      	movs	r2, #0
 8000560:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <MX_I2S3_Init+0x54>)
 8000564:	2200      	movs	r2, #0
 8000566:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_I2S3_Init+0x54>)
 800056a:	2201      	movs	r2, #1
 800056c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_I2S3_Init+0x54>)
 8000570:	f000 fd56 	bl	8001020 <HAL_I2S_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800057a:	f000 f90d 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2000000c 	.word	0x2000000c
 8000588:	40003c00 	.word	0x40003c00

0800058c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08e      	sub	sp, #56	; 0x38
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a38      	ldr	r2, [pc, #224]	; (8000698 <HAL_I2S_MspInit+0x10c>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d169      	bne.n	8000690 <HAL_I2S_MspInit+0x104>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005bc:	2301      	movs	r3, #1
 80005be:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80005c0:	2332      	movs	r3, #50	; 0x32
 80005c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 fdeb 	bl	80021a8 <HAL_RCCEx_PeriphCLKConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80005d8:	f000 f8de 	bl	8000798 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	4b2e      	ldr	r3, [pc, #184]	; (800069c <HAL_I2S_MspInit+0x110>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a2d      	ldr	r2, [pc, #180]	; (800069c <HAL_I2S_MspInit+0x110>)
 80005e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <HAL_I2S_MspInit+0x110>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	4b27      	ldr	r3, [pc, #156]	; (800069c <HAL_I2S_MspInit+0x110>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a26      	ldr	r2, [pc, #152]	; (800069c <HAL_I2S_MspInit+0x110>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
 8000608:	4b24      	ldr	r3, [pc, #144]	; (800069c <HAL_I2S_MspInit+0x110>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b20      	ldr	r3, [pc, #128]	; (800069c <HAL_I2S_MspInit+0x110>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	4a1f      	ldr	r2, [pc, #124]	; (800069c <HAL_I2S_MspInit+0x110>)
 800061e:	f043 0302 	orr.w	r3, r3, #2
 8000622:	6313      	str	r3, [r2, #48]	; 0x30
 8000624:	4b1d      	ldr	r3, [pc, #116]	; (800069c <HAL_I2S_MspInit+0x110>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	f003 0302 	and.w	r3, r3, #2
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PB3     ------> I2S3_CK
    PB4     ------> I2S3_ext_SD
    PB5     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000630:	2310      	movs	r3, #16
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000634:	2302      	movs	r3, #2
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000640:	2306      	movs	r3, #6
 8000642:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000648:	4619      	mov	r1, r3
 800064a:	4815      	ldr	r0, [pc, #84]	; (80006a0 <HAL_I2S_MspInit+0x114>)
 800064c:	f000 fb4c 	bl	8000ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000650:	2328      	movs	r3, #40	; 0x28
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000654:	2302      	movs	r3, #2
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000660:	2306      	movs	r3, #6
 8000662:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000668:	4619      	mov	r1, r3
 800066a:	480e      	ldr	r0, [pc, #56]	; (80006a4 <HAL_I2S_MspInit+0x118>)
 800066c:	f000 fb3c 	bl	8000ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000670:	2310      	movs	r3, #16
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000674:	2302      	movs	r3, #2
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_I2S3ext;
 8000680:	2307      	movs	r3, #7
 8000682:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <HAL_I2S_MspInit+0x118>)
 800068c:	f000 fb2c 	bl	8000ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000690:	bf00      	nop
 8000692:	3738      	adds	r7, #56	; 0x38
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40003c00 	.word	0x40003c00
 800069c:	40023800 	.word	0x40023800
 80006a0:	40020000 	.word	0x40020000
 80006a4:	40020400 	.word	0x40020400

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 f9a0 	bl	80009f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f808 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f7ff feea 	bl	800048c <MX_GPIO_Init>
  MX_I2S3_Init();
 80006b8:	f7ff ff3a 	bl	8000530 <MX_I2S3_Init>
  MX_SDIO_SD_Init();
 80006bc:	f000 f872 	bl	80007a4 <MX_SDIO_SD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <main+0x18>
	...

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 f916 	bl	8003904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	; (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000738:	23a8      	movs	r3, #168	; 0xa8
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000740:	2307      	movs	r3, #7
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f909 	bl	8001960 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 f820 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2105      	movs	r1, #5
 8000776:	4618      	mov	r0, r3
 8000778:	f001 fb6a 	bl	8001e50 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 f809 	bl	8000798 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_SDIO_SD_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_SDIO_SD_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_SDIO_SD_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_SDIO_SD_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_SDIO_SD_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_SDIO_SD_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_SDIO_SD_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_SDIO_SD_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80007d2:	480a      	ldr	r0, [pc, #40]	; (80007fc <MX_SDIO_SD_Init+0x58>)
 80007d4:	f001 fe28 	bl	8002428 <HAL_SD_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80007de:	f7ff ffdb 	bl	8000798 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80007e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_SDIO_SD_Init+0x58>)
 80007e8:	f002 f872 	bl	80028d0 <HAL_SD_ConfigWideBusOperation>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 80007f2:	f7ff ffd1 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000054 	.word	0x20000054
 8000800:	40012c00 	.word	0x40012c00

08000804 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a28      	ldr	r2, [pc, #160]	; (80008c4 <HAL_SD_MspInit+0xc0>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d14a      	bne.n	80008bc <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <HAL_SD_MspInit+0xc4>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	4a26      	ldr	r2, [pc, #152]	; (80008c8 <HAL_SD_MspInit+0xc4>)
 8000830:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000834:	6453      	str	r3, [r2, #68]	; 0x44
 8000836:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <HAL_SD_MspInit+0xc4>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <HAL_SD_MspInit+0xc4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a1f      	ldr	r2, [pc, #124]	; (80008c8 <HAL_SD_MspInit+0xc4>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <HAL_SD_MspInit+0xc4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <HAL_SD_MspInit+0xc4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a18      	ldr	r2, [pc, #96]	; (80008c8 <HAL_SD_MspInit+0xc4>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <HAL_SD_MspInit+0xc4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800087a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800087e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800088c:	230c      	movs	r3, #12
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <HAL_SD_MspInit+0xc8>)
 8000898:	f000 fa26 	bl	8000ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800089c:	2304      	movs	r3, #4
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008ac:	230c      	movs	r3, #12
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <HAL_SD_MspInit+0xcc>)
 80008b8:	f000 fa16 	bl	8000ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40012c00 	.word	0x40012c00
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020800 	.word	0x40020800
 80008d0:	40020c00 	.word	0x40020c00

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a0f      	ldr	r2, [pc, #60]	; (8000920 <HAL_MspInit+0x4c>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <HAL_MspInit+0x4c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_MspInit+0x4c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler+0x4>

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000970:	f000 f890 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <SystemInit+0x20>)
 800097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <SystemInit+0x20>)
 8000984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800099c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009a2:	490e      	ldr	r1, [pc, #56]	; (80009dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009b8:	4c0b      	ldr	r4, [pc, #44]	; (80009e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009c6:	f7ff ffd7 	bl	8000978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ca:	f002 ff77 	bl	80038bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ce:	f7ff fe6b 	bl	80006a8 <main>
  bx  lr    
 80009d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009e0:	08003944 	.word	0x08003944
  ldr r2, =_sbss
 80009e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e8:	200000dc 	.word	0x200000dc

080009ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC_IRQHandler>
	...

080009f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <HAL_Init+0x40>)
 80009fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_Init+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_Init+0x40>)
 8000a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <HAL_Init+0x40>)
 8000a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 f931 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1e:	200f      	movs	r0, #15
 8000a20:	f000 f808 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a24:	f7ff ff56 	bl	80008d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023c00 	.word	0x40023c00

08000a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x54>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_InitTick+0x58>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4619      	mov	r1, r3
 8000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f93b 	bl	8000cce <HAL_SYSTICK_Config>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00e      	b.n	8000a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b0f      	cmp	r3, #15
 8000a66:	d80a      	bhi.n	8000a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f000 f911 	bl	8000c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a74:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <HAL_InitTick+0x5c>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e000      	b.n	8000a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000004 	.word	0x20000004

08000a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x20>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	200000d8 	.word	0x200000d8

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200000d8 	.word	0x200000d8

08000ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000adc:	f7ff ffee 	bl	8000abc <HAL_GetTick>
 8000ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aec:	d005      	beq.n	8000afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_Delay+0x44>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000afa:	bf00      	nop
 8000afc:	f7ff ffde 	bl	8000abc <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d8f7      	bhi.n	8000afc <HAL_Delay+0x28>
  {
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	; (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	; 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c4c:	d301      	bcc.n	8000c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00f      	b.n	8000c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <SysTick_Config+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f7ff ff8e 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SysTick_Config+0x40>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SysTick_Config+0x40>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff47 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca8:	f7ff ff5c 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	6978      	ldr	r0, [r7, #20]
 8000cb4:	f7ff ff8e 	bl	8000bd4 <NVIC_EncodePriority>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff5d 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffb0 	bl	8000c3c <SysTick_Config>
 8000cdc:	4603      	mov	r3, r0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
 8000d02:	e16b      	b.n	8000fdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d04:	2201      	movs	r2, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f040 815a 	bne.w	8000fd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d005      	beq.n	8000d3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d130      	bne.n	8000d9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	68da      	ldr	r2, [r3, #12]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d70:	2201      	movs	r2, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	091b      	lsrs	r3, r3, #4
 8000d86:	f003 0201 	and.w	r2, r3, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d017      	beq.n	8000dd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d123      	bne.n	8000e2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	08da      	lsrs	r2, r3, #3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3208      	adds	r2, #8
 8000dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	f003 0307 	and.w	r3, r3, #7
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	220f      	movs	r2, #15
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	691a      	ldr	r2, [r3, #16]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	08da      	lsrs	r2, r3, #3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3208      	adds	r2, #8
 8000e26:	69b9      	ldr	r1, [r7, #24]
 8000e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0203 	and.w	r2, r3, #3
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f000 80b4 	beq.w	8000fd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b60      	ldr	r3, [pc, #384]	; (8000ff4 <HAL_GPIO_Init+0x30c>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	4a5f      	ldr	r2, [pc, #380]	; (8000ff4 <HAL_GPIO_Init+0x30c>)
 8000e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7e:	4b5d      	ldr	r3, [pc, #372]	; (8000ff4 <HAL_GPIO_Init+0x30c>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e8a:	4a5b      	ldr	r2, [pc, #364]	; (8000ff8 <HAL_GPIO_Init+0x310>)
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3302      	adds	r3, #2
 8000e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a52      	ldr	r2, [pc, #328]	; (8000ffc <HAL_GPIO_Init+0x314>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d02b      	beq.n	8000f0e <HAL_GPIO_Init+0x226>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a51      	ldr	r2, [pc, #324]	; (8001000 <HAL_GPIO_Init+0x318>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d025      	beq.n	8000f0a <HAL_GPIO_Init+0x222>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a50      	ldr	r2, [pc, #320]	; (8001004 <HAL_GPIO_Init+0x31c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d01f      	beq.n	8000f06 <HAL_GPIO_Init+0x21e>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4f      	ldr	r2, [pc, #316]	; (8001008 <HAL_GPIO_Init+0x320>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d019      	beq.n	8000f02 <HAL_GPIO_Init+0x21a>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4e      	ldr	r2, [pc, #312]	; (800100c <HAL_GPIO_Init+0x324>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0x216>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4d      	ldr	r2, [pc, #308]	; (8001010 <HAL_GPIO_Init+0x328>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d00d      	beq.n	8000efa <HAL_GPIO_Init+0x212>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4c      	ldr	r2, [pc, #304]	; (8001014 <HAL_GPIO_Init+0x32c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d007      	beq.n	8000ef6 <HAL_GPIO_Init+0x20e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4b      	ldr	r2, [pc, #300]	; (8001018 <HAL_GPIO_Init+0x330>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_GPIO_Init+0x20a>
 8000eee:	2307      	movs	r3, #7
 8000ef0:	e00e      	b.n	8000f10 <HAL_GPIO_Init+0x228>
 8000ef2:	2308      	movs	r3, #8
 8000ef4:	e00c      	b.n	8000f10 <HAL_GPIO_Init+0x228>
 8000ef6:	2306      	movs	r3, #6
 8000ef8:	e00a      	b.n	8000f10 <HAL_GPIO_Init+0x228>
 8000efa:	2305      	movs	r3, #5
 8000efc:	e008      	b.n	8000f10 <HAL_GPIO_Init+0x228>
 8000efe:	2304      	movs	r3, #4
 8000f00:	e006      	b.n	8000f10 <HAL_GPIO_Init+0x228>
 8000f02:	2303      	movs	r3, #3
 8000f04:	e004      	b.n	8000f10 <HAL_GPIO_Init+0x228>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e002      	b.n	8000f10 <HAL_GPIO_Init+0x228>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <HAL_GPIO_Init+0x228>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	69fa      	ldr	r2, [r7, #28]
 8000f12:	f002 0203 	and.w	r2, r2, #3
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	4093      	lsls	r3, r2
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f20:	4935      	ldr	r1, [pc, #212]	; (8000ff8 <HAL_GPIO_Init+0x310>)
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f2e:	4b3b      	ldr	r3, [pc, #236]	; (800101c <HAL_GPIO_Init+0x334>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f52:	4a32      	ldr	r2, [pc, #200]	; (800101c <HAL_GPIO_Init+0x334>)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f58:	4b30      	ldr	r3, [pc, #192]	; (800101c <HAL_GPIO_Init+0x334>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f7c:	4a27      	ldr	r2, [pc, #156]	; (800101c <HAL_GPIO_Init+0x334>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f82:	4b26      	ldr	r3, [pc, #152]	; (800101c <HAL_GPIO_Init+0x334>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fa6:	4a1d      	ldr	r2, [pc, #116]	; (800101c <HAL_GPIO_Init+0x334>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <HAL_GPIO_Init+0x334>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd0:	4a12      	ldr	r2, [pc, #72]	; (800101c <HAL_GPIO_Init+0x334>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	f67f ae90 	bls.w	8000d04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3724      	adds	r7, #36	; 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020400 	.word	0x40020400
 8001004:	40020800 	.word	0x40020800
 8001008:	40020c00 	.word	0x40020c00
 800100c:	40021000 	.word	0x40021000
 8001010:	40021400 	.word	0x40021400
 8001014:	40021800 	.word	0x40021800
 8001018:	40021c00 	.word	0x40021c00
 800101c:	40013c00 	.word	0x40013c00

08001020 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e128      	b.n	8001284 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a90      	ldr	r2, [pc, #576]	; (800128c <HAL_I2S_Init+0x26c>)
 800104a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff fa9d 	bl	800058c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2202      	movs	r2, #2
 8001056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6812      	ldr	r2, [r2, #0]
 8001064:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001068:	f023 030f 	bic.w	r3, r3, #15
 800106c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2202      	movs	r2, #2
 8001074:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	2b02      	cmp	r3, #2
 800107c:	d060      	beq.n	8001140 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001086:	2310      	movs	r3, #16
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	e001      	b.n	8001090 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800108c:	2320      	movs	r3, #32
 800108e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	2b20      	cmp	r3, #32
 8001096:	d802      	bhi.n	800109e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800109e:	2001      	movs	r0, #1
 80010a0:	f001 f964 	bl	800236c <HAL_RCCEx_GetPeriphCLKFreq>
 80010a4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010ae:	d125      	bne.n	80010fc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d010      	beq.n	80010da <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	fbb2 f2f3 	udiv	r2, r2, r3
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	461a      	mov	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d4:	3305      	adds	r3, #5
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	e01f      	b.n	800111a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	461a      	mov	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	3305      	adds	r3, #5
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	e00e      	b.n	800111a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	fbb2 f2f3 	udiv	r2, r2, r3
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	461a      	mov	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	fbb2 f3f3 	udiv	r3, r2, r3
 8001116:	3305      	adds	r3, #5
 8001118:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4a5c      	ldr	r2, [pc, #368]	; (8001290 <HAL_I2S_Init+0x270>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	08db      	lsrs	r3, r3, #3
 8001124:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	085b      	lsrs	r3, r3, #1
 8001136:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	61bb      	str	r3, [r7, #24]
 800113e:	e003      	b.n	8001148 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001140:	2302      	movs	r3, #2
 8001142:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d902      	bls.n	8001154 <HAL_I2S_Init+0x134>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	2bff      	cmp	r3, #255	; 0xff
 8001152:	d907      	bls.n	8001164 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001158:	f043 0210 	orr.w	r2, r3, #16
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e08f      	b.n	8001284 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	ea42 0103 	orr.w	r1, r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	430a      	orrs	r2, r1
 8001176:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001182:	f023 030f 	bic.w	r3, r3, #15
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6851      	ldr	r1, [r2, #4]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	6892      	ldr	r2, [r2, #8]
 800118e:	4311      	orrs	r1, r2
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	68d2      	ldr	r2, [r2, #12]
 8001194:	4311      	orrs	r1, r2
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6992      	ldr	r2, [r2, #24]
 800119a:	430a      	orrs	r2, r1
 800119c:	431a      	orrs	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011a6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d161      	bne.n	8001274 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a38      	ldr	r2, [pc, #224]	; (8001294 <HAL_I2S_Init+0x274>)
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a37      	ldr	r2, [pc, #220]	; (8001298 <HAL_I2S_Init+0x278>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d101      	bne.n	80011c4 <HAL_I2S_Init+0x1a4>
 80011c0:	4b36      	ldr	r3, [pc, #216]	; (800129c <HAL_I2S_Init+0x27c>)
 80011c2:	e001      	b.n	80011c8 <HAL_I2S_Init+0x1a8>
 80011c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	6812      	ldr	r2, [r2, #0]
 80011ce:	4932      	ldr	r1, [pc, #200]	; (8001298 <HAL_I2S_Init+0x278>)
 80011d0:	428a      	cmp	r2, r1
 80011d2:	d101      	bne.n	80011d8 <HAL_I2S_Init+0x1b8>
 80011d4:	4a31      	ldr	r2, [pc, #196]	; (800129c <HAL_I2S_Init+0x27c>)
 80011d6:	e001      	b.n	80011dc <HAL_I2S_Init+0x1bc>
 80011d8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80011dc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80011e0:	f023 030f 	bic.w	r3, r3, #15
 80011e4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a2b      	ldr	r2, [pc, #172]	; (8001298 <HAL_I2S_Init+0x278>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d101      	bne.n	80011f4 <HAL_I2S_Init+0x1d4>
 80011f0:	4b2a      	ldr	r3, [pc, #168]	; (800129c <HAL_I2S_Init+0x27c>)
 80011f2:	e001      	b.n	80011f8 <HAL_I2S_Init+0x1d8>
 80011f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80011f8:	2202      	movs	r2, #2
 80011fa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a25      	ldr	r2, [pc, #148]	; (8001298 <HAL_I2S_Init+0x278>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <HAL_I2S_Init+0x1ea>
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <HAL_I2S_Init+0x27c>)
 8001208:	e001      	b.n	800120e <HAL_I2S_Init+0x1ee>
 800120a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800121a:	d003      	beq.n	8001224 <HAL_I2S_Init+0x204>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d103      	bne.n	800122c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	e001      	b.n	8001230 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800123a:	4313      	orrs	r3, r2
 800123c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001244:	4313      	orrs	r3, r2
 8001246:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800124e:	4313      	orrs	r3, r2
 8001250:	b29a      	uxth	r2, r3
 8001252:	897b      	ldrh	r3, [r7, #10]
 8001254:	4313      	orrs	r3, r2
 8001256:	b29b      	uxth	r3, r3
 8001258:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800125c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <HAL_I2S_Init+0x278>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d101      	bne.n	800126c <HAL_I2S_Init+0x24c>
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <HAL_I2S_Init+0x27c>)
 800126a:	e001      	b.n	8001270 <HAL_I2S_Init+0x250>
 800126c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001270:	897a      	ldrh	r2, [r7, #10]
 8001272:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	08001397 	.word	0x08001397
 8001290:	cccccccd 	.word	0xcccccccd
 8001294:	080014ad 	.word	0x080014ad
 8001298:	40003800 	.word	0x40003800
 800129c:	40003400 	.word	0x40003400

080012a0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	881a      	ldrh	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	1c9a      	adds	r2, r3, #2
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fe:	b29b      	uxth	r3, r3
 8001300:	3b01      	subs	r3, #1
 8001302:	b29a      	uxth	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130c:	b29b      	uxth	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10e      	bne.n	8001330 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001320:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ffb8 	bl	80012a0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	b292      	uxth	r2, r2
 800134c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	1c9a      	adds	r2, r3, #2
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800135c:	b29b      	uxth	r3, r3
 800135e:	3b01      	subs	r3, #1
 8001360:	b29a      	uxth	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800136a:	b29b      	uxth	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10e      	bne.n	800138e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800137e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff93 	bl	80012b4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	d13a      	bne.n	8001428 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d109      	bne.n	80013d0 <I2S_IRQHandler+0x3a>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013c6:	2b40      	cmp	r3, #64	; 0x40
 80013c8:	d102      	bne.n	80013d0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffb4 	bl	8001338 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d6:	2b40      	cmp	r3, #64	; 0x40
 80013d8:	d126      	bne.n	8001428 <I2S_IRQHandler+0x92>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0320 	and.w	r3, r3, #32
 80013e4:	2b20      	cmp	r3, #32
 80013e6:	d11f      	bne.n	8001428 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80013f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f043 0202 	orr.w	r2, r3, #2
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff50 	bl	80012c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b03      	cmp	r3, #3
 8001432:	d136      	bne.n	80014a2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b02      	cmp	r3, #2
 800143c:	d109      	bne.n	8001452 <I2S_IRQHandler+0xbc>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001448:	2b80      	cmp	r3, #128	; 0x80
 800144a:	d102      	bne.n	8001452 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff45 	bl	80012dc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	2b08      	cmp	r3, #8
 800145a:	d122      	bne.n	80014a2 <I2S_IRQHandler+0x10c>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0320 	and.w	r3, r3, #32
 8001466:	2b20      	cmp	r3, #32
 8001468:	d11b      	bne.n	80014a2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001478:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001494:	f043 0204 	orr.w	r2, r3, #4
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff13 	bl	80012c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a92      	ldr	r2, [pc, #584]	; (800170c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d101      	bne.n	80014ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80014c6:	4b92      	ldr	r3, [pc, #584]	; (8001710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80014c8:	e001      	b.n	80014ce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80014ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a8b      	ldr	r2, [pc, #556]	; (800170c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d101      	bne.n	80014e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80014e4:	4b8a      	ldr	r3, [pc, #552]	; (8001710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80014e6:	e001      	b.n	80014ec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80014e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f8:	d004      	beq.n	8001504 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f040 8099 	bne.w	8001636 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b02      	cmp	r3, #2
 800150c:	d107      	bne.n	800151e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f925 	bl	8001768 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b01      	cmp	r3, #1
 8001526:	d107      	bne.n	8001538 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f9c8 	bl	80018c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153e:	2b40      	cmp	r3, #64	; 0x40
 8001540:	d13a      	bne.n	80015b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	f003 0320 	and.w	r3, r3, #32
 8001548:	2b00      	cmp	r3, #0
 800154a:	d035      	beq.n	80015b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a6e      	ldr	r2, [pc, #440]	; (800170c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001556:	4b6e      	ldr	r3, [pc, #440]	; (8001710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001558:	e001      	b.n	800155e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800155a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4969      	ldr	r1, [pc, #420]	; (800170c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001566:	428b      	cmp	r3, r1
 8001568:	d101      	bne.n	800156e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800156a:	4b69      	ldr	r3, [pc, #420]	; (8001710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800156c:	e001      	b.n	8001572 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800156e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001572:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001576:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001586:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f043 0202 	orr.w	r2, r3, #2
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fe88 	bl	80012c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b08      	cmp	r3, #8
 80015c0:	f040 80c3 	bne.w	800174a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f003 0320 	and.w	r3, r3, #32
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80bd 	beq.w	800174a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80015de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a49      	ldr	r2, [pc, #292]	; (800170c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80015ea:	4b49      	ldr	r3, [pc, #292]	; (8001710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80015ec:	e001      	b.n	80015f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80015ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4944      	ldr	r1, [pc, #272]	; (800170c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80015fa:	428b      	cmp	r3, r1
 80015fc:	d101      	bne.n	8001602 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80015fe:	4b44      	ldr	r3, [pc, #272]	; (8001710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001600:	e001      	b.n	8001606 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001602:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001606:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800160a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f043 0204 	orr.w	r2, r3, #4
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff fe4a 	bl	80012c8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001634:	e089      	b.n	800174a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b02      	cmp	r3, #2
 800163e:	d107      	bne.n	8001650 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f8be 	bl	80017cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b01      	cmp	r3, #1
 8001658:	d107      	bne.n	800166a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 f8fd 	bl	8001864 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001670:	2b40      	cmp	r3, #64	; 0x40
 8001672:	d12f      	bne.n	80016d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f003 0320 	and.w	r3, r3, #32
 800167a:	2b00      	cmp	r3, #0
 800167c:	d02a      	beq.n	80016d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800168c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a1e      	ldr	r2, [pc, #120]	; (800170c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d101      	bne.n	800169c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800169a:	e001      	b.n	80016a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800169c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4919      	ldr	r1, [pc, #100]	; (800170c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80016a8:	428b      	cmp	r3, r1
 80016aa:	d101      	bne.n	80016b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80016ac:	4b18      	ldr	r3, [pc, #96]	; (8001710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80016ae:	e001      	b.n	80016b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80016b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80016b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80016b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f043 0202 	orr.w	r2, r3, #2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fdfa 	bl	80012c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d136      	bne.n	800174c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d031      	beq.n	800174c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80016f4:	e001      	b.n	80016fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80016f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4902      	ldr	r1, [pc, #8]	; (800170c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001702:	428b      	cmp	r3, r1
 8001704:	d106      	bne.n	8001714 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001706:	4b02      	ldr	r3, [pc, #8]	; (8001710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001708:	e006      	b.n	8001718 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800170a:	bf00      	nop
 800170c:	40003800 	.word	0x40003800
 8001710:	40003400 	.word	0x40003400
 8001714:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001718:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800171c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800172c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f043 0204 	orr.w	r2, r3, #4
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fdc0 	bl	80012c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001748:	e000      	b.n	800174c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800174a:	bf00      	nop
}
 800174c:	bf00      	nop
 800174e:	3720      	adds	r7, #32
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	1c99      	adds	r1, r3, #2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6251      	str	r1, [r2, #36]	; 0x24
 800177a:	881a      	ldrh	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001786:	b29b      	uxth	r3, r3
 8001788:	3b01      	subs	r3, #1
 800178a:	b29a      	uxth	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001794:	b29b      	uxth	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d113      	bne.n	80017c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80017a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d106      	bne.n	80017c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ffc9 	bl	8001754 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	1c99      	adds	r1, r3, #2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6251      	str	r1, [r2, #36]	; 0x24
 80017de:	8819      	ldrh	r1, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a1d      	ldr	r2, [pc, #116]	; (800185c <I2SEx_TxISR_I2SExt+0x90>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d101      	bne.n	80017ee <I2SEx_TxISR_I2SExt+0x22>
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <I2SEx_TxISR_I2SExt+0x94>)
 80017ec:	e001      	b.n	80017f2 <I2SEx_TxISR_I2SExt+0x26>
 80017ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017f2:	460a      	mov	r2, r1
 80017f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001808:	b29b      	uxth	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d121      	bne.n	8001852 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <I2SEx_TxISR_I2SExt+0x90>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d101      	bne.n	800181c <I2SEx_TxISR_I2SExt+0x50>
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <I2SEx_TxISR_I2SExt+0x94>)
 800181a:	e001      	b.n	8001820 <I2SEx_TxISR_I2SExt+0x54>
 800181c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	490d      	ldr	r1, [pc, #52]	; (800185c <I2SEx_TxISR_I2SExt+0x90>)
 8001828:	428b      	cmp	r3, r1
 800182a:	d101      	bne.n	8001830 <I2SEx_TxISR_I2SExt+0x64>
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <I2SEx_TxISR_I2SExt+0x94>)
 800182e:	e001      	b.n	8001834 <I2SEx_TxISR_I2SExt+0x68>
 8001830:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001834:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001838:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800183e:	b29b      	uxth	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d106      	bne.n	8001852 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff81 	bl	8001754 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40003800 	.word	0x40003800
 8001860:	40003400 	.word	0x40003400

08001864 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68d8      	ldr	r0, [r3, #12]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001876:	1c99      	adds	r1, r3, #2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800187c:	b282      	uxth	r2, r0
 800187e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001884:	b29b      	uxth	r3, r3
 8001886:	3b01      	subs	r3, #1
 8001888:	b29a      	uxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001892:	b29b      	uxth	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d113      	bne.n	80018c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80018a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d106      	bne.n	80018c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ff4a 	bl	8001754 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a20      	ldr	r2, [pc, #128]	; (8001958 <I2SEx_RxISR_I2SExt+0x90>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d101      	bne.n	80018de <I2SEx_RxISR_I2SExt+0x16>
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <I2SEx_RxISR_I2SExt+0x94>)
 80018dc:	e001      	b.n	80018e2 <I2SEx_RxISR_I2SExt+0x1a>
 80018de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80018e2:	68d8      	ldr	r0, [r3, #12]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	1c99      	adds	r1, r3, #2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	62d1      	str	r1, [r2, #44]	; 0x2c
 80018ee:	b282      	uxth	r2, r0
 80018f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	3b01      	subs	r3, #1
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001904:	b29b      	uxth	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d121      	bne.n	800194e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <I2SEx_RxISR_I2SExt+0x90>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d101      	bne.n	8001918 <I2SEx_RxISR_I2SExt+0x50>
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <I2SEx_RxISR_I2SExt+0x94>)
 8001916:	e001      	b.n	800191c <I2SEx_RxISR_I2SExt+0x54>
 8001918:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	490d      	ldr	r1, [pc, #52]	; (8001958 <I2SEx_RxISR_I2SExt+0x90>)
 8001924:	428b      	cmp	r3, r1
 8001926:	d101      	bne.n	800192c <I2SEx_RxISR_I2SExt+0x64>
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <I2SEx_RxISR_I2SExt+0x94>)
 800192a:	e001      	b.n	8001930 <I2SEx_RxISR_I2SExt+0x68>
 800192c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001930:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001934:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193a:	b29b      	uxth	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d106      	bne.n	800194e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff03 	bl	8001754 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40003800 	.word	0x40003800
 800195c:	40003400 	.word	0x40003400

08001960 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e267      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d075      	beq.n	8001a6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800197e:	4b88      	ldr	r3, [pc, #544]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b04      	cmp	r3, #4
 8001988:	d00c      	beq.n	80019a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800198a:	4b85      	ldr	r3, [pc, #532]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001992:	2b08      	cmp	r3, #8
 8001994:	d112      	bne.n	80019bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001996:	4b82      	ldr	r3, [pc, #520]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019a2:	d10b      	bne.n	80019bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	4b7e      	ldr	r3, [pc, #504]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d05b      	beq.n	8001a68 <HAL_RCC_OscConfig+0x108>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d157      	bne.n	8001a68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e242      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c4:	d106      	bne.n	80019d4 <HAL_RCC_OscConfig+0x74>
 80019c6:	4b76      	ldr	r3, [pc, #472]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a75      	ldr	r2, [pc, #468]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e01d      	b.n	8001a10 <HAL_RCC_OscConfig+0xb0>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x98>
 80019de:	4b70      	ldr	r3, [pc, #448]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a6f      	ldr	r2, [pc, #444]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b6d      	ldr	r3, [pc, #436]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a6c      	ldr	r2, [pc, #432]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e00b      	b.n	8001a10 <HAL_RCC_OscConfig+0xb0>
 80019f8:	4b69      	ldr	r3, [pc, #420]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a68      	ldr	r2, [pc, #416]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b66      	ldr	r3, [pc, #408]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a65      	ldr	r2, [pc, #404]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d013      	beq.n	8001a40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff f850 	bl	8000abc <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff f84c 	bl	8000abc <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e207      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	4b5b      	ldr	r3, [pc, #364]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0xc0>
 8001a3e:	e014      	b.n	8001a6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff f83c 	bl	8000abc <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff f838 	bl	8000abc <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e1f3      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	4b51      	ldr	r3, [pc, #324]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0xe8>
 8001a66:	e000      	b.n	8001a6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d063      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a76:	4b4a      	ldr	r3, [pc, #296]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00b      	beq.n	8001a9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a82:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d11c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8e:	4b44      	ldr	r3, [pc, #272]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d116      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9a:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d005      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x152>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d001      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e1c7      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab2:	4b3b      	ldr	r3, [pc, #236]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4937      	ldr	r1, [pc, #220]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	e03a      	b.n	8001b3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d020      	beq.n	8001b12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <HAL_RCC_OscConfig+0x244>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7fe fff1 	bl	8000abc <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ade:	f7fe ffed 	bl	8000abc <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e1a8      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afc:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4925      	ldr	r1, [pc, #148]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	600b      	str	r3, [r1, #0]
 8001b10:	e015      	b.n	8001b3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <HAL_RCC_OscConfig+0x244>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7fe ffd0 	bl	8000abc <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b20:	f7fe ffcc 	bl	8000abc <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e187      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d036      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d016      	beq.n	8001b80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_RCC_OscConfig+0x248>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b58:	f7fe ffb0 	bl	8000abc <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b60:	f7fe ffac 	bl	8000abc <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e167      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x200>
 8001b7e:	e01b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_RCC_OscConfig+0x248>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b86:	f7fe ff99 	bl	8000abc <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8c:	e00e      	b.n	8001bac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b8e:	f7fe ff95 	bl	8000abc <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d907      	bls.n	8001bac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e150      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	42470000 	.word	0x42470000
 8001ba8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	4b88      	ldr	r3, [pc, #544]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1ea      	bne.n	8001b8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 8097 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bca:	4b81      	ldr	r3, [pc, #516]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	4b7d      	ldr	r3, [pc, #500]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a7c      	ldr	r2, [pc, #496]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	4b7a      	ldr	r3, [pc, #488]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf6:	4b77      	ldr	r3, [pc, #476]	; (8001dd4 <HAL_RCC_OscConfig+0x474>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d118      	bne.n	8001c34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c02:	4b74      	ldr	r3, [pc, #464]	; (8001dd4 <HAL_RCC_OscConfig+0x474>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a73      	ldr	r2, [pc, #460]	; (8001dd4 <HAL_RCC_OscConfig+0x474>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0e:	f7fe ff55 	bl	8000abc <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c16:	f7fe ff51 	bl	8000abc <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e10c      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c28:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <HAL_RCC_OscConfig+0x474>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x2ea>
 8001c3c:	4b64      	ldr	r3, [pc, #400]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	4a63      	ldr	r2, [pc, #396]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6713      	str	r3, [r2, #112]	; 0x70
 8001c48:	e01c      	b.n	8001c84 <HAL_RCC_OscConfig+0x324>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x30c>
 8001c52:	4b5f      	ldr	r3, [pc, #380]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	4a5e      	ldr	r2, [pc, #376]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5e:	4b5c      	ldr	r3, [pc, #368]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c62:	4a5b      	ldr	r2, [pc, #364]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6a:	e00b      	b.n	8001c84 <HAL_RCC_OscConfig+0x324>
 8001c6c:	4b58      	ldr	r3, [pc, #352]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	4a57      	ldr	r2, [pc, #348]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	6713      	str	r3, [r2, #112]	; 0x70
 8001c78:	4b55      	ldr	r3, [pc, #340]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7c:	4a54      	ldr	r2, [pc, #336]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c7e:	f023 0304 	bic.w	r3, r3, #4
 8001c82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d015      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8c:	f7fe ff16 	bl	8000abc <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c94:	f7fe ff12 	bl	8000abc <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e0cb      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001caa:	4b49      	ldr	r3, [pc, #292]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0ee      	beq.n	8001c94 <HAL_RCC_OscConfig+0x334>
 8001cb6:	e014      	b.n	8001ce2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb8:	f7fe ff00 	bl	8000abc <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc0:	f7fe fefc 	bl	8000abc <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e0b5      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ee      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d105      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce8:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	4a38      	ldr	r2, [pc, #224]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80a1 	beq.w	8001e40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cfe:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d05c      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d141      	bne.n	8001d96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <HAL_RCC_OscConfig+0x478>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7fe fed0 	bl	8000abc <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d20:	f7fe fecc 	bl	8000abc <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e087      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d32:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69da      	ldr	r2, [r3, #28]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	019b      	lsls	r3, r3, #6
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	085b      	lsrs	r3, r3, #1
 8001d56:	3b01      	subs	r3, #1
 8001d58:	041b      	lsls	r3, r3, #16
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	061b      	lsls	r3, r3, #24
 8001d62:	491b      	ldr	r1, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_RCC_OscConfig+0x478>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7fe fea5 	bl	8000abc <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d76:	f7fe fea1 	bl	8000abc <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e05c      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x416>
 8001d94:	e054      	b.n	8001e40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_RCC_OscConfig+0x478>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7fe fe8e 	bl	8000abc <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da4:	f7fe fe8a 	bl	8000abc <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e045      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x444>
 8001dc2:	e03d      	b.n	8001e40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e038      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_RCC_OscConfig+0x4ec>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d028      	beq.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d121      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d11a      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d111      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	3b01      	subs	r3, #1
 8001e26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800

08001e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0cc      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e64:	4b68      	ldr	r3, [pc, #416]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d90c      	bls.n	8001e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b65      	ldr	r3, [pc, #404]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b63      	ldr	r3, [pc, #396]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0b8      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d020      	beq.n	8001eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea4:	4b59      	ldr	r3, [pc, #356]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	4a58      	ldr	r2, [pc, #352]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ebc:	4b53      	ldr	r3, [pc, #332]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec8:	4b50      	ldr	r3, [pc, #320]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	494d      	ldr	r1, [pc, #308]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d044      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d107      	bne.n	8001efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d119      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e07f      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0e:	4b3f      	ldr	r3, [pc, #252]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d109      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e06f      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e067      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2e:	4b37      	ldr	r3, [pc, #220]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f023 0203 	bic.w	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4934      	ldr	r1, [pc, #208]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f40:	f7fe fdbc 	bl	8000abc <HAL_GetTick>
 8001f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	e00a      	b.n	8001f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f48:	f7fe fdb8 	bl	8000abc <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e04f      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 020c 	and.w	r2, r3, #12
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d1eb      	bne.n	8001f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d20c      	bcs.n	8001f98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e032      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4916      	ldr	r1, [pc, #88]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	490e      	ldr	r1, [pc, #56]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fd6:	f000 f821 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	490a      	ldr	r1, [pc, #40]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	5ccb      	ldrb	r3, [r1, r3]
 8001fea:	fa22 f303 	lsr.w	r3, r2, r3
 8001fee:	4a09      	ldr	r2, [pc, #36]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fd1c 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023c00 	.word	0x40023c00
 800200c:	40023800 	.word	0x40023800
 8002010:	0800392c 	.word	0x0800392c
 8002014:	20000000 	.word	0x20000000
 8002018:	20000004 	.word	0x20000004

0800201c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800201c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002020:	b090      	sub	sp, #64	; 0x40
 8002022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
 8002028:	2300      	movs	r3, #0
 800202a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800202c:	2300      	movs	r3, #0
 800202e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002034:	4b59      	ldr	r3, [pc, #356]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b08      	cmp	r3, #8
 800203e:	d00d      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x40>
 8002040:	2b08      	cmp	r3, #8
 8002042:	f200 80a1 	bhi.w	8002188 <HAL_RCC_GetSysClockFreq+0x16c>
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x34>
 800204a:	2b04      	cmp	r3, #4
 800204c:	d003      	beq.n	8002056 <HAL_RCC_GetSysClockFreq+0x3a>
 800204e:	e09b      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002050:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002052:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002054:	e09b      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002056:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002058:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800205a:	e098      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800205c:	4b4f      	ldr	r3, [pc, #316]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002066:	4b4d      	ldr	r3, [pc, #308]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d028      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002072:	4b4a      	ldr	r3, [pc, #296]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	099b      	lsrs	r3, r3, #6
 8002078:	2200      	movs	r2, #0
 800207a:	623b      	str	r3, [r7, #32]
 800207c:	627a      	str	r2, [r7, #36]	; 0x24
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002084:	2100      	movs	r1, #0
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002088:	fb03 f201 	mul.w	r2, r3, r1
 800208c:	2300      	movs	r3, #0
 800208e:	fb00 f303 	mul.w	r3, r0, r3
 8002092:	4413      	add	r3, r2
 8002094:	4a43      	ldr	r2, [pc, #268]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002096:	fba0 1202 	umull	r1, r2, r0, r2
 800209a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800209c:	460a      	mov	r2, r1
 800209e:	62ba      	str	r2, [r7, #40]	; 0x28
 80020a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a2:	4413      	add	r3, r2
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a8:	2200      	movs	r2, #0
 80020aa:	61bb      	str	r3, [r7, #24]
 80020ac:	61fa      	str	r2, [r7, #28]
 80020ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020b6:	f7fe f867 	bl	8000188 <__aeabi_uldivmod>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4613      	mov	r3, r2
 80020c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c2:	e053      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	099b      	lsrs	r3, r3, #6
 80020ca:	2200      	movs	r2, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	617a      	str	r2, [r7, #20]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020d6:	f04f 0b00 	mov.w	fp, #0
 80020da:	4652      	mov	r2, sl
 80020dc:	465b      	mov	r3, fp
 80020de:	f04f 0000 	mov.w	r0, #0
 80020e2:	f04f 0100 	mov.w	r1, #0
 80020e6:	0159      	lsls	r1, r3, #5
 80020e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ec:	0150      	lsls	r0, r2, #5
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	ebb2 080a 	subs.w	r8, r2, sl
 80020f6:	eb63 090b 	sbc.w	r9, r3, fp
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002106:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800210a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800210e:	ebb2 0408 	subs.w	r4, r2, r8
 8002112:	eb63 0509 	sbc.w	r5, r3, r9
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	00eb      	lsls	r3, r5, #3
 8002120:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002124:	00e2      	lsls	r2, r4, #3
 8002126:	4614      	mov	r4, r2
 8002128:	461d      	mov	r5, r3
 800212a:	eb14 030a 	adds.w	r3, r4, sl
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	eb45 030b 	adc.w	r3, r5, fp
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002142:	4629      	mov	r1, r5
 8002144:	028b      	lsls	r3, r1, #10
 8002146:	4621      	mov	r1, r4
 8002148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800214c:	4621      	mov	r1, r4
 800214e:	028a      	lsls	r2, r1, #10
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002156:	2200      	movs	r2, #0
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	60fa      	str	r2, [r7, #12]
 800215c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002160:	f7fe f812 	bl	8000188 <__aeabi_uldivmod>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4613      	mov	r3, r2
 800216a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	0c1b      	lsrs	r3, r3, #16
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	3301      	adds	r3, #1
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800217c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002180:	fbb2 f3f3 	udiv	r3, r2, r3
 8002184:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002186:	e002      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800218a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800218c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002190:	4618      	mov	r0, r3
 8002192:	3740      	adds	r7, #64	; 0x40
 8002194:	46bd      	mov	sp, r7
 8002196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800
 80021a0:	00f42400 	.word	0x00f42400
 80021a4:	017d7840 	.word	0x017d7840

080021a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d035      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021d0:	4b62      	ldr	r3, [pc, #392]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021d6:	f7fe fc71 	bl	8000abc <HAL_GetTick>
 80021da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80021de:	f7fe fc6d 	bl	8000abc <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e0b0      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021f0:	4b5b      	ldr	r3, [pc, #364]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f0      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	019a      	lsls	r2, r3, #6
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	071b      	lsls	r3, r3, #28
 8002208:	4955      	ldr	r1, [pc, #340]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002210:	4b52      	ldr	r3, [pc, #328]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002216:	f7fe fc51 	bl	8000abc <HAL_GetTick>
 800221a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800221e:	f7fe fc4d 	bl	8000abc <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e090      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002230:	4b4b      	ldr	r3, [pc, #300]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 8083 	beq.w	8002350 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b44      	ldr	r3, [pc, #272]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a43      	ldr	r2, [pc, #268]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002266:	4b3f      	ldr	r3, [pc, #252]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a3e      	ldr	r2, [pc, #248]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800226c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002270:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002272:	f7fe fc23 	bl	8000abc <HAL_GetTick>
 8002276:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002278:	e008      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800227a:	f7fe fc1f 	bl	8000abc <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e062      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800228c:	4b35      	ldr	r3, [pc, #212]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002298:	4b31      	ldr	r3, [pc, #196]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d02f      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d028      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022b6:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022c6:	4b28      	ldr	r3, [pc, #160]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80022cc:	4a24      	ldr	r2, [pc, #144]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022d2:	4b23      	ldr	r3, [pc, #140]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d114      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80022de:	f7fe fbed 	bl	8000abc <HAL_GetTick>
 80022e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	e00a      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7fe fbe9 	bl	8000abc <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e02a      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fc:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ee      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002314:	d10d      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800232a:	490d      	ldr	r1, [pc, #52]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800232c:	4313      	orrs	r3, r2
 800232e:	608b      	str	r3, [r1, #8]
 8002330:	e005      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002338:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800233c:	6093      	str	r3, [r2, #8]
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002340:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234a:	4905      	ldr	r1, [pc, #20]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800234c:	4313      	orrs	r3, r2
 800234e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	42470068 	.word	0x42470068
 8002360:	40023800 	.word	0x40023800
 8002364:	40007000 	.word	0x40007000
 8002368:	42470e40 	.word	0x42470e40

0800236c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d13e      	bne.n	8002408 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800238a:	4b23      	ldr	r3, [pc, #140]	; (8002418 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d12f      	bne.n	8002400 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80023a0:	4b1e      	ldr	r3, [pc, #120]	; (800241c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80023a2:	617b      	str	r3, [r7, #20]
          break;
 80023a4:	e02f      	b.n	8002406 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80023a6:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023b2:	d108      	bne.n	80023c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80023b4:	4b18      	ldr	r3, [pc, #96]	; (8002418 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023bc:	4a18      	ldr	r2, [pc, #96]	; (8002420 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80023be:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	e007      	b.n	80023d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023ce:	4a15      	ldr	r2, [pc, #84]	; (8002424 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80023d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023dc:	099b      	lsrs	r3, r3, #6
 80023de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	fb02 f303 	mul.w	r3, r2, r3
 80023e8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80023ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f0:	0f1b      	lsrs	r3, r3, #28
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	617b      	str	r3, [r7, #20]
          break;
 80023fe:	e002      	b.n	8002406 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
          break;
 8002404:	bf00      	nop
        }
      }
      break;
 8002406:	bf00      	nop
    }
  }
  return frequency;
 8002408:	697b      	ldr	r3, [r7, #20]
}
 800240a:	4618      	mov	r0, r3
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	00bb8000 	.word	0x00bb8000
 8002420:	017d7840 	.word	0x017d7840
 8002424:	00f42400 	.word	0x00f42400

08002428 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e022      	b.n	8002480 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d105      	bne.n	8002452 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7fe f9d9 	bl	8000804 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2203      	movs	r2, #3
 8002456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f814 	bl	8002488 <HAL_SD_InitCard>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e00a      	b.n	8002480 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002488:	b5b0      	push	{r4, r5, r7, lr}
 800248a:	b08e      	sub	sp, #56	; 0x38
 800248c:	af04      	add	r7, sp, #16
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002490:	2300      	movs	r3, #0
 8002492:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80024a4:	2376      	movs	r3, #118	; 0x76
 80024a6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681d      	ldr	r5, [r3, #0]
 80024ac:	466c      	mov	r4, sp
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024ba:	f107 0308 	add.w	r3, r7, #8
 80024be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024c0:	4628      	mov	r0, r5
 80024c2:	f000 fd64 	bl	8002f8e <SDIO_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80024cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e04f      	b.n	8002578 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80024d8:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_SD_InitCard+0xf8>)
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fd8b 	bl	8002ffe <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <HAL_SD_InitCard+0xf8>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80024ee:	2002      	movs	r0, #2
 80024f0:	f7fe faf0 	bl	8000ad4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fb53 	bl	8002ba0 <SD_PowerON>
 80024fa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e02e      	b.n	8002578 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fa72 	bl	8002a04 <SD_InitCard>
 8002520:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00b      	beq.n	8002540 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e01b      	b.n	8002578 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002548:	4618      	mov	r0, r3
 800254a:	f000 fdea 	bl	8003122 <SDMMC_CmdBlockLength>
 800254e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00f      	beq.n	8002576 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <HAL_SD_InitCard+0xfc>)
 800255c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3728      	adds	r7, #40	; 0x28
 800257c:	46bd      	mov	sp, r7
 800257e:	bdb0      	pop	{r4, r5, r7, pc}
 8002580:	422580a0 	.word	0x422580a0
 8002584:	004005ff 	.word	0x004005ff

08002588 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002596:	0f9b      	lsrs	r3, r3, #30
 8002598:	b2da      	uxtb	r2, r3
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025a2:	0e9b      	lsrs	r3, r3, #26
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025b4:	0e1b      	lsrs	r3, r3, #24
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025c6:	0c1b      	lsrs	r3, r3, #16
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025d2:	0a1b      	lsrs	r3, r3, #8
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025e8:	0d1b      	lsrs	r3, r3, #20
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025f4:	0c1b      	lsrs	r3, r3, #16
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002606:	0bdb      	lsrs	r3, r3, #15
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	b2da      	uxtb	r2, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002618:	0b9b      	lsrs	r3, r3, #14
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	b2da      	uxtb	r2, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800262a:	0b5b      	lsrs	r3, r3, #13
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	b2da      	uxtb	r2, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800263c:	0b1b      	lsrs	r3, r3, #12
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	b2da      	uxtb	r2, r3
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2200      	movs	r2, #0
 800264e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	2b00      	cmp	r3, #0
 8002656:	d163      	bne.n	8002720 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800265c:	009a      	lsls	r2, r3, #2
 800265e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002662:	4013      	ands	r3, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002668:	0f92      	lsrs	r2, r2, #30
 800266a:	431a      	orrs	r2, r3
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002674:	0edb      	lsrs	r3, r3, #27
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	b2da      	uxtb	r2, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002686:	0e1b      	lsrs	r3, r3, #24
 8002688:	b2db      	uxtb	r3, r3
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	b2da      	uxtb	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002698:	0d5b      	lsrs	r3, r3, #21
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026aa:	0c9b      	lsrs	r3, r3, #18
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026bc:	0bdb      	lsrs	r3, r3, #15
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	7e1b      	ldrb	r3, [r3, #24]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	3302      	adds	r3, #2
 80026e0:	2201      	movs	r2, #1
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80026ea:	fb03 f202 	mul.w	r2, r3, r2
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	7a1b      	ldrb	r3, [r3, #8]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	2201      	movs	r2, #1
 80026fe:	409a      	lsls	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800270c:	0a52      	lsrs	r2, r2, #9
 800270e:	fb03 f202 	mul.w	r2, r3, r2
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800271c:	661a      	str	r2, [r3, #96]	; 0x60
 800271e:	e031      	b.n	8002784 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	2b01      	cmp	r3, #1
 8002726:	d11d      	bne.n	8002764 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800272c:	041b      	lsls	r3, r3, #16
 800272e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002736:	0c1b      	lsrs	r3, r3, #16
 8002738:	431a      	orrs	r2, r3
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	3301      	adds	r3, #1
 8002744:	029a      	lsls	r2, r3, #10
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002758:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	661a      	str	r2, [r3, #96]	; 0x60
 8002762:	e00f      	b.n	8002784 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_SD_GetCardCSD+0x344>)
 800276a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002770:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e09d      	b.n	80028c0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002788:	0b9b      	lsrs	r3, r3, #14
 800278a:	b2db      	uxtb	r3, r3
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	b2da      	uxtb	r2, r3
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800279a:	09db      	lsrs	r3, r3, #7
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	0fdb      	lsrs	r3, r3, #31
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	0f5b      	lsrs	r3, r3, #29
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027da:	0e9b      	lsrs	r3, r3, #26
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ec:	0d9b      	lsrs	r3, r3, #22
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f003 030f 	and.w	r3, r3, #15
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	0d5b      	lsrs	r3, r3, #21
 8002800:	b2db      	uxtb	r3, r3
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	b2da      	uxtb	r2, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281a:	0c1b      	lsrs	r3, r3, #16
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	b2da      	uxtb	r2, r3
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	0bdb      	lsrs	r3, r3, #15
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	b2da      	uxtb	r2, r3
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	0b9b      	lsrs	r3, r3, #14
 8002844:	b2db      	uxtb	r3, r3
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	b2da      	uxtb	r2, r3
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	0b5b      	lsrs	r3, r3, #13
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	b2da      	uxtb	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	0b1b      	lsrs	r3, r3, #12
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	b2da      	uxtb	r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287e:	0a9b      	lsrs	r3, r3, #10
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	b2da      	uxtb	r2, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	0a1b      	lsrs	r3, r3, #8
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	b2da      	uxtb	r2, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	004005ff 	.word	0x004005ff

080028d0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80028d0:	b5b0      	push	{r4, r5, r7, lr}
 80028d2:	b08e      	sub	sp, #56	; 0x38
 80028d4:	af04      	add	r7, sp, #16
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2203      	movs	r2, #3
 80028e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d02e      	beq.n	800294e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f6:	d106      	bne.n	8002906 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	639a      	str	r2, [r3, #56]	; 0x38
 8002904:	e029      	b.n	800295a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800290c:	d10a      	bne.n	8002924 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f9d4 	bl	8002cbc <SD_WideBus_Enable>
 8002914:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	639a      	str	r2, [r3, #56]	; 0x38
 8002922:	e01a      	b.n	800295a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10a      	bne.n	8002940 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fa11 	bl	8002d52 <SD_WideBus_Disable>
 8002930:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	639a      	str	r2, [r3, #56]	; 0x38
 800293e:	e00c      	b.n	800295a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002944:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	639a      	str	r2, [r3, #56]	; 0x38
 800294c:	e005      	b.n	800295a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a26      	ldr	r2, [pc, #152]	; (8002a00 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002968:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002978:	e01f      	b.n	80029ba <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681d      	ldr	r5, [r3, #0]
 80029a0:	466c      	mov	r4, sp
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80029ae:	f107 0308 	add.w	r3, r7, #8
 80029b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029b4:	4628      	mov	r0, r5
 80029b6:	f000 faea 	bl	8002f8e <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fbad 	bl	8003122 <SDMMC_CmdBlockLength>
 80029c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00c      	beq.n	80029ea <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <HAL_SD_ConfigWideBusOperation+0x130>)
 80029d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80029f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3728      	adds	r7, #40	; 0x28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bdb0      	pop	{r4, r5, r7, pc}
 80029fe:	bf00      	nop
 8002a00:	004005ff 	.word	0x004005ff

08002a04 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002a04:	b5b0      	push	{r4, r5, r7, lr}
 8002a06:	b094      	sub	sp, #80	; 0x50
 8002a08:	af04      	add	r7, sp, #16
 8002a0a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fb00 	bl	800301a <SDIO_GetPowerState>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002a20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a24:	e0b8      	b.n	8002b98 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d02f      	beq.n	8002a8e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fc7f 	bl	8003336 <SDMMC_CmdSendCID>
 8002a38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <SD_InitCard+0x40>
    {
      return errorstate;
 8002a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a42:	e0a9      	b.n	8002b98 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fb2a 	bl	80030a4 <SDIO_GetResponse>
 8002a50:	4602      	mov	r2, r0
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2104      	movs	r1, #4
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fb21 	bl	80030a4 <SDIO_GetResponse>
 8002a62:	4602      	mov	r2, r0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2108      	movs	r1, #8
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fb18 	bl	80030a4 <SDIO_GetResponse>
 8002a74:	4602      	mov	r2, r0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	210c      	movs	r1, #12
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fb0f 	bl	80030a4 <SDIO_GetResponse>
 8002a86:	4602      	mov	r2, r0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d00d      	beq.n	8002ab2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f107 020e 	add.w	r2, r7, #14
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fc85 	bl	80033b0 <SDMMC_CmdSetRelAdd>
 8002aa6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <SD_InitCard+0xae>
    {
      return errorstate;
 8002aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab0:	e072      	b.n	8002b98 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d036      	beq.n	8002b28 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002aba:	89fb      	ldrh	r3, [r7, #14]
 8002abc:	461a      	mov	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aca:	041b      	lsls	r3, r3, #16
 8002acc:	4619      	mov	r1, r3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	f000 fc4f 	bl	8003372 <SDMMC_CmdSendCSD>
 8002ad4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ade:	e05b      	b.n	8002b98 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fadc 	bl	80030a4 <SDIO_GetResponse>
 8002aec:	4602      	mov	r2, r0
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2104      	movs	r1, #4
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fad3 	bl	80030a4 <SDIO_GetResponse>
 8002afe:	4602      	mov	r2, r0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2108      	movs	r1, #8
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 faca 	bl	80030a4 <SDIO_GetResponse>
 8002b10:	4602      	mov	r2, r0
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	210c      	movs	r1, #12
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fac1 	bl	80030a4 <SDIO_GetResponse>
 8002b22:	4602      	mov	r2, r0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2104      	movs	r1, #4
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fab8 	bl	80030a4 <SDIO_GetResponse>
 8002b34:	4603      	mov	r3, r0
 8002b36:	0d1a      	lsrs	r2, r3, #20
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002b3c:	f107 0310 	add.w	r3, r7, #16
 8002b40:	4619      	mov	r1, r3
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff fd20 	bl	8002588 <HAL_SD_GetCardCSD>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002b4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b52:	e021      	b.n	8002b98 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6819      	ldr	r1, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5c:	041b      	lsls	r3, r3, #16
 8002b5e:	2200      	movs	r2, #0
 8002b60:	461c      	mov	r4, r3
 8002b62:	4615      	mov	r5, r2
 8002b64:	4622      	mov	r2, r4
 8002b66:	462b      	mov	r3, r5
 8002b68:	4608      	mov	r0, r1
 8002b6a:	f000 fafc 	bl	8003166 <SDMMC_CmdSelDesel>
 8002b6e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <SD_InitCard+0x176>
  {
    return errorstate;
 8002b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b78:	e00e      	b.n	8002b98 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681d      	ldr	r5, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	466c      	mov	r4, sp
 8002b82:	f103 0210 	add.w	r2, r3, #16
 8002b86:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b90:	4628      	mov	r0, r5
 8002b92:	f000 f9fc 	bl	8002f8e <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3740      	adds	r7, #64	; 0x40
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bdb0      	pop	{r4, r5, r7, pc}

08002ba0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 faf7 	bl	80031ac <SDMMC_CmdGoIdleState>
 8002bbe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <SD_PowerON+0x2a>
  {
    return errorstate;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	e072      	b.n	8002cb0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 fb0a 	bl	80031e8 <SDMMC_CmdOperCond>
 8002bd4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00d      	beq.n	8002bf8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fae0 	bl	80031ac <SDMMC_CmdGoIdleState>
 8002bec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d004      	beq.n	8002bfe <SD_PowerON+0x5e>
    {
      return errorstate;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	e05b      	b.n	8002cb0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d137      	bne.n	8002c76 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fb0a 	bl	8003226 <SDMMC_CmdAppCommand>
 8002c12:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d02d      	beq.n	8002c76 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c1e:	e047      	b.n	8002cb0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2100      	movs	r1, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fafd 	bl	8003226 <SDMMC_CmdAppCommand>
 8002c2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <SD_PowerON+0x98>
    {
      return errorstate;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	e03b      	b.n	8002cb0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	491e      	ldr	r1, [pc, #120]	; (8002cb8 <SD_PowerON+0x118>)
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fb13 	bl	800326a <SDMMC_CmdAppOperCommand>
 8002c44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c50:	e02e      	b.n	8002cb0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fa23 	bl	80030a4 <SDIO_GetResponse>
 8002c5e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	0fdb      	lsrs	r3, r3, #31
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <SD_PowerON+0xcc>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <SD_PowerON+0xce>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	613b      	str	r3, [r7, #16]

    count++;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	3301      	adds	r3, #1
 8002c74:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d802      	bhi.n	8002c86 <SD_PowerON+0xe6>
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0cc      	beq.n	8002c20 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d902      	bls.n	8002c96 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002c90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c94:	e00c      	b.n	8002cb0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
 8002ca6:	e002      	b.n	8002cae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	c1100000 	.word	0xc1100000

08002cbc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f9e6 	bl	80030a4 <SDIO_GetResponse>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ce2:	d102      	bne.n	8002cea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002ce4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ce8:	e02f      	b.n	8002d4a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002cea:	f107 030c 	add.w	r3, r7, #12
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f879 	bl	8002de8 <SD_FindSCR>
 8002cf6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	e023      	b.n	8002d4a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01c      	beq.n	8002d46 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d14:	041b      	lsls	r3, r3, #16
 8002d16:	4619      	mov	r1, r3
 8002d18:	4610      	mov	r0, r2
 8002d1a:	f000 fa84 	bl	8003226 <SDMMC_CmdAppCommand>
 8002d1e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	e00f      	b.n	8002d4a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2102      	movs	r1, #2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fabd 	bl	80032b0 <SDMMC_CmdBusWidth>
 8002d36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	e003      	b.n	8002d4a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e001      	b.n	8002d4a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002d46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b086      	sub	sp, #24
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f99b 	bl	80030a4 <SDIO_GetResponse>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d78:	d102      	bne.n	8002d80 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002d7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d7e:	e02f      	b.n	8002de0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002d80:	f107 030c 	add.w	r3, r7, #12
 8002d84:	4619      	mov	r1, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f82e 	bl	8002de8 <SD_FindSCR>
 8002d8c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	e023      	b.n	8002de0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01c      	beq.n	8002ddc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002daa:	041b      	lsls	r3, r3, #16
 8002dac:	4619      	mov	r1, r3
 8002dae:	4610      	mov	r0, r2
 8002db0:	f000 fa39 	bl	8003226 <SDMMC_CmdAppCommand>
 8002db4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	e00f      	b.n	8002de0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fa72 	bl	80032b0 <SDMMC_CmdBusWidth>
 8002dcc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	e003      	b.n	8002de0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e001      	b.n	8002de0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002ddc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b08f      	sub	sp, #60	; 0x3c
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002df2:	f7fd fe63 	bl	8000abc <HAL_GetTick>
 8002df6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2108      	movs	r1, #8
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 f987 	bl	8003122 <SDMMC_CmdBlockLength>
 8002e14:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <SD_FindSCR+0x38>
  {
    return errorstate;
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	e0b2      	b.n	8002f86 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e28:	041b      	lsls	r3, r3, #16
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	f000 f9fa 	bl	8003226 <SDMMC_CmdAppCommand>
 8002e32:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <SD_FindSCR+0x56>
  {
    return errorstate;
 8002e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3c:	e0a3      	b.n	8002f86 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e42:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8002e44:	2308      	movs	r3, #8
 8002e46:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002e48:	2330      	movs	r3, #48	; 0x30
 8002e4a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002e54:	2301      	movs	r3, #1
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f107 0210 	add.w	r2, r7, #16
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f931 	bl	80030ca <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fa41 	bl	80032f4 <SDMMC_CmdSendSCR>
 8002e72:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d02a      	beq.n	8002ed0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	e083      	b.n	8002f86 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00f      	beq.n	8002eac <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6819      	ldr	r1, [r3, #0]
 8002e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	f107 0208 	add.w	r2, r7, #8
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	4608      	mov	r0, r1
 8002e9c:	f000 f8a2 	bl	8002fe4 <SDIO_ReadFIFO>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	6023      	str	r3, [r4, #0]
      index++;
 8002ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eaa:	e006      	b.n	8002eba <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d012      	beq.n	8002ee0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002eba:	f7fd fdff 	bl	8000abc <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d102      	bne.n	8002ed0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8002eca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002ece:	e05a      	b.n	8002f86 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0cf      	beq.n	8002e7e <SD_FindSCR+0x96>
 8002ede:	e000      	b.n	8002ee2 <SD_FindSCR+0xfa>
      break;
 8002ee0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002ef8:	2308      	movs	r3, #8
 8002efa:	e044      	b.n	8002f86 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d005      	beq.n	8002f16 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8002f12:	2302      	movs	r3, #2
 8002f14:	e037      	b.n	8002f86 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8002f2c:	2320      	movs	r3, #32
 8002f2e:	e02a      	b.n	8002f86 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f240 523a 	movw	r2, #1338	; 0x53a
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	061a      	lsls	r2, r3, #24
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f46:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002f50:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	0e1b      	lsrs	r3, r3, #24
 8002f56:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5a:	601a      	str	r2, [r3, #0]
    scr++;
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5e:	3304      	adds	r3, #4
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	061a      	lsls	r2, r3, #24
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f6e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002f78:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	0e1b      	lsrs	r3, r3, #24
 8002f7e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f82:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	373c      	adds	r7, #60	; 0x3c
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd90      	pop	{r4, r7, pc}

08002f8e <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8002f8e:	b084      	sub	sp, #16
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	f107 001c 	add.w	r0, r7, #28
 8002f9c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8002fa4:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8002fa8:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8002fac:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8002fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8002fb0:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8002fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8002fb4:	431a      	orrs	r2, r3
             Init.ClockDiv
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8002fb8:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8002fc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	b004      	add	sp, #16
 8002fe2:	4770      	bx	lr

08002fe4 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2203      	movs	r2, #3
 800300a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0303 	and.w	r3, r3, #3
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003036:	b480      	push	{r7}
 8003038:	b085      	sub	sp, #20
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003054:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800305a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003060:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003070:	f023 030f 	bic.w	r3, r3, #15
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	b2db      	uxtb	r3, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3314      	adds	r3, #20
 80030b2:	461a      	mov	r2, r3
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4413      	add	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
}  
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80030f0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80030f6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80030fc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4313      	orrs	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003114:	2300      	movs	r3, #0

}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b088      	sub	sp, #32
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003130:	2310      	movs	r3, #16
 8003132:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003134:	2340      	movs	r3, #64	; 0x40
 8003136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800313c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003140:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003142:	f107 0308 	add.w	r3, r7, #8
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff ff74 	bl	8003036 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800314e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003152:	2110      	movs	r1, #16
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f94d 	bl	80033f4 <SDMMC_GetCmdResp1>
 800315a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800315c:	69fb      	ldr	r3, [r7, #28]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b08a      	sub	sp, #40	; 0x28
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003176:	2307      	movs	r3, #7
 8003178:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800317a:	2340      	movs	r3, #64	; 0x40
 800317c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003186:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003188:	f107 0310 	add.w	r3, r7, #16
 800318c:	4619      	mov	r1, r3
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7ff ff51 	bl	8003036 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003194:	f241 3288 	movw	r2, #5000	; 0x1388
 8003198:	2107      	movs	r1, #7
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f92a 	bl	80033f4 <SDMMC_GetCmdResp1>
 80031a0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3728      	adds	r7, #40	; 0x28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80031bc:	2300      	movs	r3, #0
 80031be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031ca:	f107 0308 	add.w	r3, r7, #8
 80031ce:	4619      	mov	r1, r3
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff ff30 	bl	8003036 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fb44 	bl	8003864 <SDMMC_GetCmdError>
 80031dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80031de:	69fb      	ldr	r3, [r7, #28]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3720      	adds	r7, #32
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80031f0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80031f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80031f6:	2308      	movs	r3, #8
 80031f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80031fa:	2340      	movs	r3, #64	; 0x40
 80031fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003206:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003208:	f107 0308 	add.w	r3, r7, #8
 800320c:	4619      	mov	r1, r3
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff ff11 	bl	8003036 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fad7 	bl	80037c8 <SDMMC_GetCmdResp7>
 800321a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800321c:	69fb      	ldr	r3, [r7, #28]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b088      	sub	sp, #32
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003234:	2337      	movs	r3, #55	; 0x37
 8003236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003238:	2340      	movs	r3, #64	; 0x40
 800323a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003244:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003246:	f107 0308 	add.w	r3, r7, #8
 800324a:	4619      	mov	r1, r3
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff fef2 	bl	8003036 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	2137      	movs	r1, #55	; 0x37
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f8cb 	bl	80033f4 <SDMMC_GetCmdResp1>
 800325e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003260:	69fb      	ldr	r3, [r7, #28]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b088      	sub	sp, #32
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800327a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800327e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003280:	2329      	movs	r3, #41	; 0x29
 8003282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003284:	2340      	movs	r3, #64	; 0x40
 8003286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800328c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003290:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003292:	f107 0308 	add.w	r3, r7, #8
 8003296:	4619      	mov	r1, r3
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff fecc 	bl	8003036 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f9de 	bl	8003660 <SDMMC_GetCmdResp3>
 80032a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80032a6:	69fb      	ldr	r3, [r7, #28]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3720      	adds	r7, #32
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80032be:	2306      	movs	r3, #6
 80032c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80032c2:	2340      	movs	r3, #64	; 0x40
 80032c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80032ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80032d0:	f107 0308 	add.w	r3, r7, #8
 80032d4:	4619      	mov	r1, r3
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff fead 	bl	8003036 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80032dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e0:	2106      	movs	r1, #6
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f886 	bl	80033f4 <SDMMC_GetCmdResp1>
 80032e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80032ea:	69fb      	ldr	r3, [r7, #28]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3720      	adds	r7, #32
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003300:	2333      	movs	r3, #51	; 0x33
 8003302:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003304:	2340      	movs	r3, #64	; 0x40
 8003306:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800330c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003310:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003312:	f107 0308 	add.w	r3, r7, #8
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff fe8c 	bl	8003036 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	2133      	movs	r1, #51	; 0x33
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f865 	bl	80033f4 <SDMMC_GetCmdResp1>
 800332a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800332c:	69fb      	ldr	r3, [r7, #28]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3720      	adds	r7, #32
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b088      	sub	sp, #32
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003342:	2302      	movs	r3, #2
 8003344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003346:	23c0      	movs	r3, #192	; 0xc0
 8003348:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800334e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003352:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003354:	f107 0308 	add.w	r3, r7, #8
 8003358:	4619      	mov	r1, r3
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff fe6b 	bl	8003036 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f935 	bl	80035d0 <SDMMC_GetCmdResp2>
 8003366:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003368:	69fb      	ldr	r3, [r7, #28]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3720      	adds	r7, #32
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b088      	sub	sp, #32
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003380:	2309      	movs	r3, #9
 8003382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003384:	23c0      	movs	r3, #192	; 0xc0
 8003386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800338c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003390:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003392:	f107 0308 	add.w	r3, r7, #8
 8003396:	4619      	mov	r1, r3
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff fe4c 	bl	8003036 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f916 	bl	80035d0 <SDMMC_GetCmdResp2>
 80033a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80033a6:	69fb      	ldr	r3, [r7, #28]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3720      	adds	r7, #32
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80033be:	2303      	movs	r3, #3
 80033c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80033c2:	2340      	movs	r3, #64	; 0x40
 80033c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033d0:	f107 0308 	add.w	r3, r7, #8
 80033d4:	4619      	mov	r1, r3
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff fe2d 	bl	8003036 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	2103      	movs	r1, #3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f97b 	bl	80036dc <SDMMC_GetCmdResp6>
 80033e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80033e8:	69fb      	ldr	r3, [r7, #28]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3720      	adds	r7, #32
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	460b      	mov	r3, r1
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003402:	4b70      	ldr	r3, [pc, #448]	; (80035c4 <SDMMC_GetCmdResp1+0x1d0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a70      	ldr	r2, [pc, #448]	; (80035c8 <SDMMC_GetCmdResp1+0x1d4>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	0a5a      	lsrs	r2, r3, #9
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	fb02 f303 	mul.w	r3, r2, r3
 8003414:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	1e5a      	subs	r2, r3, #1
 800341a:	61fa      	str	r2, [r7, #28]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d102      	bne.n	8003426 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003420:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003424:	e0c9      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0ef      	beq.n	8003416 <SDMMC_GetCmdResp1+0x22>
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ea      	bne.n	8003416 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d004      	beq.n	8003456 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2204      	movs	r2, #4
 8003450:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003452:	2304      	movs	r3, #4
 8003454:	e0b1      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d004      	beq.n	800346c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003468:	2301      	movs	r3, #1
 800346a:	e0a6      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	22c5      	movs	r2, #197	; 0xc5
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f7ff fe09 	bl	800308a <SDIO_GetCommandResponse>
 8003478:	4603      	mov	r3, r0
 800347a:	461a      	mov	r2, r3
 800347c:	7afb      	ldrb	r3, [r7, #11]
 800347e:	4293      	cmp	r3, r2
 8003480:	d001      	beq.n	8003486 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003482:	2301      	movs	r3, #1
 8003484:	e099      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003486:	2100      	movs	r1, #0
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f7ff fe0b 	bl	80030a4 <SDIO_GetResponse>
 800348e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4b4e      	ldr	r3, [pc, #312]	; (80035cc <SDMMC_GetCmdResp1+0x1d8>)
 8003494:	4013      	ands	r3, r2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800349a:	2300      	movs	r3, #0
 800349c:	e08d      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	da02      	bge.n	80034aa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80034a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034a8:	e087      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80034b4:	2340      	movs	r3, #64	; 0x40
 80034b6:	e080      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	e079      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80034d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034d4:	e071      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80034e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e4:	e069      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80034f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034f4:	e061      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003500:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003504:	e059      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003514:	e051      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003524:	e049      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003530:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003534:	e041      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003544:	e039      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003550:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003554:	e031      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003560:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003564:	e029      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003570:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003574:	e021      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003580:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003584:	e019      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003590:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003594:	e011      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80035a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035a4:	e009      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80035b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80035b4:	e001      	b.n	80035ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80035b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000000 	.word	0x20000000
 80035c8:	10624dd3 	.word	0x10624dd3
 80035cc:	fdffe008 	.word	0xfdffe008

080035d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80035d8:	4b1f      	ldr	r3, [pc, #124]	; (8003658 <SDMMC_GetCmdResp2+0x88>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1f      	ldr	r2, [pc, #124]	; (800365c <SDMMC_GetCmdResp2+0x8c>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	0a5b      	lsrs	r3, r3, #9
 80035e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e8:	fb02 f303 	mul.w	r3, r2, r3
 80035ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1e5a      	subs	r2, r3, #1
 80035f2:	60fa      	str	r2, [r7, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80035f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80035fc:	e026      	b.n	800364c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003602:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0ef      	beq.n	80035ee <SDMMC_GetCmdResp2+0x1e>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1ea      	bne.n	80035ee <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d004      	beq.n	800362e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2204      	movs	r2, #4
 8003628:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800362a:	2304      	movs	r3, #4
 800362c:	e00e      	b.n	800364c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d004      	beq.n	8003644 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003640:	2301      	movs	r3, #1
 8003642:	e003      	b.n	800364c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	22c5      	movs	r2, #197	; 0xc5
 8003648:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	20000000 	.word	0x20000000
 800365c:	10624dd3 	.word	0x10624dd3

08003660 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003668:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <SDMMC_GetCmdResp3+0x74>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1a      	ldr	r2, [pc, #104]	; (80036d8 <SDMMC_GetCmdResp3+0x78>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	0a5b      	lsrs	r3, r3, #9
 8003674:	f241 3288 	movw	r2, #5000	; 0x1388
 8003678:	fb02 f303 	mul.w	r3, r2, r3
 800367c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1e5a      	subs	r2, r3, #1
 8003682:	60fa      	str	r2, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003688:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800368c:	e01b      	b.n	80036c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003692:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0ef      	beq.n	800367e <SDMMC_GetCmdResp3+0x1e>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1ea      	bne.n	800367e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d004      	beq.n	80036be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2204      	movs	r2, #4
 80036b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80036ba:	2304      	movs	r3, #4
 80036bc:	e003      	b.n	80036c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	22c5      	movs	r2, #197	; 0xc5
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000000 	.word	0x20000000
 80036d8:	10624dd3 	.word	0x10624dd3

080036dc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	460b      	mov	r3, r1
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80036ea:	4b35      	ldr	r3, [pc, #212]	; (80037c0 <SDMMC_GetCmdResp6+0xe4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a35      	ldr	r2, [pc, #212]	; (80037c4 <SDMMC_GetCmdResp6+0xe8>)
 80036f0:	fba2 2303 	umull	r2, r3, r2, r3
 80036f4:	0a5b      	lsrs	r3, r3, #9
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	1e5a      	subs	r2, r3, #1
 8003704:	61fa      	str	r2, [r7, #28]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d102      	bne.n	8003710 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800370a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800370e:	e052      	b.n	80037b6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003714:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ef      	beq.n	8003700 <SDMMC_GetCmdResp6+0x24>
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1ea      	bne.n	8003700 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d004      	beq.n	8003740 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2204      	movs	r2, #4
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800373c:	2304      	movs	r3, #4
 800373e:	e03a      	b.n	80037b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d004      	beq.n	8003756 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2201      	movs	r2, #1
 8003750:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003752:	2301      	movs	r3, #1
 8003754:	e02f      	b.n	80037b6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7ff fc97 	bl	800308a <SDIO_GetCommandResponse>
 800375c:	4603      	mov	r3, r0
 800375e:	461a      	mov	r2, r3
 8003760:	7afb      	ldrb	r3, [r7, #11]
 8003762:	4293      	cmp	r3, r2
 8003764:	d001      	beq.n	800376a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003766:	2301      	movs	r3, #1
 8003768:	e025      	b.n	80037b6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	22c5      	movs	r2, #197	; 0xc5
 800376e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003770:	2100      	movs	r1, #0
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7ff fc96 	bl	80030a4 <SDIO_GetResponse>
 8003778:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	0c1b      	lsrs	r3, r3, #16
 8003788:	b29a      	uxth	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800378e:	2300      	movs	r3, #0
 8003790:	e011      	b.n	80037b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800379c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037a0:	e009      	b.n	80037b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80037ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037b0:	e001      	b.n	80037b6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80037b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3720      	adds	r7, #32
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000000 	.word	0x20000000
 80037c4:	10624dd3 	.word	0x10624dd3

080037c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80037d0:	4b22      	ldr	r3, [pc, #136]	; (800385c <SDMMC_GetCmdResp7+0x94>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a22      	ldr	r2, [pc, #136]	; (8003860 <SDMMC_GetCmdResp7+0x98>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	0a5b      	lsrs	r3, r3, #9
 80037dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e0:	fb02 f303 	mul.w	r3, r2, r3
 80037e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1e5a      	subs	r2, r3, #1
 80037ea:	60fa      	str	r2, [r7, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80037f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80037f4:	e02c      	b.n	8003850 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0ef      	beq.n	80037e6 <SDMMC_GetCmdResp7+0x1e>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1ea      	bne.n	80037e6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2204      	movs	r2, #4
 8003820:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003822:	2304      	movs	r3, #4
 8003824:	e014      	b.n	8003850 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d004      	beq.n	800383c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003838:	2301      	movs	r3, #1
 800383a:	e009      	b.n	8003850 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2240      	movs	r2, #64	; 0x40
 800384c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800384e:	2300      	movs	r3, #0
  
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	20000000 	.word	0x20000000
 8003860:	10624dd3 	.word	0x10624dd3

08003864 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <SDMMC_GetCmdError+0x50>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a11      	ldr	r2, [pc, #68]	; (80038b8 <SDMMC_GetCmdError+0x54>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	0a5b      	lsrs	r3, r3, #9
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	fb02 f303 	mul.w	r3, r2, r3
 8003880:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	1e5a      	subs	r2, r3, #1
 8003886:	60fa      	str	r2, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d102      	bne.n	8003892 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800388c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003890:	e009      	b.n	80038a6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f1      	beq.n	8003882 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	22c5      	movs	r2, #197	; 0xc5
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20000000 	.word	0x20000000
 80038b8:	10624dd3 	.word	0x10624dd3

080038bc <__libc_init_array>:
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	4d0d      	ldr	r5, [pc, #52]	; (80038f4 <__libc_init_array+0x38>)
 80038c0:	4c0d      	ldr	r4, [pc, #52]	; (80038f8 <__libc_init_array+0x3c>)
 80038c2:	1b64      	subs	r4, r4, r5
 80038c4:	10a4      	asrs	r4, r4, #2
 80038c6:	2600      	movs	r6, #0
 80038c8:	42a6      	cmp	r6, r4
 80038ca:	d109      	bne.n	80038e0 <__libc_init_array+0x24>
 80038cc:	4d0b      	ldr	r5, [pc, #44]	; (80038fc <__libc_init_array+0x40>)
 80038ce:	4c0c      	ldr	r4, [pc, #48]	; (8003900 <__libc_init_array+0x44>)
 80038d0:	f000 f820 	bl	8003914 <_init>
 80038d4:	1b64      	subs	r4, r4, r5
 80038d6:	10a4      	asrs	r4, r4, #2
 80038d8:	2600      	movs	r6, #0
 80038da:	42a6      	cmp	r6, r4
 80038dc:	d105      	bne.n	80038ea <__libc_init_array+0x2e>
 80038de:	bd70      	pop	{r4, r5, r6, pc}
 80038e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e4:	4798      	blx	r3
 80038e6:	3601      	adds	r6, #1
 80038e8:	e7ee      	b.n	80038c8 <__libc_init_array+0xc>
 80038ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ee:	4798      	blx	r3
 80038f0:	3601      	adds	r6, #1
 80038f2:	e7f2      	b.n	80038da <__libc_init_array+0x1e>
	...

08003904 <memset>:
 8003904:	4402      	add	r2, r0
 8003906:	4603      	mov	r3, r0
 8003908:	4293      	cmp	r3, r2
 800390a:	d100      	bne.n	800390e <memset+0xa>
 800390c:	4770      	bx	lr
 800390e:	f803 1b01 	strb.w	r1, [r3], #1
 8003912:	e7f9      	b.n	8003908 <memset+0x4>

08003914 <_init>:
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	bf00      	nop
 8003918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391a:	bc08      	pop	{r3}
 800391c:	469e      	mov	lr, r3
 800391e:	4770      	bx	lr

08003920 <_fini>:
 8003920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003922:	bf00      	nop
 8003924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003926:	bc08      	pop	{r3}
 8003928:	469e      	mov	lr, r3
 800392a:	4770      	bx	lr
